{"ast":null,"code":"import _classCallCheck from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * @module ol/Image\n */\nimport EventType from './events/EventType.js';\nimport ImageBase from './ImageBase.js';\nimport ImageState from './ImageState.js';\nimport { IMAGE_DECODE } from './has.js';\nimport { getHeight } from './extent.js';\nimport { listenOnce, unlistenByKey } from './events.js';\n\n/**\n * A function that takes an {@link module:ol/Image~ImageWrapper} for the image and a\n * `{string}` for the src as arguments. It is supposed to make it so the\n * underlying image {@link module:ol/Image~ImageWrapper#getImage} is assigned the\n * content specified by the src. If not specified, the default is\n *\n *     function(image, src) {\n *       image.getImage().src = src;\n *     }\n *\n * Providing a custom `imageLoadFunction` can be useful to load images with\n * post requests or - in general - through XHR requests, where the src of the\n * image element would be set to a data URI when the content is loaded.\n *\n * @typedef {function(ImageWrapper, string): void} LoadFunction\n * @api\n */\nvar ImageWrapper = /*#__PURE__*/function (_ImageBase) {\n  _inherits(ImageWrapper, _ImageBase);\n  var _super = _createSuper(ImageWrapper);\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number|undefined} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {string} src Image source URI.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {LoadFunction} imageLoadFunction Image load function.\n   * @param {CanvasRenderingContext2D} [context] Canvas context. When provided, the image will be\n   *    drawn into the context's canvas, and `getImage()` will return the canvas once the image\n   *    has finished loading.\n   */\n  function ImageWrapper(extent, resolution, pixelRatio, src, crossOrigin, imageLoadFunction, context) {\n    var _this;\n    _classCallCheck(this, ImageWrapper);\n    _this = _super.call(this, extent, resolution, pixelRatio, ImageState.IDLE);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.src_ = src;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}\n     */\n    _this.image_ = new Image();\n    if (crossOrigin !== null) {\n      _this.image_.crossOrigin = crossOrigin;\n    }\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    _this.context_ = context;\n\n    /**\n     * @private\n     * @type {?function():void}\n     */\n    _this.unlisten_ = null;\n\n    /**\n     * @protected\n     * @type {import(\"./ImageState.js\").default}\n     */\n    _this.state = ImageState.IDLE;\n\n    /**\n     * @private\n     * @type {LoadFunction}\n     */\n    _this.imageLoadFunction_ = imageLoadFunction;\n    return _this;\n  }\n\n  /**\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   * @api\n   */\n  _createClass(ImageWrapper, [{\n    key: \"getImage\",\n    value: function getImage() {\n      if (this.state == ImageState.LOADED && this.context_ && !(this.image_ instanceof HTMLCanvasElement)) {\n        var canvas = this.context_.canvas;\n        canvas.width = this.image_.width;\n        canvas.height = this.image_.height;\n        this.context_.drawImage(this.image_, 0, 0);\n        this.image_ = this.context_.canvas;\n      }\n      return this.image_;\n    }\n\n    /**\n     * Tracks loading or read errors.\n     *\n     * @private\n     */\n  }, {\n    key: \"handleImageError_\",\n    value: function handleImageError_() {\n      this.state = ImageState.ERROR;\n      this.unlistenImage_();\n      this.changed();\n    }\n\n    /**\n     * Tracks successful image load.\n     *\n     * @private\n     */\n  }, {\n    key: \"handleImageLoad_\",\n    value: function handleImageLoad_() {\n      if (this.resolution === undefined) {\n        this.resolution = getHeight(this.extent) / this.image_.height;\n      }\n      this.state = ImageState.LOADED;\n      this.unlistenImage_();\n      this.changed();\n    }\n\n    /**\n     * Load the image or retry if loading previously failed.\n     * Loading is taken care of by the tile queue, and calling this method is\n     * only needed for preloading or for reloading in case of an error.\n     * @api\n     */\n  }, {\n    key: \"load\",\n    value: function load() {\n      if (this.state == ImageState.IDLE || this.state == ImageState.ERROR) {\n        this.state = ImageState.LOADING;\n        this.changed();\n        this.imageLoadFunction_(this, this.src_);\n        this.unlisten_ = listenImage(this.image_, this.handleImageLoad_.bind(this), this.handleImageError_.bind(this));\n      }\n    }\n\n    /**\n     * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n     */\n  }, {\n    key: \"setImage\",\n    value: function setImage(image) {\n      this.image_ = image;\n      this.resolution = getHeight(this.extent) / this.image_.height;\n    }\n\n    /**\n     * Discards event handlers which listen for load completion or errors.\n     *\n     * @private\n     */\n  }, {\n    key: \"unlistenImage_\",\n    value: function unlistenImage_() {\n      if (this.unlisten_) {\n        this.unlisten_();\n        this.unlisten_ = null;\n      }\n    }\n  }]);\n  return ImageWrapper;\n}(ImageBase);\n/**\n * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image element.\n * @param {function():any} loadHandler Load callback function.\n * @param {function():any} errorHandler Error callback function.\n * @return {function():void} Callback to stop listening.\n */\nexport function listenImage(image, loadHandler, errorHandler) {\n  var img = /** @type {HTMLImageElement} */image;\n  var listening = true;\n  var decoding = false;\n  var loaded = false;\n  var listenerKeys = [listenOnce(img, EventType.LOAD, function () {\n    loaded = true;\n    if (!decoding) {\n      loadHandler();\n    }\n  })];\n  if (img.src && IMAGE_DECODE) {\n    decoding = true;\n    img.decode().then(function () {\n      if (listening) {\n        loadHandler();\n      }\n    }).catch(function (error) {\n      if (listening) {\n        if (loaded) {\n          loadHandler();\n        } else {\n          errorHandler();\n        }\n      }\n    });\n  } else {\n    listenerKeys.push(listenOnce(img, EventType.ERROR, errorHandler));\n  }\n  return function unlisten() {\n    listening = false;\n    listenerKeys.forEach(unlistenByKey);\n  };\n}\nexport default ImageWrapper;","map":{"version":3,"names":["EventType","ImageBase","ImageState","IMAGE_DECODE","getHeight","listenOnce","unlistenByKey","ImageWrapper","_ImageBase","_inherits","_super","_createSuper","extent","resolution","pixelRatio","src","crossOrigin","imageLoadFunction","context","_this","_classCallCheck","call","IDLE","src_","image_","Image","context_","unlisten_","state","imageLoadFunction_","_createClass","key","value","getImage","LOADED","HTMLCanvasElement","canvas","width","height","drawImage","handleImageError_","ERROR","unlistenImage_","changed","handleImageLoad_","undefined","load","LOADING","listenImage","bind","setImage","image","loadHandler","errorHandler","img","listening","decoding","loaded","listenerKeys","LOAD","decode","then","catch","error","push","unlisten","forEach"],"sources":["/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/ol/Image.js"],"sourcesContent":["/**\n * @module ol/Image\n */\nimport EventType from './events/EventType.js';\nimport ImageBase from './ImageBase.js';\nimport ImageState from './ImageState.js';\nimport {IMAGE_DECODE} from './has.js';\nimport {getHeight} from './extent.js';\nimport {listenOnce, unlistenByKey} from './events.js';\n\n/**\n * A function that takes an {@link module:ol/Image~ImageWrapper} for the image and a\n * `{string}` for the src as arguments. It is supposed to make it so the\n * underlying image {@link module:ol/Image~ImageWrapper#getImage} is assigned the\n * content specified by the src. If not specified, the default is\n *\n *     function(image, src) {\n *       image.getImage().src = src;\n *     }\n *\n * Providing a custom `imageLoadFunction` can be useful to load images with\n * post requests or - in general - through XHR requests, where the src of the\n * image element would be set to a data URI when the content is loaded.\n *\n * @typedef {function(ImageWrapper, string): void} LoadFunction\n * @api\n */\n\nclass ImageWrapper extends ImageBase {\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number|undefined} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {string} src Image source URI.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {LoadFunction} imageLoadFunction Image load function.\n   * @param {CanvasRenderingContext2D} [context] Canvas context. When provided, the image will be\n   *    drawn into the context's canvas, and `getImage()` will return the canvas once the image\n   *    has finished loading.\n   */\n  constructor(\n    extent,\n    resolution,\n    pixelRatio,\n    src,\n    crossOrigin,\n    imageLoadFunction,\n    context\n  ) {\n    super(extent, resolution, pixelRatio, ImageState.IDLE);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.src_ = src;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}\n     */\n    this.image_ = new Image();\n    if (crossOrigin !== null) {\n      this.image_.crossOrigin = crossOrigin;\n    }\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.context_ = context;\n\n    /**\n     * @private\n     * @type {?function():void}\n     */\n    this.unlisten_ = null;\n\n    /**\n     * @protected\n     * @type {import(\"./ImageState.js\").default}\n     */\n    this.state = ImageState.IDLE;\n\n    /**\n     * @private\n     * @type {LoadFunction}\n     */\n    this.imageLoadFunction_ = imageLoadFunction;\n  }\n\n  /**\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   * @api\n   */\n  getImage() {\n    if (\n      this.state == ImageState.LOADED &&\n      this.context_ &&\n      !(this.image_ instanceof HTMLCanvasElement)\n    ) {\n      const canvas = this.context_.canvas;\n      canvas.width = this.image_.width;\n      canvas.height = this.image_.height;\n      this.context_.drawImage(this.image_, 0, 0);\n      this.image_ = this.context_.canvas;\n    }\n    return this.image_;\n  }\n\n  /**\n   * Tracks loading or read errors.\n   *\n   * @private\n   */\n  handleImageError_() {\n    this.state = ImageState.ERROR;\n    this.unlistenImage_();\n    this.changed();\n  }\n\n  /**\n   * Tracks successful image load.\n   *\n   * @private\n   */\n  handleImageLoad_() {\n    if (this.resolution === undefined) {\n      this.resolution = getHeight(this.extent) / this.image_.height;\n    }\n    this.state = ImageState.LOADED;\n    this.unlistenImage_();\n    this.changed();\n  }\n\n  /**\n   * Load the image or retry if loading previously failed.\n   * Loading is taken care of by the tile queue, and calling this method is\n   * only needed for preloading or for reloading in case of an error.\n   * @api\n   */\n  load() {\n    if (this.state == ImageState.IDLE || this.state == ImageState.ERROR) {\n      this.state = ImageState.LOADING;\n      this.changed();\n      this.imageLoadFunction_(this, this.src_);\n      this.unlisten_ = listenImage(\n        this.image_,\n        this.handleImageLoad_.bind(this),\n        this.handleImageError_.bind(this)\n      );\n    }\n  }\n\n  /**\n   * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n   */\n  setImage(image) {\n    this.image_ = image;\n    this.resolution = getHeight(this.extent) / this.image_.height;\n  }\n\n  /**\n   * Discards event handlers which listen for load completion or errors.\n   *\n   * @private\n   */\n  unlistenImage_() {\n    if (this.unlisten_) {\n      this.unlisten_();\n      this.unlisten_ = null;\n    }\n  }\n}\n\n/**\n * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image element.\n * @param {function():any} loadHandler Load callback function.\n * @param {function():any} errorHandler Error callback function.\n * @return {function():void} Callback to stop listening.\n */\nexport function listenImage(image, loadHandler, errorHandler) {\n  const img = /** @type {HTMLImageElement} */ (image);\n  let listening = true;\n  let decoding = false;\n  let loaded = false;\n\n  const listenerKeys = [\n    listenOnce(img, EventType.LOAD, function () {\n      loaded = true;\n      if (!decoding) {\n        loadHandler();\n      }\n    }),\n  ];\n\n  if (img.src && IMAGE_DECODE) {\n    decoding = true;\n    img\n      .decode()\n      .then(function () {\n        if (listening) {\n          loadHandler();\n        }\n      })\n      .catch(function (error) {\n        if (listening) {\n          if (loaded) {\n            loadHandler();\n          } else {\n            errorHandler();\n          }\n        }\n      });\n  } else {\n    listenerKeys.push(listenOnce(img, EventType.ERROR, errorHandler));\n  }\n\n  return function unlisten() {\n    listening = false;\n    listenerKeys.forEach(unlistenByKey);\n  };\n}\n\nexport default ImageWrapper;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}