{"ast":null,"code":"/**\n * @module ol/render/canvas/TextBuilder\n */\nimport CanvasBuilder from './Builder.js';\nimport CanvasInstruction from './Instruction.js';\nimport { asColorLike } from '../../colorlike.js';\nimport { defaultFillStyle, defaultFont, defaultLineCap, defaultLineDash, defaultLineDashOffset, defaultLineJoin, defaultLineWidth, defaultMiterLimit, defaultPadding, defaultStrokeStyle, defaultTextAlign, defaultTextBaseline, registerFont } from '../canvas.js';\nimport { getUid } from '../../util.js';\nimport { intersects } from '../../extent.js';\nimport { lineChunk } from '../../geom/flat/linechunk.js';\nimport { matchingChunk } from '../../geom/flat/straightchunk.js';\n/**\n * @const\n * @enum {number}\n */\nexport const TEXT_ALIGN = {\n  'left': 0,\n  'end': 0,\n  'center': 0.5,\n  'right': 1,\n  'start': 1,\n  'top': 0,\n  'middle': 0.5,\n  'hanging': 0.2,\n  'alphabetic': 0.8,\n  'ideographic': 0.8,\n  'bottom': 1\n};\nclass CanvasTextBuilder extends CanvasBuilder {\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\n    super(tolerance, maxExtent, resolution, pixelRatio);\n\n    /**\n     * @private\n     * @type {Array<HTMLCanvasElement>}\n     */\n    this.labels_ = null;\n\n    /**\n     * @private\n     * @type {string|Array<string>}\n     */\n    this.text_ = '';\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textOffsetX_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textOffsetY_ = 0;\n\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    this.textRotateWithView_ = undefined;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textRotation_ = 0;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").FillState}\n     */\n    this.textFillState_ = null;\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").FillState>}\n     */\n    this.fillStates = {};\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").StrokeState}\n     */\n    this.textStrokeState_ = null;\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").StrokeState>}\n     */\n    this.strokeStates = {};\n\n    /**\n     * @private\n     * @type {import(\"../canvas.js\").TextState}\n     */\n    this.textState_ = /** @type {import(\"../canvas.js\").TextState} */{};\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").TextState>}\n     */\n    this.textStates = {};\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.textKey_ = '';\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.fillKey_ = '';\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.strokeKey_ = '';\n\n    /**\n     * Data shared with an image builder for combined decluttering.\n     * @private\n     * @type {import(\"../canvas.js\").DeclutterImageWithText}\n     */\n    this.declutterImageWithText_ = undefined;\n  }\n\n  /**\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\n   */\n  finish() {\n    const instructions = super.finish();\n    instructions.textStates = this.textStates;\n    instructions.fillStates = this.fillStates;\n    instructions.strokeStates = this.strokeStates;\n    return instructions;\n  }\n\n  /**\n   * @param {import(\"../../geom/SimpleGeometry.js\").default|import(\"../Feature.js\").default} geometry Geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */\n  drawText(geometry, feature) {\n    const fillState = this.textFillState_;\n    const strokeState = this.textStrokeState_;\n    const textState = this.textState_;\n    if (this.text_ === '' || !textState || !fillState && !strokeState) {\n      return;\n    }\n    const coordinates = this.coordinates;\n    let begin = coordinates.length;\n    const geometryType = geometry.getType();\n    let flatCoordinates = null;\n    let stride = geometry.getStride();\n    if (textState.placement === 'line' && (geometryType == 'LineString' || geometryType == 'MultiLineString' || geometryType == 'Polygon' || geometryType == 'MultiPolygon')) {\n      if (!intersects(this.getBufferedMaxExtent(), geometry.getExtent())) {\n        return;\n      }\n      let ends;\n      flatCoordinates = geometry.getFlatCoordinates();\n      if (geometryType == 'LineString') {\n        ends = [flatCoordinates.length];\n      } else if (geometryType == 'MultiLineString') {\n        ends = /** @type {import(\"../../geom/MultiLineString.js\").default} */geometry.getEnds();\n      } else if (geometryType == 'Polygon') {\n        ends = /** @type {import(\"../../geom/Polygon.js\").default} */geometry.getEnds().slice(0, 1);\n      } else if (geometryType == 'MultiPolygon') {\n        const endss = /** @type {import(\"../../geom/MultiPolygon.js\").default} */geometry.getEndss();\n        ends = [];\n        for (let i = 0, ii = endss.length; i < ii; ++i) {\n          ends.push(endss[i][0]);\n        }\n      }\n      this.beginGeometry(geometry, feature);\n      const repeat = textState.repeat;\n      const textAlign = repeat ? undefined : textState.textAlign;\n      // No `justify` support for line placement.\n      let flatOffset = 0;\n      for (let o = 0, oo = ends.length; o < oo; ++o) {\n        let chunks;\n        if (repeat) {\n          chunks = lineChunk(repeat * this.resolution, flatCoordinates, flatOffset, ends[o], stride);\n        } else {\n          chunks = [flatCoordinates.slice(flatOffset, ends[o])];\n        }\n        for (let c = 0, cc = chunks.length; c < cc; ++c) {\n          const chunk = chunks[c];\n          let chunkBegin = 0;\n          let chunkEnd = chunk.length;\n          if (textAlign == undefined) {\n            const range = matchingChunk(textState.maxAngle, chunk, 0, chunk.length, 2);\n            chunkBegin = range[0];\n            chunkEnd = range[1];\n          }\n          for (let i = chunkBegin; i < chunkEnd; i += stride) {\n            coordinates.push(chunk[i], chunk[i + 1]);\n          }\n          const end = coordinates.length;\n          flatOffset = ends[o];\n          this.drawChars_(begin, end);\n          begin = end;\n        }\n      }\n      this.endGeometry(feature);\n    } else {\n      let geometryWidths = textState.overflow ? null : [];\n      switch (geometryType) {\n        case 'Point':\n        case 'MultiPoint':\n          flatCoordinates = /** @type {import(\"../../geom/MultiPoint.js\").default} */geometry.getFlatCoordinates();\n          break;\n        case 'LineString':\n          flatCoordinates = /** @type {import(\"../../geom/LineString.js\").default} */geometry.getFlatMidpoint();\n          break;\n        case 'Circle':\n          flatCoordinates = /** @type {import(\"../../geom/Circle.js\").default} */geometry.getCenter();\n          break;\n        case 'MultiLineString':\n          flatCoordinates = /** @type {import(\"../../geom/MultiLineString.js\").default} */geometry.getFlatMidpoints();\n          stride = 2;\n          break;\n        case 'Polygon':\n          flatCoordinates = /** @type {import(\"../../geom/Polygon.js\").default} */geometry.getFlatInteriorPoint();\n          if (!textState.overflow) {\n            geometryWidths.push(flatCoordinates[2] / this.resolution);\n          }\n          stride = 3;\n          break;\n        case 'MultiPolygon':\n          const interiorPoints = /** @type {import(\"../../geom/MultiPolygon.js\").default} */geometry.getFlatInteriorPoints();\n          flatCoordinates = [];\n          for (let i = 0, ii = interiorPoints.length; i < ii; i += 3) {\n            if (!textState.overflow) {\n              geometryWidths.push(interiorPoints[i + 2] / this.resolution);\n            }\n            flatCoordinates.push(interiorPoints[i], interiorPoints[i + 1]);\n          }\n          if (flatCoordinates.length === 0) {\n            return;\n          }\n          stride = 2;\n          break;\n        default:\n      }\n      const end = this.appendFlatPointCoordinates(flatCoordinates, stride);\n      if (end === begin) {\n        return;\n      }\n      if (geometryWidths && (end - begin) / 2 !== flatCoordinates.length / stride) {\n        let beg = begin / 2;\n        geometryWidths = geometryWidths.filter((w, i) => {\n          const keep = coordinates[(beg + i) * 2] === flatCoordinates[i * stride] && coordinates[(beg + i) * 2 + 1] === flatCoordinates[i * stride + 1];\n          if (!keep) {\n            --beg;\n          }\n          return keep;\n        });\n      }\n      this.saveTextStates_();\n      if (textState.backgroundFill || textState.backgroundStroke) {\n        this.setFillStrokeStyle(textState.backgroundFill, textState.backgroundStroke);\n        if (textState.backgroundFill) {\n          this.updateFillStyle(this.state, this.createFill);\n          this.hitDetectionInstructions.push(this.createFill(this.state));\n        }\n        if (textState.backgroundStroke) {\n          this.updateStrokeStyle(this.state, this.applyStroke);\n          this.hitDetectionInstructions.push(this.createStroke(this.state));\n        }\n      }\n      this.beginGeometry(geometry, feature);\n\n      // adjust padding for negative scale\n      let padding = textState.padding;\n      if (padding != defaultPadding && (textState.scale[0] < 0 || textState.scale[1] < 0)) {\n        let p0 = textState.padding[0];\n        let p1 = textState.padding[1];\n        let p2 = textState.padding[2];\n        let p3 = textState.padding[3];\n        if (textState.scale[0] < 0) {\n          p1 = -p1;\n          p3 = -p3;\n        }\n        if (textState.scale[1] < 0) {\n          p0 = -p0;\n          p2 = -p2;\n        }\n        padding = [p0, p1, p2, p3];\n      }\n\n      // The image is unknown at this stage so we pass null; it will be computed at render time.\n      // For clarity, we pass NaN for offsetX, offsetY, width and height, which will be computed at\n      // render time.\n      const pixelRatio = this.pixelRatio;\n      this.instructions.push([CanvasInstruction.DRAW_IMAGE, begin, end, null, NaN, NaN, NaN, 1, 0, 0, this.textRotateWithView_, this.textRotation_, [1, 1], NaN, undefined, this.declutterImageWithText_, padding == defaultPadding ? defaultPadding : padding.map(function (p) {\n        return p * pixelRatio;\n      }), !!textState.backgroundFill, !!textState.backgroundStroke, this.text_, this.textKey_, this.strokeKey_, this.fillKey_, this.textOffsetX_, this.textOffsetY_, geometryWidths]);\n      const scale = 1 / pixelRatio;\n      this.hitDetectionInstructions.push([CanvasInstruction.DRAW_IMAGE, begin, end, null, NaN, NaN, NaN, 1, 0, 0, this.textRotateWithView_, this.textRotation_, [scale, scale], NaN, undefined, this.declutterImageWithText_, padding, !!textState.backgroundFill, !!textState.backgroundStroke, this.text_, this.textKey_, this.strokeKey_, this.fillKey_, this.textOffsetX_, this.textOffsetY_, geometryWidths]);\n      this.endGeometry(feature);\n    }\n  }\n\n  /**\n   * @private\n   */\n  saveTextStates_() {\n    const strokeState = this.textStrokeState_;\n    const textState = this.textState_;\n    const fillState = this.textFillState_;\n    const strokeKey = this.strokeKey_;\n    if (strokeState) {\n      if (!(strokeKey in this.strokeStates)) {\n        this.strokeStates[strokeKey] = {\n          strokeStyle: strokeState.strokeStyle,\n          lineCap: strokeState.lineCap,\n          lineDashOffset: strokeState.lineDashOffset,\n          lineWidth: strokeState.lineWidth,\n          lineJoin: strokeState.lineJoin,\n          miterLimit: strokeState.miterLimit,\n          lineDash: strokeState.lineDash\n        };\n      }\n    }\n    const textKey = this.textKey_;\n    if (!(textKey in this.textStates)) {\n      this.textStates[textKey] = {\n        font: textState.font,\n        textAlign: textState.textAlign || defaultTextAlign,\n        justify: textState.justify,\n        textBaseline: textState.textBaseline || defaultTextBaseline,\n        scale: textState.scale\n      };\n    }\n    const fillKey = this.fillKey_;\n    if (fillState) {\n      if (!(fillKey in this.fillStates)) {\n        this.fillStates[fillKey] = {\n          fillStyle: fillState.fillStyle\n        };\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {number} begin Begin.\n   * @param {number} end End.\n   */\n  drawChars_(begin, end) {\n    const strokeState = this.textStrokeState_;\n    const textState = this.textState_;\n    const strokeKey = this.strokeKey_;\n    const textKey = this.textKey_;\n    const fillKey = this.fillKey_;\n    this.saveTextStates_();\n    const pixelRatio = this.pixelRatio;\n    const baseline = TEXT_ALIGN[textState.textBaseline];\n    const offsetY = this.textOffsetY_ * pixelRatio;\n    const text = this.text_;\n    const strokeWidth = strokeState ? strokeState.lineWidth * Math.abs(textState.scale[0]) / 2 : 0;\n    this.instructions.push([CanvasInstruction.DRAW_CHARS, begin, end, baseline, textState.overflow, fillKey, textState.maxAngle, pixelRatio, offsetY, strokeKey, strokeWidth * pixelRatio, text, textKey, 1]);\n    this.hitDetectionInstructions.push([CanvasInstruction.DRAW_CHARS, begin, end, baseline, textState.overflow, fillKey, textState.maxAngle, 1, offsetY, strokeKey, strokeWidth, text, textKey, 1 / pixelRatio]);\n  }\n\n  /**\n   * @param {import(\"../../style/Text.js\").default} textStyle Text style.\n   * @param {Object} [sharedData] Shared data.\n   */\n  setTextStyle(textStyle, sharedData) {\n    let textState, fillState, strokeState;\n    if (!textStyle) {\n      this.text_ = '';\n    } else {\n      const textFillStyle = textStyle.getFill();\n      if (!textFillStyle) {\n        fillState = null;\n        this.textFillState_ = fillState;\n      } else {\n        fillState = this.textFillState_;\n        if (!fillState) {\n          fillState = /** @type {import(\"../canvas.js\").FillState} */{};\n          this.textFillState_ = fillState;\n        }\n        fillState.fillStyle = asColorLike(textFillStyle.getColor() || defaultFillStyle);\n      }\n      const textStrokeStyle = textStyle.getStroke();\n      if (!textStrokeStyle) {\n        strokeState = null;\n        this.textStrokeState_ = strokeState;\n      } else {\n        strokeState = this.textStrokeState_;\n        if (!strokeState) {\n          strokeState = /** @type {import(\"../canvas.js\").StrokeState} */{};\n          this.textStrokeState_ = strokeState;\n        }\n        const lineDash = textStrokeStyle.getLineDash();\n        const lineDashOffset = textStrokeStyle.getLineDashOffset();\n        const lineWidth = textStrokeStyle.getWidth();\n        const miterLimit = textStrokeStyle.getMiterLimit();\n        strokeState.lineCap = textStrokeStyle.getLineCap() || defaultLineCap;\n        strokeState.lineDash = lineDash ? lineDash.slice() : defaultLineDash;\n        strokeState.lineDashOffset = lineDashOffset === undefined ? defaultLineDashOffset : lineDashOffset;\n        strokeState.lineJoin = textStrokeStyle.getLineJoin() || defaultLineJoin;\n        strokeState.lineWidth = lineWidth === undefined ? defaultLineWidth : lineWidth;\n        strokeState.miterLimit = miterLimit === undefined ? defaultMiterLimit : miterLimit;\n        strokeState.strokeStyle = asColorLike(textStrokeStyle.getColor() || defaultStrokeStyle);\n      }\n      textState = this.textState_;\n      const font = textStyle.getFont() || defaultFont;\n      registerFont(font);\n      const textScale = textStyle.getScaleArray();\n      textState.overflow = textStyle.getOverflow();\n      textState.font = font;\n      textState.maxAngle = textStyle.getMaxAngle();\n      textState.placement = textStyle.getPlacement();\n      textState.textAlign = textStyle.getTextAlign();\n      textState.repeat = textStyle.getRepeat();\n      textState.justify = textStyle.getJustify();\n      textState.textBaseline = textStyle.getTextBaseline() || defaultTextBaseline;\n      textState.backgroundFill = textStyle.getBackgroundFill();\n      textState.backgroundStroke = textStyle.getBackgroundStroke();\n      textState.padding = textStyle.getPadding() || defaultPadding;\n      textState.scale = textScale === undefined ? [1, 1] : textScale;\n      const textOffsetX = textStyle.getOffsetX();\n      const textOffsetY = textStyle.getOffsetY();\n      const textRotateWithView = textStyle.getRotateWithView();\n      const textRotation = textStyle.getRotation();\n      this.text_ = textStyle.getText() || '';\n      this.textOffsetX_ = textOffsetX === undefined ? 0 : textOffsetX;\n      this.textOffsetY_ = textOffsetY === undefined ? 0 : textOffsetY;\n      this.textRotateWithView_ = textRotateWithView === undefined ? false : textRotateWithView;\n      this.textRotation_ = textRotation === undefined ? 0 : textRotation;\n      this.strokeKey_ = strokeState ? (typeof strokeState.strokeStyle == 'string' ? strokeState.strokeStyle : getUid(strokeState.strokeStyle)) + strokeState.lineCap + strokeState.lineDashOffset + '|' + strokeState.lineWidth + strokeState.lineJoin + strokeState.miterLimit + '[' + strokeState.lineDash.join() + ']' : '';\n      this.textKey_ = textState.font + textState.scale + (textState.textAlign || '?') + (textState.repeat || '?') + (textState.justify || '?') + (textState.textBaseline || '?');\n      this.fillKey_ = fillState ? typeof fillState.fillStyle == 'string' ? fillState.fillStyle : '|' + getUid(fillState.fillStyle) : '';\n    }\n    this.declutterImageWithText_ = sharedData;\n  }\n}\nexport default CanvasTextBuilder;","map":{"version":3,"names":["CanvasBuilder","CanvasInstruction","asColorLike","defaultFillStyle","defaultFont","defaultLineCap","defaultLineDash","defaultLineDashOffset","defaultLineJoin","defaultLineWidth","defaultMiterLimit","defaultPadding","defaultStrokeStyle","defaultTextAlign","defaultTextBaseline","registerFont","getUid","intersects","lineChunk","matchingChunk","TEXT_ALIGN","CanvasTextBuilder","constructor","tolerance","maxExtent","resolution","pixelRatio","labels_","text_","textOffsetX_","textOffsetY_","textRotateWithView_","undefined","textRotation_","textFillState_","fillStates","textStrokeState_","strokeStates","textState_","textStates","textKey_","fillKey_","strokeKey_","declutterImageWithText_","finish","instructions","drawText","geometry","feature","fillState","strokeState","textState","coordinates","begin","length","geometryType","getType","flatCoordinates","stride","getStride","placement","getBufferedMaxExtent","getExtent","ends","getFlatCoordinates","getEnds","slice","endss","getEndss","i","ii","push","beginGeometry","repeat","textAlign","flatOffset","o","oo","chunks","c","cc","chunk","chunkBegin","chunkEnd","range","maxAngle","end","drawChars_","endGeometry","geometryWidths","overflow","getFlatMidpoint","getCenter","getFlatMidpoints","getFlatInteriorPoint","interiorPoints","getFlatInteriorPoints","appendFlatPointCoordinates","beg","filter","w","keep","saveTextStates_","backgroundFill","backgroundStroke","setFillStrokeStyle","updateFillStyle","state","createFill","hitDetectionInstructions","updateStrokeStyle","applyStroke","createStroke","padding","scale","p0","p1","p2","p3","DRAW_IMAGE","NaN","map","p","strokeKey","strokeStyle","lineCap","lineDashOffset","lineWidth","lineJoin","miterLimit","lineDash","textKey","font","justify","textBaseline","fillKey","fillStyle","baseline","offsetY","text","strokeWidth","Math","abs","DRAW_CHARS","setTextStyle","textStyle","sharedData","textFillStyle","getFill","getColor","textStrokeStyle","getStroke","getLineDash","getLineDashOffset","getWidth","getMiterLimit","getLineCap","getLineJoin","getFont","textScale","getScaleArray","getOverflow","getMaxAngle","getPlacement","getTextAlign","getRepeat","getJustify","getTextBaseline","getBackgroundFill","getBackgroundStroke","getPadding","textOffsetX","getOffsetX","textOffsetY","getOffsetY","textRotateWithView","getRotateWithView","textRotation","getRotation","getText","join"],"sources":["/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/ol/render/canvas/TextBuilder.js"],"sourcesContent":["/**\n * @module ol/render/canvas/TextBuilder\n */\nimport CanvasBuilder from './Builder.js';\nimport CanvasInstruction from './Instruction.js';\nimport {asColorLike} from '../../colorlike.js';\nimport {\n  defaultFillStyle,\n  defaultFont,\n  defaultLineCap,\n  defaultLineDash,\n  defaultLineDashOffset,\n  defaultLineJoin,\n  defaultLineWidth,\n  defaultMiterLimit,\n  defaultPadding,\n  defaultStrokeStyle,\n  defaultTextAlign,\n  defaultTextBaseline,\n  registerFont,\n} from '../canvas.js';\nimport {getUid} from '../../util.js';\nimport {intersects} from '../../extent.js';\nimport {lineChunk} from '../../geom/flat/linechunk.js';\nimport {matchingChunk} from '../../geom/flat/straightchunk.js';\n/**\n * @const\n * @enum {number}\n */\nexport const TEXT_ALIGN = {\n  'left': 0,\n  'end': 0,\n  'center': 0.5,\n  'right': 1,\n  'start': 1,\n  'top': 0,\n  'middle': 0.5,\n  'hanging': 0.2,\n  'alphabetic': 0.8,\n  'ideographic': 0.8,\n  'bottom': 1,\n};\n\nclass CanvasTextBuilder extends CanvasBuilder {\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\n    super(tolerance, maxExtent, resolution, pixelRatio);\n\n    /**\n     * @private\n     * @type {Array<HTMLCanvasElement>}\n     */\n    this.labels_ = null;\n\n    /**\n     * @private\n     * @type {string|Array<string>}\n     */\n    this.text_ = '';\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textOffsetX_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textOffsetY_ = 0;\n\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    this.textRotateWithView_ = undefined;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textRotation_ = 0;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").FillState}\n     */\n    this.textFillState_ = null;\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").FillState>}\n     */\n    this.fillStates = {};\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").StrokeState}\n     */\n    this.textStrokeState_ = null;\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").StrokeState>}\n     */\n    this.strokeStates = {};\n\n    /**\n     * @private\n     * @type {import(\"../canvas.js\").TextState}\n     */\n    this.textState_ = /** @type {import(\"../canvas.js\").TextState} */ ({});\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").TextState>}\n     */\n    this.textStates = {};\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.textKey_ = '';\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.fillKey_ = '';\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.strokeKey_ = '';\n\n    /**\n     * Data shared with an image builder for combined decluttering.\n     * @private\n     * @type {import(\"../canvas.js\").DeclutterImageWithText}\n     */\n    this.declutterImageWithText_ = undefined;\n  }\n\n  /**\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\n   */\n  finish() {\n    const instructions = super.finish();\n    instructions.textStates = this.textStates;\n    instructions.fillStates = this.fillStates;\n    instructions.strokeStates = this.strokeStates;\n    return instructions;\n  }\n\n  /**\n   * @param {import(\"../../geom/SimpleGeometry.js\").default|import(\"../Feature.js\").default} geometry Geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */\n  drawText(geometry, feature) {\n    const fillState = this.textFillState_;\n    const strokeState = this.textStrokeState_;\n    const textState = this.textState_;\n    if (this.text_ === '' || !textState || (!fillState && !strokeState)) {\n      return;\n    }\n\n    const coordinates = this.coordinates;\n    let begin = coordinates.length;\n\n    const geometryType = geometry.getType();\n    let flatCoordinates = null;\n    let stride = geometry.getStride();\n\n    if (\n      textState.placement === 'line' &&\n      (geometryType == 'LineString' ||\n        geometryType == 'MultiLineString' ||\n        geometryType == 'Polygon' ||\n        geometryType == 'MultiPolygon')\n    ) {\n      if (!intersects(this.getBufferedMaxExtent(), geometry.getExtent())) {\n        return;\n      }\n      let ends;\n      flatCoordinates = geometry.getFlatCoordinates();\n      if (geometryType == 'LineString') {\n        ends = [flatCoordinates.length];\n      } else if (geometryType == 'MultiLineString') {\n        ends = /** @type {import(\"../../geom/MultiLineString.js\").default} */ (\n          geometry\n        ).getEnds();\n      } else if (geometryType == 'Polygon') {\n        ends = /** @type {import(\"../../geom/Polygon.js\").default} */ (geometry)\n          .getEnds()\n          .slice(0, 1);\n      } else if (geometryType == 'MultiPolygon') {\n        const endss =\n          /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\n            geometry\n          ).getEndss();\n        ends = [];\n        for (let i = 0, ii = endss.length; i < ii; ++i) {\n          ends.push(endss[i][0]);\n        }\n      }\n      this.beginGeometry(geometry, feature);\n      const repeat = textState.repeat;\n      const textAlign = repeat ? undefined : textState.textAlign;\n      // No `justify` support for line placement.\n      let flatOffset = 0;\n      for (let o = 0, oo = ends.length; o < oo; ++o) {\n        let chunks;\n        if (repeat) {\n          chunks = lineChunk(\n            repeat * this.resolution,\n            flatCoordinates,\n            flatOffset,\n            ends[o],\n            stride\n          );\n        } else {\n          chunks = [flatCoordinates.slice(flatOffset, ends[o])];\n        }\n        for (let c = 0, cc = chunks.length; c < cc; ++c) {\n          const chunk = chunks[c];\n          let chunkBegin = 0;\n          let chunkEnd = chunk.length;\n          if (textAlign == undefined) {\n            const range = matchingChunk(\n              textState.maxAngle,\n              chunk,\n              0,\n              chunk.length,\n              2\n            );\n            chunkBegin = range[0];\n            chunkEnd = range[1];\n          }\n          for (let i = chunkBegin; i < chunkEnd; i += stride) {\n            coordinates.push(chunk[i], chunk[i + 1]);\n          }\n          const end = coordinates.length;\n          flatOffset = ends[o];\n          this.drawChars_(begin, end);\n          begin = end;\n        }\n      }\n      this.endGeometry(feature);\n    } else {\n      let geometryWidths = textState.overflow ? null : [];\n      switch (geometryType) {\n        case 'Point':\n        case 'MultiPoint':\n          flatCoordinates =\n            /** @type {import(\"../../geom/MultiPoint.js\").default} */ (\n              geometry\n            ).getFlatCoordinates();\n          break;\n        case 'LineString':\n          flatCoordinates =\n            /** @type {import(\"../../geom/LineString.js\").default} */ (\n              geometry\n            ).getFlatMidpoint();\n          break;\n        case 'Circle':\n          flatCoordinates =\n            /** @type {import(\"../../geom/Circle.js\").default} */ (\n              geometry\n            ).getCenter();\n          break;\n        case 'MultiLineString':\n          flatCoordinates =\n            /** @type {import(\"../../geom/MultiLineString.js\").default} */ (\n              geometry\n            ).getFlatMidpoints();\n          stride = 2;\n          break;\n        case 'Polygon':\n          flatCoordinates =\n            /** @type {import(\"../../geom/Polygon.js\").default} */ (\n              geometry\n            ).getFlatInteriorPoint();\n          if (!textState.overflow) {\n            geometryWidths.push(flatCoordinates[2] / this.resolution);\n          }\n          stride = 3;\n          break;\n        case 'MultiPolygon':\n          const interiorPoints =\n            /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\n              geometry\n            ).getFlatInteriorPoints();\n          flatCoordinates = [];\n          for (let i = 0, ii = interiorPoints.length; i < ii; i += 3) {\n            if (!textState.overflow) {\n              geometryWidths.push(interiorPoints[i + 2] / this.resolution);\n            }\n            flatCoordinates.push(interiorPoints[i], interiorPoints[i + 1]);\n          }\n          if (flatCoordinates.length === 0) {\n            return;\n          }\n          stride = 2;\n          break;\n        default:\n      }\n      const end = this.appendFlatPointCoordinates(flatCoordinates, stride);\n      if (end === begin) {\n        return;\n      }\n      if (\n        geometryWidths &&\n        (end - begin) / 2 !== flatCoordinates.length / stride\n      ) {\n        let beg = begin / 2;\n        geometryWidths = geometryWidths.filter((w, i) => {\n          const keep =\n            coordinates[(beg + i) * 2] === flatCoordinates[i * stride] &&\n            coordinates[(beg + i) * 2 + 1] === flatCoordinates[i * stride + 1];\n          if (!keep) {\n            --beg;\n          }\n          return keep;\n        });\n      }\n\n      this.saveTextStates_();\n\n      if (textState.backgroundFill || textState.backgroundStroke) {\n        this.setFillStrokeStyle(\n          textState.backgroundFill,\n          textState.backgroundStroke\n        );\n        if (textState.backgroundFill) {\n          this.updateFillStyle(this.state, this.createFill);\n          this.hitDetectionInstructions.push(this.createFill(this.state));\n        }\n        if (textState.backgroundStroke) {\n          this.updateStrokeStyle(this.state, this.applyStroke);\n          this.hitDetectionInstructions.push(this.createStroke(this.state));\n        }\n      }\n\n      this.beginGeometry(geometry, feature);\n\n      // adjust padding for negative scale\n      let padding = textState.padding;\n      if (\n        padding != defaultPadding &&\n        (textState.scale[0] < 0 || textState.scale[1] < 0)\n      ) {\n        let p0 = textState.padding[0];\n        let p1 = textState.padding[1];\n        let p2 = textState.padding[2];\n        let p3 = textState.padding[3];\n        if (textState.scale[0] < 0) {\n          p1 = -p1;\n          p3 = -p3;\n        }\n        if (textState.scale[1] < 0) {\n          p0 = -p0;\n          p2 = -p2;\n        }\n        padding = [p0, p1, p2, p3];\n      }\n\n      // The image is unknown at this stage so we pass null; it will be computed at render time.\n      // For clarity, we pass NaN for offsetX, offsetY, width and height, which will be computed at\n      // render time.\n      const pixelRatio = this.pixelRatio;\n      this.instructions.push([\n        CanvasInstruction.DRAW_IMAGE,\n        begin,\n        end,\n        null,\n        NaN,\n        NaN,\n        NaN,\n        1,\n        0,\n        0,\n        this.textRotateWithView_,\n        this.textRotation_,\n        [1, 1],\n        NaN,\n        undefined,\n        this.declutterImageWithText_,\n        padding == defaultPadding\n          ? defaultPadding\n          : padding.map(function (p) {\n              return p * pixelRatio;\n            }),\n        !!textState.backgroundFill,\n        !!textState.backgroundStroke,\n        this.text_,\n        this.textKey_,\n        this.strokeKey_,\n        this.fillKey_,\n        this.textOffsetX_,\n        this.textOffsetY_,\n        geometryWidths,\n      ]);\n      const scale = 1 / pixelRatio;\n      this.hitDetectionInstructions.push([\n        CanvasInstruction.DRAW_IMAGE,\n        begin,\n        end,\n        null,\n        NaN,\n        NaN,\n        NaN,\n        1,\n        0,\n        0,\n        this.textRotateWithView_,\n        this.textRotation_,\n        [scale, scale],\n        NaN,\n        undefined,\n        this.declutterImageWithText_,\n        padding,\n        !!textState.backgroundFill,\n        !!textState.backgroundStroke,\n        this.text_,\n        this.textKey_,\n        this.strokeKey_,\n        this.fillKey_,\n        this.textOffsetX_,\n        this.textOffsetY_,\n        geometryWidths,\n      ]);\n\n      this.endGeometry(feature);\n    }\n  }\n\n  /**\n   * @private\n   */\n  saveTextStates_() {\n    const strokeState = this.textStrokeState_;\n    const textState = this.textState_;\n    const fillState = this.textFillState_;\n\n    const strokeKey = this.strokeKey_;\n    if (strokeState) {\n      if (!(strokeKey in this.strokeStates)) {\n        this.strokeStates[strokeKey] = {\n          strokeStyle: strokeState.strokeStyle,\n          lineCap: strokeState.lineCap,\n          lineDashOffset: strokeState.lineDashOffset,\n          lineWidth: strokeState.lineWidth,\n          lineJoin: strokeState.lineJoin,\n          miterLimit: strokeState.miterLimit,\n          lineDash: strokeState.lineDash,\n        };\n      }\n    }\n    const textKey = this.textKey_;\n    if (!(textKey in this.textStates)) {\n      this.textStates[textKey] = {\n        font: textState.font,\n        textAlign: textState.textAlign || defaultTextAlign,\n        justify: textState.justify,\n        textBaseline: textState.textBaseline || defaultTextBaseline,\n        scale: textState.scale,\n      };\n    }\n    const fillKey = this.fillKey_;\n    if (fillState) {\n      if (!(fillKey in this.fillStates)) {\n        this.fillStates[fillKey] = {\n          fillStyle: fillState.fillStyle,\n        };\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {number} begin Begin.\n   * @param {number} end End.\n   */\n  drawChars_(begin, end) {\n    const strokeState = this.textStrokeState_;\n    const textState = this.textState_;\n\n    const strokeKey = this.strokeKey_;\n    const textKey = this.textKey_;\n    const fillKey = this.fillKey_;\n    this.saveTextStates_();\n\n    const pixelRatio = this.pixelRatio;\n    const baseline = TEXT_ALIGN[textState.textBaseline];\n\n    const offsetY = this.textOffsetY_ * pixelRatio;\n    const text = this.text_;\n    const strokeWidth = strokeState\n      ? (strokeState.lineWidth * Math.abs(textState.scale[0])) / 2\n      : 0;\n\n    this.instructions.push([\n      CanvasInstruction.DRAW_CHARS,\n      begin,\n      end,\n      baseline,\n      textState.overflow,\n      fillKey,\n      textState.maxAngle,\n      pixelRatio,\n      offsetY,\n      strokeKey,\n      strokeWidth * pixelRatio,\n      text,\n      textKey,\n      1,\n    ]);\n    this.hitDetectionInstructions.push([\n      CanvasInstruction.DRAW_CHARS,\n      begin,\n      end,\n      baseline,\n      textState.overflow,\n      fillKey,\n      textState.maxAngle,\n      1,\n      offsetY,\n      strokeKey,\n      strokeWidth,\n      text,\n      textKey,\n      1 / pixelRatio,\n    ]);\n  }\n\n  /**\n   * @param {import(\"../../style/Text.js\").default} textStyle Text style.\n   * @param {Object} [sharedData] Shared data.\n   */\n  setTextStyle(textStyle, sharedData) {\n    let textState, fillState, strokeState;\n    if (!textStyle) {\n      this.text_ = '';\n    } else {\n      const textFillStyle = textStyle.getFill();\n      if (!textFillStyle) {\n        fillState = null;\n        this.textFillState_ = fillState;\n      } else {\n        fillState = this.textFillState_;\n        if (!fillState) {\n          fillState = /** @type {import(\"../canvas.js\").FillState} */ ({});\n          this.textFillState_ = fillState;\n        }\n        fillState.fillStyle = asColorLike(\n          textFillStyle.getColor() || defaultFillStyle\n        );\n      }\n\n      const textStrokeStyle = textStyle.getStroke();\n      if (!textStrokeStyle) {\n        strokeState = null;\n        this.textStrokeState_ = strokeState;\n      } else {\n        strokeState = this.textStrokeState_;\n        if (!strokeState) {\n          strokeState = /** @type {import(\"../canvas.js\").StrokeState} */ ({});\n          this.textStrokeState_ = strokeState;\n        }\n        const lineDash = textStrokeStyle.getLineDash();\n        const lineDashOffset = textStrokeStyle.getLineDashOffset();\n        const lineWidth = textStrokeStyle.getWidth();\n        const miterLimit = textStrokeStyle.getMiterLimit();\n        strokeState.lineCap = textStrokeStyle.getLineCap() || defaultLineCap;\n        strokeState.lineDash = lineDash ? lineDash.slice() : defaultLineDash;\n        strokeState.lineDashOffset =\n          lineDashOffset === undefined ? defaultLineDashOffset : lineDashOffset;\n        strokeState.lineJoin = textStrokeStyle.getLineJoin() || defaultLineJoin;\n        strokeState.lineWidth =\n          lineWidth === undefined ? defaultLineWidth : lineWidth;\n        strokeState.miterLimit =\n          miterLimit === undefined ? defaultMiterLimit : miterLimit;\n        strokeState.strokeStyle = asColorLike(\n          textStrokeStyle.getColor() || defaultStrokeStyle\n        );\n      }\n\n      textState = this.textState_;\n      const font = textStyle.getFont() || defaultFont;\n      registerFont(font);\n      const textScale = textStyle.getScaleArray();\n      textState.overflow = textStyle.getOverflow();\n      textState.font = font;\n      textState.maxAngle = textStyle.getMaxAngle();\n      textState.placement = textStyle.getPlacement();\n      textState.textAlign = textStyle.getTextAlign();\n      textState.repeat = textStyle.getRepeat();\n      textState.justify = textStyle.getJustify();\n      textState.textBaseline =\n        textStyle.getTextBaseline() || defaultTextBaseline;\n      textState.backgroundFill = textStyle.getBackgroundFill();\n      textState.backgroundStroke = textStyle.getBackgroundStroke();\n      textState.padding = textStyle.getPadding() || defaultPadding;\n      textState.scale = textScale === undefined ? [1, 1] : textScale;\n\n      const textOffsetX = textStyle.getOffsetX();\n      const textOffsetY = textStyle.getOffsetY();\n      const textRotateWithView = textStyle.getRotateWithView();\n      const textRotation = textStyle.getRotation();\n      this.text_ = textStyle.getText() || '';\n      this.textOffsetX_ = textOffsetX === undefined ? 0 : textOffsetX;\n      this.textOffsetY_ = textOffsetY === undefined ? 0 : textOffsetY;\n      this.textRotateWithView_ =\n        textRotateWithView === undefined ? false : textRotateWithView;\n      this.textRotation_ = textRotation === undefined ? 0 : textRotation;\n\n      this.strokeKey_ = strokeState\n        ? (typeof strokeState.strokeStyle == 'string'\n            ? strokeState.strokeStyle\n            : getUid(strokeState.strokeStyle)) +\n          strokeState.lineCap +\n          strokeState.lineDashOffset +\n          '|' +\n          strokeState.lineWidth +\n          strokeState.lineJoin +\n          strokeState.miterLimit +\n          '[' +\n          strokeState.lineDash.join() +\n          ']'\n        : '';\n      this.textKey_ =\n        textState.font +\n        textState.scale +\n        (textState.textAlign || '?') +\n        (textState.repeat || '?') +\n        (textState.justify || '?') +\n        (textState.textBaseline || '?');\n      this.fillKey_ = fillState\n        ? typeof fillState.fillStyle == 'string'\n          ? fillState.fillStyle\n          : '|' + getUid(fillState.fillStyle)\n        : '';\n    }\n    this.declutterImageWithText_ = sharedData;\n  }\n}\n\nexport default CanvasTextBuilder;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}