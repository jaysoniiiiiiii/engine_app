{"ast":null,"code":"/**\n * @module ol/renderer/canvas/VectorLayer\n */\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\nimport CanvasLayerRenderer, { canvasPool } from './Layer.js';\nimport ExecutorGroup from '../../render/canvas/ExecutorGroup.js';\nimport ViewHint from '../../ViewHint.js';\nimport { HIT_DETECT_RESOLUTION, createHitDetectionImageData, hitDetect } from '../../render/canvas/hitdetect.js';\nimport { apply, makeInverse, makeScale, toString as transformToString } from '../../transform.js';\nimport { buffer, containsExtent, createEmpty, getWidth, intersects as intersectsExtent, wrapX as wrapExtentX } from '../../extent.js';\nimport { createCanvasContext2D, releaseCanvas } from '../../dom.js';\nimport { defaultOrder as defaultRenderOrder, getTolerance as getRenderTolerance, getSquaredTolerance as getSquaredRenderTolerance, renderFeature } from '../vector.js';\nimport { equals } from '../../array.js';\nimport { fromUserExtent, getTransformFromProjections, getUserProjection, toUserExtent, toUserResolution } from '../../proj.js';\nimport { getUid } from '../../util.js';\nimport { wrapX as wrapCoordinateX } from '../../coordinate.js';\n\n/**\n * @classdesc\n * Canvas renderer for vector layers.\n * @api\n */\nclass CanvasVectorLayerRenderer extends CanvasLayerRenderer {\n  /**\n   * @param {import(\"../../layer/BaseVector.js\").default} vectorLayer Vector layer.\n   */\n  constructor(vectorLayer) {\n    super(vectorLayer);\n\n    /** @private */\n    this.boundHandleStyleImageChange_ = this.handleStyleImageChange_.bind(this);\n\n    /**\n     * @type {boolean}\n     */\n    this.animatingOrInteracting_;\n\n    /**\n     * @type {ImageData|null}\n     */\n    this.hitDetectionImageData_ = null;\n\n    /**\n     * @type {Array<import(\"../../Feature.js\").default>}\n     */\n    this.renderedFeatures_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedResolution_ = NaN;\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.renderedExtent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.wrappedRenderedExtent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRotation_;\n\n    /**\n     * @private\n     * @type {import(\"../../coordinate\").Coordinate}\n     */\n    this.renderedCenter_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../proj/Projection\").default}\n     */\n    this.renderedProjection_ = null;\n\n    /**\n     * @private\n     * @type {function(import(\"../../Feature.js\").default, import(\"../../Feature.js\").default): number|null}\n     */\n    this.renderedRenderOrder_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n     */\n    this.replayGroup_ = null;\n\n    /**\n     * A new replay group had to be created by `prepareFrame()`\n     * @type {boolean}\n     */\n    this.replayGroupChanged = true;\n\n    /**\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n     */\n    this.declutterExecutorGroup = null;\n\n    /**\n     * Clipping to be performed by `renderFrame()`\n     * @type {boolean}\n     */\n    this.clipping = true;\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.compositionContext_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.opacity_ = 1;\n  }\n\n  /**\n   * @param {ExecutorGroup} executorGroup Executor group.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"rbush\").default} [declutterTree] Declutter tree.\n   */\n  renderWorlds(executorGroup, frameState, declutterTree) {\n    const extent = frameState.extent;\n    const viewState = frameState.viewState;\n    const center = viewState.center;\n    const resolution = viewState.resolution;\n    const projection = viewState.projection;\n    const rotation = viewState.rotation;\n    const projectionExtent = projection.getExtent();\n    const vectorSource = this.getLayer().getSource();\n    const pixelRatio = frameState.pixelRatio;\n    const viewHints = frameState.viewHints;\n    const snapToPixel = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);\n    const context = this.compositionContext_;\n    const width = Math.round(frameState.size[0] * pixelRatio);\n    const height = Math.round(frameState.size[1] * pixelRatio);\n    const multiWorld = vectorSource.getWrapX() && projection.canWrapX();\n    const worldWidth = multiWorld ? getWidth(projectionExtent) : null;\n    const endWorld = multiWorld ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1 : 1;\n    let world = multiWorld ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth) : 0;\n    do {\n      const transform = this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, world * worldWidth);\n      executorGroup.execute(context, 1, transform, rotation, snapToPixel, undefined, declutterTree);\n    } while (++world < endWorld);\n  }\n  setupCompositionContext_() {\n    if (this.opacity_ !== 1) {\n      const compositionContext = createCanvasContext2D(this.context.canvas.width, this.context.canvas.height, canvasPool);\n      this.compositionContext_ = compositionContext;\n    } else {\n      this.compositionContext_ = this.context;\n    }\n  }\n  releaseCompositionContext_() {\n    if (this.opacity_ !== 1) {\n      const alpha = this.context.globalAlpha;\n      this.context.globalAlpha = this.opacity_;\n      this.context.drawImage(this.compositionContext_.canvas, 0, 0);\n      this.context.globalAlpha = alpha;\n      releaseCanvas(this.compositionContext_);\n      canvasPool.push(this.compositionContext_.canvas);\n      this.compositionContext_ = null;\n    }\n  }\n\n  /**\n   * Render declutter items for this layer\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n  renderDeclutter(frameState) {\n    if (this.declutterExecutorGroup) {\n      this.setupCompositionContext_();\n      this.renderWorlds(this.declutterExecutorGroup, frameState, frameState.declutterTree);\n      this.releaseCompositionContext_();\n    }\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   */\n  renderFrame(frameState, target) {\n    const pixelRatio = frameState.pixelRatio;\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n\n    // set forward and inverse pixel transforms\n    makeScale(this.pixelTransform, 1 / pixelRatio, 1 / pixelRatio);\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\n    const canvasTransform = transformToString(this.pixelTransform);\n    this.useContainer(target, canvasTransform, this.getBackground(frameState));\n    const context = this.context;\n    const canvas = context.canvas;\n    const replayGroup = this.replayGroup_;\n    const declutterExecutorGroup = this.declutterExecutorGroup;\n    if ((!replayGroup || replayGroup.isEmpty()) && (!declutterExecutorGroup || declutterExecutorGroup.isEmpty())) {\n      return null;\n    }\n\n    // resize and clear\n    const width = Math.round(frameState.size[0] * pixelRatio);\n    const height = Math.round(frameState.size[1] * pixelRatio);\n    if (canvas.width != width || canvas.height != height) {\n      canvas.width = width;\n      canvas.height = height;\n      if (canvas.style.transform !== canvasTransform) {\n        canvas.style.transform = canvasTransform;\n      }\n    } else if (!this.containerReused) {\n      context.clearRect(0, 0, width, height);\n    }\n    this.preRender(context, frameState);\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n    this.opacity_ = layerState.opacity;\n    this.setupCompositionContext_();\n\n    // clipped rendering if layer extent is set\n    let clipped = false;\n    let render = true;\n    if (layerState.extent && this.clipping) {\n      const layerExtent = fromUserExtent(layerState.extent, projection);\n      render = intersectsExtent(layerExtent, frameState.extent);\n      clipped = render && !containsExtent(layerExtent, frameState.extent);\n      if (clipped) {\n        this.clipUnrotated(this.compositionContext_, frameState, layerExtent);\n      }\n    }\n    if (render) {\n      this.renderWorlds(replayGroup, frameState);\n    }\n    if (clipped) {\n      this.compositionContext_.restore();\n    }\n    this.releaseCompositionContext_();\n    this.postRender(context, frameState);\n    if (this.renderedRotation_ !== viewState.rotation) {\n      this.renderedRotation_ = viewState.rotation;\n      this.hitDetectionImageData_ = null;\n    }\n    return this.container;\n  }\n\n  /**\n   * Asynchronous layer level hit detection.\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../../Feature\").default>>} Promise\n   * that resolves with an array of features.\n   */\n  getFeatures(pixel) {\n    return new Promise(resolve => {\n      if (!this.hitDetectionImageData_ && !this.animatingOrInteracting_) {\n        const size = [this.context.canvas.width, this.context.canvas.height];\n        apply(this.pixelTransform, size);\n        const center = this.renderedCenter_;\n        const resolution = this.renderedResolution_;\n        const rotation = this.renderedRotation_;\n        const projection = this.renderedProjection_;\n        const extent = this.wrappedRenderedExtent_;\n        const layer = this.getLayer();\n        const transforms = [];\n        const width = size[0] * HIT_DETECT_RESOLUTION;\n        const height = size[1] * HIT_DETECT_RESOLUTION;\n        transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, 0).slice());\n        const source = layer.getSource();\n        const projectionExtent = projection.getExtent();\n        if (source.getWrapX() && projection.canWrapX() && !containsExtent(projectionExtent, extent)) {\n          let startX = extent[0];\n          const worldWidth = getWidth(projectionExtent);\n          let world = 0;\n          let offsetX;\n          while (startX < projectionExtent[0]) {\n            --world;\n            offsetX = worldWidth * world;\n            transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, offsetX).slice());\n            startX += worldWidth;\n          }\n          world = 0;\n          startX = extent[2];\n          while (startX > projectionExtent[2]) {\n            ++world;\n            offsetX = worldWidth * world;\n            transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, offsetX).slice());\n            startX -= worldWidth;\n          }\n        }\n        this.hitDetectionImageData_ = createHitDetectionImageData(size, transforms, this.renderedFeatures_, layer.getStyleFunction(), extent, resolution, rotation);\n      }\n      resolve(hitDetect(pixel, this.renderedFeatures_, this.hitDetectionImageData_));\n    });\n  }\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, matches) {\n    if (!this.replayGroup_) {\n      return undefined;\n    }\n    const resolution = frameState.viewState.resolution;\n    const rotation = frameState.viewState.rotation;\n    const layer = this.getLayer();\n\n    /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */\n    const features = {};\n\n    /**\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {number} distanceSq The squared distance to the click position\n     * @return {T|undefined} Callback result.\n     */\n    const featureCallback = function (feature, geometry, distanceSq) {\n      const key = getUid(feature);\n      const match = features[key];\n      if (!match) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          return callback(feature, layer, geometry);\n        }\n        matches.push(features[key] = {\n          feature: feature,\n          layer: layer,\n          geometry: geometry,\n          distanceSq: distanceSq,\n          callback: callback\n        });\n      } else if (match !== true && distanceSq < match.distanceSq) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          matches.splice(matches.lastIndexOf(match), 1);\n          return callback(feature, layer, geometry);\n        }\n        match.geometry = geometry;\n        match.distanceSq = distanceSq;\n      }\n      return undefined;\n    };\n    let result;\n    const executorGroups = [this.replayGroup_];\n    if (this.declutterExecutorGroup) {\n      executorGroups.push(this.declutterExecutorGroup);\n    }\n    executorGroups.some(executorGroup => {\n      return result = executorGroup.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, featureCallback, executorGroup === this.declutterExecutorGroup && frameState.declutterTree ? frameState.declutterTree.all().map(item => item.value) : null);\n    });\n    return result;\n  }\n\n  /**\n   * Perform action necessary to get the layer rendered after new fonts have loaded\n   */\n  handleFontsChanged() {\n    const layer = this.getLayer();\n    if (layer.getVisible() && this.replayGroup_) {\n      layer.changed();\n    }\n  }\n\n  /**\n   * Handle changes in image style state.\n   * @param {import(\"../../events/Event.js\").default} event Image style change event.\n   * @private\n   */\n  handleStyleImageChange_(event) {\n    this.renderIfReadyAndVisible();\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrame(frameState) {\n    const vectorLayer = this.getLayer();\n    const vectorSource = vectorLayer.getSource();\n    if (!vectorSource) {\n      return false;\n    }\n    const animating = frameState.viewHints[ViewHint.ANIMATING];\n    const interacting = frameState.viewHints[ViewHint.INTERACTING];\n    const updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();\n    const updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();\n    if (this.ready && !updateWhileAnimating && animating || !updateWhileInteracting && interacting) {\n      this.animatingOrInteracting_ = true;\n      return true;\n    }\n    this.animatingOrInteracting_ = false;\n    const frameStateExtent = frameState.extent;\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n    const resolution = viewState.resolution;\n    const pixelRatio = frameState.pixelRatio;\n    const vectorLayerRevision = vectorLayer.getRevision();\n    const vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();\n    let vectorLayerRenderOrder = vectorLayer.getRenderOrder();\n    if (vectorLayerRenderOrder === undefined) {\n      vectorLayerRenderOrder = defaultRenderOrder;\n    }\n    const center = viewState.center.slice();\n    const extent = buffer(frameStateExtent, vectorLayerRenderBuffer * resolution);\n    const renderedExtent = extent.slice();\n    const loadExtents = [extent.slice()];\n    const projectionExtent = projection.getExtent();\n    if (vectorSource.getWrapX() && projection.canWrapX() && !containsExtent(projectionExtent, frameState.extent)) {\n      // For the replay group, we need an extent that intersects the real world\n      // (-180° to +180°). To support geometries in a coordinate range from -540°\n      // to +540°, we add at least 1 world width on each side of the projection\n      // extent. If the viewport is wider than the world, we need to add half of\n      // the viewport width to make sure we cover the whole viewport.\n      const worldWidth = getWidth(projectionExtent);\n      const gutter = Math.max(getWidth(extent) / 2, worldWidth);\n      extent[0] = projectionExtent[0] - gutter;\n      extent[2] = projectionExtent[2] + gutter;\n      wrapCoordinateX(center, projection);\n      const loadExtent = wrapExtentX(loadExtents[0], projection);\n      // If the extent crosses the date line, we load data for both edges of the worlds\n      if (loadExtent[0] < projectionExtent[0] && loadExtent[2] < projectionExtent[2]) {\n        loadExtents.push([loadExtent[0] + worldWidth, loadExtent[1], loadExtent[2] + worldWidth, loadExtent[3]]);\n      } else if (loadExtent[0] > projectionExtent[0] && loadExtent[2] > projectionExtent[2]) {\n        loadExtents.push([loadExtent[0] - worldWidth, loadExtent[1], loadExtent[2] - worldWidth, loadExtent[3]]);\n      }\n    }\n    if (this.ready && this.renderedResolution_ == resolution && this.renderedRevision_ == vectorLayerRevision && this.renderedRenderOrder_ == vectorLayerRenderOrder && containsExtent(this.wrappedRenderedExtent_, extent)) {\n      if (!equals(this.renderedExtent_, renderedExtent)) {\n        this.hitDetectionImageData_ = null;\n        this.renderedExtent_ = renderedExtent;\n      }\n      this.renderedCenter_ = center;\n      this.replayGroupChanged = false;\n      return true;\n    }\n    this.replayGroup_ = null;\n    const replayGroup = new CanvasBuilderGroup(getRenderTolerance(resolution, pixelRatio), extent, resolution, pixelRatio);\n    let declutterBuilderGroup;\n    if (this.getLayer().getDeclutter()) {\n      declutterBuilderGroup = new CanvasBuilderGroup(getRenderTolerance(resolution, pixelRatio), extent, resolution, pixelRatio);\n    }\n    const userProjection = getUserProjection();\n    let userTransform;\n    if (userProjection) {\n      for (let i = 0, ii = loadExtents.length; i < ii; ++i) {\n        const extent = loadExtents[i];\n        const userExtent = toUserExtent(extent, projection);\n        vectorSource.loadFeatures(userExtent, toUserResolution(resolution, projection), userProjection);\n      }\n      userTransform = getTransformFromProjections(userProjection, projection);\n    } else {\n      for (let i = 0, ii = loadExtents.length; i < ii; ++i) {\n        vectorSource.loadFeatures(loadExtents[i], resolution, projection);\n      }\n    }\n    const squaredTolerance = getSquaredRenderTolerance(resolution, pixelRatio);\n    let ready = true;\n    const render =\n    /**\n     * @param {import(\"../../Feature.js\").default} feature Feature.\n     */\n    feature => {\n      let styles;\n      const styleFunction = feature.getStyleFunction() || vectorLayer.getStyleFunction();\n      if (styleFunction) {\n        styles = styleFunction(feature, resolution);\n      }\n      if (styles) {\n        const dirty = this.renderFeature(feature, squaredTolerance, styles, replayGroup, userTransform, declutterBuilderGroup);\n        ready = ready && !dirty;\n      }\n    };\n    const userExtent = toUserExtent(extent, projection);\n    /** @type {Array<import(\"../../Feature.js\").default>} */\n    const features = vectorSource.getFeaturesInExtent(userExtent);\n    if (vectorLayerRenderOrder) {\n      features.sort(vectorLayerRenderOrder);\n    }\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      render(features[i]);\n    }\n    this.renderedFeatures_ = features;\n    this.ready = ready;\n    const replayGroupInstructions = replayGroup.finish();\n    const executorGroup = new ExecutorGroup(extent, resolution, pixelRatio, vectorSource.getOverlaps(), replayGroupInstructions, vectorLayer.getRenderBuffer());\n    if (declutterBuilderGroup) {\n      this.declutterExecutorGroup = new ExecutorGroup(extent, resolution, pixelRatio, vectorSource.getOverlaps(), declutterBuilderGroup.finish(), vectorLayer.getRenderBuffer());\n    }\n    this.renderedResolution_ = resolution;\n    this.renderedRevision_ = vectorLayerRevision;\n    this.renderedRenderOrder_ = vectorLayerRenderOrder;\n    this.renderedExtent_ = renderedExtent;\n    this.wrappedRenderedExtent_ = extent;\n    this.renderedCenter_ = center;\n    this.renderedProjection_ = projection;\n    this.replayGroup_ = executorGroup;\n    this.hitDetectionImageData_ = null;\n    this.replayGroupChanged = true;\n    return true;\n  }\n\n  /**\n   * @param {import(\"../../Feature.js\").default} feature Feature.\n   * @param {number} squaredTolerance Squared render tolerance.\n   * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\n   * @param {import(\"../../proj.js\").TransformFunction} [transform] Transform from user to view projection.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\n   * @return {boolean} `true` if an image is loading.\n   */\n  renderFeature(feature, squaredTolerance, styles, builderGroup, transform, declutterBuilderGroup) {\n    if (!styles) {\n      return false;\n    }\n    let loading = false;\n    if (Array.isArray(styles)) {\n      for (let i = 0, ii = styles.length; i < ii; ++i) {\n        loading = renderFeature(builderGroup, feature, styles[i], squaredTolerance, this.boundHandleStyleImageChange_, transform, declutterBuilderGroup) || loading;\n      }\n    } else {\n      loading = renderFeature(builderGroup, feature, styles, squaredTolerance, this.boundHandleStyleImageChange_, transform, declutterBuilderGroup);\n    }\n    return loading;\n  }\n}\nexport default CanvasVectorLayerRenderer;","map":{"version":3,"names":["CanvasBuilderGroup","CanvasLayerRenderer","canvasPool","ExecutorGroup","ViewHint","HIT_DETECT_RESOLUTION","createHitDetectionImageData","hitDetect","apply","makeInverse","makeScale","toString","transformToString","buffer","containsExtent","createEmpty","getWidth","intersects","intersectsExtent","wrapX","wrapExtentX","createCanvasContext2D","releaseCanvas","defaultOrder","defaultRenderOrder","getTolerance","getRenderTolerance","getSquaredTolerance","getSquaredRenderTolerance","renderFeature","equals","fromUserExtent","getTransformFromProjections","getUserProjection","toUserExtent","toUserResolution","getUid","wrapCoordinateX","CanvasVectorLayerRenderer","constructor","vectorLayer","boundHandleStyleImageChange_","handleStyleImageChange_","bind","animatingOrInteracting_","hitDetectionImageData_","renderedFeatures_","renderedRevision_","renderedResolution_","NaN","renderedExtent_","wrappedRenderedExtent_","renderedRotation_","renderedCenter_","renderedProjection_","renderedRenderOrder_","replayGroup_","replayGroupChanged","declutterExecutorGroup","clipping","compositionContext_","opacity_","renderWorlds","executorGroup","frameState","declutterTree","extent","viewState","center","resolution","projection","rotation","projectionExtent","getExtent","vectorSource","getLayer","getSource","pixelRatio","viewHints","snapToPixel","ANIMATING","INTERACTING","context","width","Math","round","size","height","multiWorld","getWrapX","canWrapX","worldWidth","endWorld","ceil","world","floor","transform","getRenderTransform","execute","undefined","setupCompositionContext_","compositionContext","canvas","releaseCompositionContext_","alpha","globalAlpha","drawImage","push","renderDeclutter","renderFrame","target","layerState","layerStatesArray","layerIndex","pixelTransform","inversePixelTransform","canvasTransform","useContainer","getBackground","replayGroup","isEmpty","style","containerReused","clearRect","preRender","opacity","clipped","render","layerExtent","clipUnrotated","restore","postRender","container","getFeatures","pixel","Promise","resolve","layer","transforms","slice","source","startX","offsetX","getStyleFunction","forEachFeatureAtCoordinate","coordinate","hitTolerance","callback","matches","features","featureCallback","feature","geometry","distanceSq","key","match","splice","lastIndexOf","result","executorGroups","some","all","map","item","value","handleFontsChanged","getVisible","changed","event","renderIfReadyAndVisible","prepareFrame","animating","interacting","updateWhileAnimating","getUpdateWhileAnimating","updateWhileInteracting","getUpdateWhileInteracting","ready","frameStateExtent","vectorLayerRevision","getRevision","vectorLayerRenderBuffer","getRenderBuffer","vectorLayerRenderOrder","getRenderOrder","renderedExtent","loadExtents","gutter","max","loadExtent","declutterBuilderGroup","getDeclutter","userProjection","userTransform","i","ii","length","userExtent","loadFeatures","squaredTolerance","styles","styleFunction","dirty","getFeaturesInExtent","sort","replayGroupInstructions","finish","getOverlaps","builderGroup","loading","Array","isArray"],"sources":["/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/ol/renderer/canvas/VectorLayer.js"],"sourcesContent":["/**\n * @module ol/renderer/canvas/VectorLayer\n */\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\nimport CanvasLayerRenderer, {canvasPool} from './Layer.js';\nimport ExecutorGroup from '../../render/canvas/ExecutorGroup.js';\nimport ViewHint from '../../ViewHint.js';\nimport {\n  HIT_DETECT_RESOLUTION,\n  createHitDetectionImageData,\n  hitDetect,\n} from '../../render/canvas/hitdetect.js';\nimport {\n  apply,\n  makeInverse,\n  makeScale,\n  toString as transformToString,\n} from '../../transform.js';\nimport {\n  buffer,\n  containsExtent,\n  createEmpty,\n  getWidth,\n  intersects as intersectsExtent,\n  wrapX as wrapExtentX,\n} from '../../extent.js';\nimport {createCanvasContext2D, releaseCanvas} from '../../dom.js';\nimport {\n  defaultOrder as defaultRenderOrder,\n  getTolerance as getRenderTolerance,\n  getSquaredTolerance as getSquaredRenderTolerance,\n  renderFeature,\n} from '../vector.js';\nimport {equals} from '../../array.js';\nimport {\n  fromUserExtent,\n  getTransformFromProjections,\n  getUserProjection,\n  toUserExtent,\n  toUserResolution,\n} from '../../proj.js';\nimport {getUid} from '../../util.js';\nimport {wrapX as wrapCoordinateX} from '../../coordinate.js';\n\n/**\n * @classdesc\n * Canvas renderer for vector layers.\n * @api\n */\nclass CanvasVectorLayerRenderer extends CanvasLayerRenderer {\n  /**\n   * @param {import(\"../../layer/BaseVector.js\").default} vectorLayer Vector layer.\n   */\n  constructor(vectorLayer) {\n    super(vectorLayer);\n\n    /** @private */\n    this.boundHandleStyleImageChange_ = this.handleStyleImageChange_.bind(this);\n\n    /**\n     * @type {boolean}\n     */\n    this.animatingOrInteracting_;\n\n    /**\n     * @type {ImageData|null}\n     */\n    this.hitDetectionImageData_ = null;\n\n    /**\n     * @type {Array<import(\"../../Feature.js\").default>}\n     */\n    this.renderedFeatures_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedResolution_ = NaN;\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.renderedExtent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.wrappedRenderedExtent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRotation_;\n\n    /**\n     * @private\n     * @type {import(\"../../coordinate\").Coordinate}\n     */\n    this.renderedCenter_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../proj/Projection\").default}\n     */\n    this.renderedProjection_ = null;\n\n    /**\n     * @private\n     * @type {function(import(\"../../Feature.js\").default, import(\"../../Feature.js\").default): number|null}\n     */\n    this.renderedRenderOrder_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n     */\n    this.replayGroup_ = null;\n\n    /**\n     * A new replay group had to be created by `prepareFrame()`\n     * @type {boolean}\n     */\n    this.replayGroupChanged = true;\n\n    /**\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n     */\n    this.declutterExecutorGroup = null;\n\n    /**\n     * Clipping to be performed by `renderFrame()`\n     * @type {boolean}\n     */\n    this.clipping = true;\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.compositionContext_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.opacity_ = 1;\n  }\n\n  /**\n   * @param {ExecutorGroup} executorGroup Executor group.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"rbush\").default} [declutterTree] Declutter tree.\n   */\n  renderWorlds(executorGroup, frameState, declutterTree) {\n    const extent = frameState.extent;\n    const viewState = frameState.viewState;\n    const center = viewState.center;\n    const resolution = viewState.resolution;\n    const projection = viewState.projection;\n    const rotation = viewState.rotation;\n    const projectionExtent = projection.getExtent();\n    const vectorSource = this.getLayer().getSource();\n    const pixelRatio = frameState.pixelRatio;\n    const viewHints = frameState.viewHints;\n    const snapToPixel = !(\n      viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]\n    );\n    const context = this.compositionContext_;\n    const width = Math.round(frameState.size[0] * pixelRatio);\n    const height = Math.round(frameState.size[1] * pixelRatio);\n\n    const multiWorld = vectorSource.getWrapX() && projection.canWrapX();\n    const worldWidth = multiWorld ? getWidth(projectionExtent) : null;\n    const endWorld = multiWorld\n      ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1\n      : 1;\n    let world = multiWorld\n      ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth)\n      : 0;\n    do {\n      const transform = this.getRenderTransform(\n        center,\n        resolution,\n        rotation,\n        pixelRatio,\n        width,\n        height,\n        world * worldWidth\n      );\n      executorGroup.execute(\n        context,\n        1,\n        transform,\n        rotation,\n        snapToPixel,\n        undefined,\n        declutterTree\n      );\n    } while (++world < endWorld);\n  }\n\n  setupCompositionContext_() {\n    if (this.opacity_ !== 1) {\n      const compositionContext = createCanvasContext2D(\n        this.context.canvas.width,\n        this.context.canvas.height,\n        canvasPool\n      );\n      this.compositionContext_ = compositionContext;\n    } else {\n      this.compositionContext_ = this.context;\n    }\n  }\n\n  releaseCompositionContext_() {\n    if (this.opacity_ !== 1) {\n      const alpha = this.context.globalAlpha;\n      this.context.globalAlpha = this.opacity_;\n      this.context.drawImage(this.compositionContext_.canvas, 0, 0);\n      this.context.globalAlpha = alpha;\n      releaseCanvas(this.compositionContext_);\n      canvasPool.push(this.compositionContext_.canvas);\n      this.compositionContext_ = null;\n    }\n  }\n\n  /**\n   * Render declutter items for this layer\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n  renderDeclutter(frameState) {\n    if (this.declutterExecutorGroup) {\n      this.setupCompositionContext_();\n      this.renderWorlds(\n        this.declutterExecutorGroup,\n        frameState,\n        frameState.declutterTree\n      );\n      this.releaseCompositionContext_();\n    }\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   */\n  renderFrame(frameState, target) {\n    const pixelRatio = frameState.pixelRatio;\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n\n    // set forward and inverse pixel transforms\n    makeScale(this.pixelTransform, 1 / pixelRatio, 1 / pixelRatio);\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\n\n    const canvasTransform = transformToString(this.pixelTransform);\n\n    this.useContainer(target, canvasTransform, this.getBackground(frameState));\n    const context = this.context;\n    const canvas = context.canvas;\n\n    const replayGroup = this.replayGroup_;\n    const declutterExecutorGroup = this.declutterExecutorGroup;\n    if (\n      (!replayGroup || replayGroup.isEmpty()) &&\n      (!declutterExecutorGroup || declutterExecutorGroup.isEmpty())\n    ) {\n      return null;\n    }\n\n    // resize and clear\n    const width = Math.round(frameState.size[0] * pixelRatio);\n    const height = Math.round(frameState.size[1] * pixelRatio);\n    if (canvas.width != width || canvas.height != height) {\n      canvas.width = width;\n      canvas.height = height;\n      if (canvas.style.transform !== canvasTransform) {\n        canvas.style.transform = canvasTransform;\n      }\n    } else if (!this.containerReused) {\n      context.clearRect(0, 0, width, height);\n    }\n\n    this.preRender(context, frameState);\n\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n\n    this.opacity_ = layerState.opacity;\n    this.setupCompositionContext_();\n\n    // clipped rendering if layer extent is set\n    let clipped = false;\n    let render = true;\n    if (layerState.extent && this.clipping) {\n      const layerExtent = fromUserExtent(layerState.extent, projection);\n      render = intersectsExtent(layerExtent, frameState.extent);\n      clipped = render && !containsExtent(layerExtent, frameState.extent);\n      if (clipped) {\n        this.clipUnrotated(this.compositionContext_, frameState, layerExtent);\n      }\n    }\n\n    if (render) {\n      this.renderWorlds(replayGroup, frameState);\n    }\n\n    if (clipped) {\n      this.compositionContext_.restore();\n    }\n\n    this.releaseCompositionContext_();\n\n    this.postRender(context, frameState);\n\n    if (this.renderedRotation_ !== viewState.rotation) {\n      this.renderedRotation_ = viewState.rotation;\n      this.hitDetectionImageData_ = null;\n    }\n    return this.container;\n  }\n\n  /**\n   * Asynchronous layer level hit detection.\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../../Feature\").default>>} Promise\n   * that resolves with an array of features.\n   */\n  getFeatures(pixel) {\n    return new Promise((resolve) => {\n      if (!this.hitDetectionImageData_ && !this.animatingOrInteracting_) {\n        const size = [this.context.canvas.width, this.context.canvas.height];\n        apply(this.pixelTransform, size);\n        const center = this.renderedCenter_;\n        const resolution = this.renderedResolution_;\n        const rotation = this.renderedRotation_;\n        const projection = this.renderedProjection_;\n        const extent = this.wrappedRenderedExtent_;\n        const layer = this.getLayer();\n        const transforms = [];\n        const width = size[0] * HIT_DETECT_RESOLUTION;\n        const height = size[1] * HIT_DETECT_RESOLUTION;\n        transforms.push(\n          this.getRenderTransform(\n            center,\n            resolution,\n            rotation,\n            HIT_DETECT_RESOLUTION,\n            width,\n            height,\n            0\n          ).slice()\n        );\n        const source = layer.getSource();\n        const projectionExtent = projection.getExtent();\n        if (\n          source.getWrapX() &&\n          projection.canWrapX() &&\n          !containsExtent(projectionExtent, extent)\n        ) {\n          let startX = extent[0];\n          const worldWidth = getWidth(projectionExtent);\n          let world = 0;\n          let offsetX;\n          while (startX < projectionExtent[0]) {\n            --world;\n            offsetX = worldWidth * world;\n            transforms.push(\n              this.getRenderTransform(\n                center,\n                resolution,\n                rotation,\n                HIT_DETECT_RESOLUTION,\n                width,\n                height,\n                offsetX\n              ).slice()\n            );\n            startX += worldWidth;\n          }\n          world = 0;\n          startX = extent[2];\n          while (startX > projectionExtent[2]) {\n            ++world;\n            offsetX = worldWidth * world;\n            transforms.push(\n              this.getRenderTransform(\n                center,\n                resolution,\n                rotation,\n                HIT_DETECT_RESOLUTION,\n                width,\n                height,\n                offsetX\n              ).slice()\n            );\n            startX -= worldWidth;\n          }\n        }\n\n        this.hitDetectionImageData_ = createHitDetectionImageData(\n          size,\n          transforms,\n          this.renderedFeatures_,\n          layer.getStyleFunction(),\n          extent,\n          resolution,\n          rotation\n        );\n      }\n      resolve(\n        hitDetect(pixel, this.renderedFeatures_, this.hitDetectionImageData_)\n      );\n    });\n  }\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  forEachFeatureAtCoordinate(\n    coordinate,\n    frameState,\n    hitTolerance,\n    callback,\n    matches\n  ) {\n    if (!this.replayGroup_) {\n      return undefined;\n    }\n    const resolution = frameState.viewState.resolution;\n    const rotation = frameState.viewState.rotation;\n    const layer = this.getLayer();\n\n    /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */\n    const features = {};\n\n    /**\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {number} distanceSq The squared distance to the click position\n     * @return {T|undefined} Callback result.\n     */\n    const featureCallback = function (feature, geometry, distanceSq) {\n      const key = getUid(feature);\n      const match = features[key];\n      if (!match) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          return callback(feature, layer, geometry);\n        }\n        matches.push(\n          (features[key] = {\n            feature: feature,\n            layer: layer,\n            geometry: geometry,\n            distanceSq: distanceSq,\n            callback: callback,\n          })\n        );\n      } else if (match !== true && distanceSq < match.distanceSq) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          matches.splice(matches.lastIndexOf(match), 1);\n          return callback(feature, layer, geometry);\n        }\n        match.geometry = geometry;\n        match.distanceSq = distanceSq;\n      }\n      return undefined;\n    };\n\n    let result;\n    const executorGroups = [this.replayGroup_];\n    if (this.declutterExecutorGroup) {\n      executorGroups.push(this.declutterExecutorGroup);\n    }\n    executorGroups.some((executorGroup) => {\n      return (result = executorGroup.forEachFeatureAtCoordinate(\n        coordinate,\n        resolution,\n        rotation,\n        hitTolerance,\n        featureCallback,\n        executorGroup === this.declutterExecutorGroup &&\n          frameState.declutterTree\n          ? frameState.declutterTree.all().map((item) => item.value)\n          : null\n      ));\n    });\n\n    return result;\n  }\n\n  /**\n   * Perform action necessary to get the layer rendered after new fonts have loaded\n   */\n  handleFontsChanged() {\n    const layer = this.getLayer();\n    if (layer.getVisible() && this.replayGroup_) {\n      layer.changed();\n    }\n  }\n\n  /**\n   * Handle changes in image style state.\n   * @param {import(\"../../events/Event.js\").default} event Image style change event.\n   * @private\n   */\n  handleStyleImageChange_(event) {\n    this.renderIfReadyAndVisible();\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrame(frameState) {\n    const vectorLayer = this.getLayer();\n    const vectorSource = vectorLayer.getSource();\n    if (!vectorSource) {\n      return false;\n    }\n\n    const animating = frameState.viewHints[ViewHint.ANIMATING];\n    const interacting = frameState.viewHints[ViewHint.INTERACTING];\n    const updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();\n    const updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();\n\n    if (\n      (this.ready && !updateWhileAnimating && animating) ||\n      (!updateWhileInteracting && interacting)\n    ) {\n      this.animatingOrInteracting_ = true;\n      return true;\n    }\n    this.animatingOrInteracting_ = false;\n\n    const frameStateExtent = frameState.extent;\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n    const resolution = viewState.resolution;\n    const pixelRatio = frameState.pixelRatio;\n    const vectorLayerRevision = vectorLayer.getRevision();\n    const vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();\n    let vectorLayerRenderOrder = vectorLayer.getRenderOrder();\n\n    if (vectorLayerRenderOrder === undefined) {\n      vectorLayerRenderOrder = defaultRenderOrder;\n    }\n\n    const center = viewState.center.slice();\n    const extent = buffer(\n      frameStateExtent,\n      vectorLayerRenderBuffer * resolution\n    );\n    const renderedExtent = extent.slice();\n    const loadExtents = [extent.slice()];\n    const projectionExtent = projection.getExtent();\n\n    if (\n      vectorSource.getWrapX() &&\n      projection.canWrapX() &&\n      !containsExtent(projectionExtent, frameState.extent)\n    ) {\n      // For the replay group, we need an extent that intersects the real world\n      // (-180° to +180°). To support geometries in a coordinate range from -540°\n      // to +540°, we add at least 1 world width on each side of the projection\n      // extent. If the viewport is wider than the world, we need to add half of\n      // the viewport width to make sure we cover the whole viewport.\n      const worldWidth = getWidth(projectionExtent);\n      const gutter = Math.max(getWidth(extent) / 2, worldWidth);\n      extent[0] = projectionExtent[0] - gutter;\n      extent[2] = projectionExtent[2] + gutter;\n      wrapCoordinateX(center, projection);\n      const loadExtent = wrapExtentX(loadExtents[0], projection);\n      // If the extent crosses the date line, we load data for both edges of the worlds\n      if (\n        loadExtent[0] < projectionExtent[0] &&\n        loadExtent[2] < projectionExtent[2]\n      ) {\n        loadExtents.push([\n          loadExtent[0] + worldWidth,\n          loadExtent[1],\n          loadExtent[2] + worldWidth,\n          loadExtent[3],\n        ]);\n      } else if (\n        loadExtent[0] > projectionExtent[0] &&\n        loadExtent[2] > projectionExtent[2]\n      ) {\n        loadExtents.push([\n          loadExtent[0] - worldWidth,\n          loadExtent[1],\n          loadExtent[2] - worldWidth,\n          loadExtent[3],\n        ]);\n      }\n    }\n\n    if (\n      this.ready &&\n      this.renderedResolution_ == resolution &&\n      this.renderedRevision_ == vectorLayerRevision &&\n      this.renderedRenderOrder_ == vectorLayerRenderOrder &&\n      containsExtent(this.wrappedRenderedExtent_, extent)\n    ) {\n      if (!equals(this.renderedExtent_, renderedExtent)) {\n        this.hitDetectionImageData_ = null;\n        this.renderedExtent_ = renderedExtent;\n      }\n      this.renderedCenter_ = center;\n      this.replayGroupChanged = false;\n      return true;\n    }\n\n    this.replayGroup_ = null;\n\n    const replayGroup = new CanvasBuilderGroup(\n      getRenderTolerance(resolution, pixelRatio),\n      extent,\n      resolution,\n      pixelRatio\n    );\n\n    let declutterBuilderGroup;\n    if (this.getLayer().getDeclutter()) {\n      declutterBuilderGroup = new CanvasBuilderGroup(\n        getRenderTolerance(resolution, pixelRatio),\n        extent,\n        resolution,\n        pixelRatio\n      );\n    }\n\n    const userProjection = getUserProjection();\n    let userTransform;\n    if (userProjection) {\n      for (let i = 0, ii = loadExtents.length; i < ii; ++i) {\n        const extent = loadExtents[i];\n        const userExtent = toUserExtent(extent, projection);\n        vectorSource.loadFeatures(\n          userExtent,\n          toUserResolution(resolution, projection),\n          userProjection\n        );\n      }\n      userTransform = getTransformFromProjections(userProjection, projection);\n    } else {\n      for (let i = 0, ii = loadExtents.length; i < ii; ++i) {\n        vectorSource.loadFeatures(loadExtents[i], resolution, projection);\n      }\n    }\n\n    const squaredTolerance = getSquaredRenderTolerance(resolution, pixelRatio);\n    let ready = true;\n    const render =\n      /**\n       * @param {import(\"../../Feature.js\").default} feature Feature.\n       */\n      (feature) => {\n        let styles;\n        const styleFunction =\n          feature.getStyleFunction() || vectorLayer.getStyleFunction();\n        if (styleFunction) {\n          styles = styleFunction(feature, resolution);\n        }\n        if (styles) {\n          const dirty = this.renderFeature(\n            feature,\n            squaredTolerance,\n            styles,\n            replayGroup,\n            userTransform,\n            declutterBuilderGroup\n          );\n          ready = ready && !dirty;\n        }\n      };\n\n    const userExtent = toUserExtent(extent, projection);\n    /** @type {Array<import(\"../../Feature.js\").default>} */\n    const features = vectorSource.getFeaturesInExtent(userExtent);\n    if (vectorLayerRenderOrder) {\n      features.sort(vectorLayerRenderOrder);\n    }\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      render(features[i]);\n    }\n    this.renderedFeatures_ = features;\n    this.ready = ready;\n\n    const replayGroupInstructions = replayGroup.finish();\n    const executorGroup = new ExecutorGroup(\n      extent,\n      resolution,\n      pixelRatio,\n      vectorSource.getOverlaps(),\n      replayGroupInstructions,\n      vectorLayer.getRenderBuffer()\n    );\n\n    if (declutterBuilderGroup) {\n      this.declutterExecutorGroup = new ExecutorGroup(\n        extent,\n        resolution,\n        pixelRatio,\n        vectorSource.getOverlaps(),\n        declutterBuilderGroup.finish(),\n        vectorLayer.getRenderBuffer()\n      );\n    }\n\n    this.renderedResolution_ = resolution;\n    this.renderedRevision_ = vectorLayerRevision;\n    this.renderedRenderOrder_ = vectorLayerRenderOrder;\n    this.renderedExtent_ = renderedExtent;\n    this.wrappedRenderedExtent_ = extent;\n    this.renderedCenter_ = center;\n    this.renderedProjection_ = projection;\n    this.replayGroup_ = executorGroup;\n    this.hitDetectionImageData_ = null;\n\n    this.replayGroupChanged = true;\n    return true;\n  }\n\n  /**\n   * @param {import(\"../../Feature.js\").default} feature Feature.\n   * @param {number} squaredTolerance Squared render tolerance.\n   * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\n   * @param {import(\"../../proj.js\").TransformFunction} [transform] Transform from user to view projection.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\n   * @return {boolean} `true` if an image is loading.\n   */\n  renderFeature(\n    feature,\n    squaredTolerance,\n    styles,\n    builderGroup,\n    transform,\n    declutterBuilderGroup\n  ) {\n    if (!styles) {\n      return false;\n    }\n    let loading = false;\n    if (Array.isArray(styles)) {\n      for (let i = 0, ii = styles.length; i < ii; ++i) {\n        loading =\n          renderFeature(\n            builderGroup,\n            feature,\n            styles[i],\n            squaredTolerance,\n            this.boundHandleStyleImageChange_,\n            transform,\n            declutterBuilderGroup\n          ) || loading;\n      }\n    } else {\n      loading = renderFeature(\n        builderGroup,\n        feature,\n        styles,\n        squaredTolerance,\n        this.boundHandleStyleImageChange_,\n        transform,\n        declutterBuilderGroup\n      );\n    }\n    return loading;\n  }\n}\n\nexport default CanvasVectorLayerRenderer;\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,kBAAkB,MAAM,qCAAqC;AACpE,OAAOC,mBAAmB,IAAGC,UAAU,QAAO,YAAY;AAC1D,OAAOC,aAAa,MAAM,sCAAsC;AAChE,OAAOC,QAAQ,MAAM,mBAAmB;AACxC,SACEC,qBAAqB,EACrBC,2BAA2B,EAC3BC,SAAS,QACJ,kCAAkC;AACzC,SACEC,KAAK,EACLC,WAAW,EACXC,SAAS,EACTC,QAAQ,IAAIC,iBAAiB,QACxB,oBAAoB;AAC3B,SACEC,MAAM,EACNC,cAAc,EACdC,WAAW,EACXC,QAAQ,EACRC,UAAU,IAAIC,gBAAgB,EAC9BC,KAAK,IAAIC,WAAW,QACf,iBAAiB;AACxB,SAAQC,qBAAqB,EAAEC,aAAa,QAAO,cAAc;AACjE,SACEC,YAAY,IAAIC,kBAAkB,EAClCC,YAAY,IAAIC,kBAAkB,EAClCC,mBAAmB,IAAIC,yBAAyB,EAChDC,aAAa,QACR,cAAc;AACrB,SAAQC,MAAM,QAAO,gBAAgB;AACrC,SACEC,cAAc,EACdC,2BAA2B,EAC3BC,iBAAiB,EACjBC,YAAY,EACZC,gBAAgB,QACX,eAAe;AACtB,SAAQC,MAAM,QAAO,eAAe;AACpC,SAAQjB,KAAK,IAAIkB,eAAe,QAAO,qBAAqB;;AAE5D;AACA;AACA;AACA;AACA;AACA,MAAMC,yBAAyB,SAASrC,mBAAmB,CAAC;EAC1D;AACF;AACA;EACEsC,WAAWA,CAACC,WAAW,EAAE;IACvB,KAAK,CAACA,WAAW,CAAC;;IAElB;IACA,IAAI,CAACC,4BAA4B,GAAG,IAAI,CAACC,uBAAuB,CAACC,IAAI,CAAC,IAAI,CAAC;;IAE3E;AACJ;AACA;IACI,IAAI,CAACC,uBAAuB;;IAE5B;AACJ;AACA;IACI,IAAI,CAACC,sBAAsB,GAAG,IAAI;;IAElC;AACJ;AACA;IACI,IAAI,CAACC,iBAAiB,GAAG,IAAI;;IAE7B;AACJ;AACA;AACA;IACI,IAAI,CAACC,iBAAiB,GAAG,CAAC,CAAC;;IAE3B;AACJ;AACA;AACA;IACI,IAAI,CAACC,mBAAmB,GAAGC,GAAG;;IAE9B;AACJ;AACA;AACA;IACI,IAAI,CAACC,eAAe,GAAGnC,WAAW,EAAE;;IAEpC;AACJ;AACA;AACA;IACI,IAAI,CAACoC,sBAAsB,GAAGpC,WAAW,EAAE;;IAE3C;AACJ;AACA;AACA;IACI,IAAI,CAACqC,iBAAiB;;IAEtB;AACJ;AACA;AACA;IACI,IAAI,CAACC,eAAe,GAAG,IAAI;;IAE3B;AACJ;AACA;AACA;IACI,IAAI,CAACC,mBAAmB,GAAG,IAAI;;IAE/B;AACJ;AACA;AACA;IACI,IAAI,CAACC,oBAAoB,GAAG,IAAI;;IAEhC;AACJ;AACA;AACA;IACI,IAAI,CAACC,YAAY,GAAG,IAAI;;IAExB;AACJ;AACA;AACA;IACI,IAAI,CAACC,kBAAkB,GAAG,IAAI;;IAE9B;AACJ;AACA;IACI,IAAI,CAACC,sBAAsB,GAAG,IAAI;;IAElC;AACJ;AACA;AACA;IACI,IAAI,CAACC,QAAQ,GAAG,IAAI;;IAEpB;AACJ;AACA;AACA;IACI,IAAI,CAACC,mBAAmB,GAAG,IAAI;;IAE/B;AACJ;AACA;AACA;IACI,IAAI,CAACC,QAAQ,GAAG,CAAC;EACnB;;EAEA;AACF;AACA;AACA;AACA;EACEC,YAAYA,CAACC,aAAa,EAAEC,UAAU,EAAEC,aAAa,EAAE;IACrD,MAAMC,MAAM,GAAGF,UAAU,CAACE,MAAM;IAChC,MAAMC,SAAS,GAAGH,UAAU,CAACG,SAAS;IACtC,MAAMC,MAAM,GAAGD,SAAS,CAACC,MAAM;IAC/B,MAAMC,UAAU,GAAGF,SAAS,CAACE,UAAU;IACvC,MAAMC,UAAU,GAAGH,SAAS,CAACG,UAAU;IACvC,MAAMC,QAAQ,GAAGJ,SAAS,CAACI,QAAQ;IACnC,MAAMC,gBAAgB,GAAGF,UAAU,CAACG,SAAS,EAAE;IAC/C,MAAMC,YAAY,GAAG,IAAI,CAACC,QAAQ,EAAE,CAACC,SAAS,EAAE;IAChD,MAAMC,UAAU,GAAGb,UAAU,CAACa,UAAU;IACxC,MAAMC,SAAS,GAAGd,UAAU,CAACc,SAAS;IACtC,MAAMC,WAAW,GAAG,EAClBD,SAAS,CAAC1E,QAAQ,CAAC4E,SAAS,CAAC,IAAIF,SAAS,CAAC1E,QAAQ,CAAC6E,WAAW,CAAC,CACjE;IACD,MAAMC,OAAO,GAAG,IAAI,CAACtB,mBAAmB;IACxC,MAAMuB,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACrB,UAAU,CAACsB,IAAI,CAAC,CAAC,CAAC,GAAGT,UAAU,CAAC;IACzD,MAAMU,MAAM,GAAGH,IAAI,CAACC,KAAK,CAACrB,UAAU,CAACsB,IAAI,CAAC,CAAC,CAAC,GAAGT,UAAU,CAAC;IAE1D,MAAMW,UAAU,GAAGd,YAAY,CAACe,QAAQ,EAAE,IAAInB,UAAU,CAACoB,QAAQ,EAAE;IACnE,MAAMC,UAAU,GAAGH,UAAU,GAAGxE,QAAQ,CAACwD,gBAAgB,CAAC,GAAG,IAAI;IACjE,MAAMoB,QAAQ,GAAGJ,UAAU,GACvBJ,IAAI,CAACS,IAAI,CAAC,CAAC3B,MAAM,CAAC,CAAC,CAAC,GAAGM,gBAAgB,CAAC,CAAC,CAAC,IAAImB,UAAU,CAAC,GAAG,CAAC,GAC7D,CAAC;IACL,IAAIG,KAAK,GAAGN,UAAU,GAClBJ,IAAI,CAACW,KAAK,CAAC,CAAC7B,MAAM,CAAC,CAAC,CAAC,GAAGM,gBAAgB,CAAC,CAAC,CAAC,IAAImB,UAAU,CAAC,GAC1D,CAAC;IACL,GAAG;MACD,MAAMK,SAAS,GAAG,IAAI,CAACC,kBAAkB,CACvC7B,MAAM,EACNC,UAAU,EACVE,QAAQ,EACRM,UAAU,EACVM,KAAK,EACLI,MAAM,EACNO,KAAK,GAAGH,UAAU,CACnB;MACD5B,aAAa,CAACmC,OAAO,CACnBhB,OAAO,EACP,CAAC,EACDc,SAAS,EACTzB,QAAQ,EACRQ,WAAW,EACXoB,SAAS,EACTlC,aAAa,CACd;IACH,CAAC,QAAQ,EAAE6B,KAAK,GAAGF,QAAQ;EAC7B;EAEAQ,wBAAwBA,CAAA,EAAG;IACzB,IAAI,IAAI,CAACvC,QAAQ,KAAK,CAAC,EAAE;MACvB,MAAMwC,kBAAkB,GAAGhF,qBAAqB,CAC9C,IAAI,CAAC6D,OAAO,CAACoB,MAAM,CAACnB,KAAK,EACzB,IAAI,CAACD,OAAO,CAACoB,MAAM,CAACf,MAAM,EAC1BrF,UAAU,CACX;MACD,IAAI,CAAC0D,mBAAmB,GAAGyC,kBAAkB;IAC/C,CAAC,MAAM;MACL,IAAI,CAACzC,mBAAmB,GAAG,IAAI,CAACsB,OAAO;IACzC;EACF;EAEAqB,0BAA0BA,CAAA,EAAG;IAC3B,IAAI,IAAI,CAAC1C,QAAQ,KAAK,CAAC,EAAE;MACvB,MAAM2C,KAAK,GAAG,IAAI,CAACtB,OAAO,CAACuB,WAAW;MACtC,IAAI,CAACvB,OAAO,CAACuB,WAAW,GAAG,IAAI,CAAC5C,QAAQ;MACxC,IAAI,CAACqB,OAAO,CAACwB,SAAS,CAAC,IAAI,CAAC9C,mBAAmB,CAAC0C,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;MAC7D,IAAI,CAACpB,OAAO,CAACuB,WAAW,GAAGD,KAAK;MAChClF,aAAa,CAAC,IAAI,CAACsC,mBAAmB,CAAC;MACvC1D,UAAU,CAACyG,IAAI,CAAC,IAAI,CAAC/C,mBAAmB,CAAC0C,MAAM,CAAC;MAChD,IAAI,CAAC1C,mBAAmB,GAAG,IAAI;IACjC;EACF;;EAEA;AACF;AACA;AACA;EACEgD,eAAeA,CAAC5C,UAAU,EAAE;IAC1B,IAAI,IAAI,CAACN,sBAAsB,EAAE;MAC/B,IAAI,CAAC0C,wBAAwB,EAAE;MAC/B,IAAI,CAACtC,YAAY,CACf,IAAI,CAACJ,sBAAsB,EAC3BM,UAAU,EACVA,UAAU,CAACC,aAAa,CACzB;MACD,IAAI,CAACsC,0BAA0B,EAAE;IACnC;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEM,WAAWA,CAAC7C,UAAU,EAAE8C,MAAM,EAAE;IAC9B,MAAMjC,UAAU,GAAGb,UAAU,CAACa,UAAU;IACxC,MAAMkC,UAAU,GAAG/C,UAAU,CAACgD,gBAAgB,CAAChD,UAAU,CAACiD,UAAU,CAAC;;IAErE;IACAvG,SAAS,CAAC,IAAI,CAACwG,cAAc,EAAE,CAAC,GAAGrC,UAAU,EAAE,CAAC,GAAGA,UAAU,CAAC;IAC9DpE,WAAW,CAAC,IAAI,CAAC0G,qBAAqB,EAAE,IAAI,CAACD,cAAc,CAAC;IAE5D,MAAME,eAAe,GAAGxG,iBAAiB,CAAC,IAAI,CAACsG,cAAc,CAAC;IAE9D,IAAI,CAACG,YAAY,CAACP,MAAM,EAAEM,eAAe,EAAE,IAAI,CAACE,aAAa,CAACtD,UAAU,CAAC,CAAC;IAC1E,MAAMkB,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,MAAMoB,MAAM,GAAGpB,OAAO,CAACoB,MAAM;IAE7B,MAAMiB,WAAW,GAAG,IAAI,CAAC/D,YAAY;IACrC,MAAME,sBAAsB,GAAG,IAAI,CAACA,sBAAsB;IAC1D,IACE,CAAC,CAAC6D,WAAW,IAAIA,WAAW,CAACC,OAAO,EAAE,MACrC,CAAC9D,sBAAsB,IAAIA,sBAAsB,CAAC8D,OAAO,EAAE,CAAC,EAC7D;MACA,OAAO,IAAI;IACb;;IAEA;IACA,MAAMrC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACrB,UAAU,CAACsB,IAAI,CAAC,CAAC,CAAC,GAAGT,UAAU,CAAC;IACzD,MAAMU,MAAM,GAAGH,IAAI,CAACC,KAAK,CAACrB,UAAU,CAACsB,IAAI,CAAC,CAAC,CAAC,GAAGT,UAAU,CAAC;IAC1D,IAAIyB,MAAM,CAACnB,KAAK,IAAIA,KAAK,IAAImB,MAAM,CAACf,MAAM,IAAIA,MAAM,EAAE;MACpDe,MAAM,CAACnB,KAAK,GAAGA,KAAK;MACpBmB,MAAM,CAACf,MAAM,GAAGA,MAAM;MACtB,IAAIe,MAAM,CAACmB,KAAK,CAACzB,SAAS,KAAKoB,eAAe,EAAE;QAC9Cd,MAAM,CAACmB,KAAK,CAACzB,SAAS,GAAGoB,eAAe;MAC1C;IACF,CAAC,MAAM,IAAI,CAAC,IAAI,CAACM,eAAe,EAAE;MAChCxC,OAAO,CAACyC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAExC,KAAK,EAAEI,MAAM,CAAC;IACxC;IAEA,IAAI,CAACqC,SAAS,CAAC1C,OAAO,EAAElB,UAAU,CAAC;IAEnC,MAAMG,SAAS,GAAGH,UAAU,CAACG,SAAS;IACtC,MAAMG,UAAU,GAAGH,SAAS,CAACG,UAAU;IAEvC,IAAI,CAACT,QAAQ,GAAGkD,UAAU,CAACc,OAAO;IAClC,IAAI,CAACzB,wBAAwB,EAAE;;IAE/B;IACA,IAAI0B,OAAO,GAAG,KAAK;IACnB,IAAIC,MAAM,GAAG,IAAI;IACjB,IAAIhB,UAAU,CAAC7C,MAAM,IAAI,IAAI,CAACP,QAAQ,EAAE;MACtC,MAAMqE,WAAW,GAAGjG,cAAc,CAACgF,UAAU,CAAC7C,MAAM,EAAEI,UAAU,CAAC;MACjEyD,MAAM,GAAG7G,gBAAgB,CAAC8G,WAAW,EAAEhE,UAAU,CAACE,MAAM,CAAC;MACzD4D,OAAO,GAAGC,MAAM,IAAI,CAACjH,cAAc,CAACkH,WAAW,EAAEhE,UAAU,CAACE,MAAM,CAAC;MACnE,IAAI4D,OAAO,EAAE;QACX,IAAI,CAACG,aAAa,CAAC,IAAI,CAACrE,mBAAmB,EAAEI,UAAU,EAAEgE,WAAW,CAAC;MACvE;IACF;IAEA,IAAID,MAAM,EAAE;MACV,IAAI,CAACjE,YAAY,CAACyD,WAAW,EAAEvD,UAAU,CAAC;IAC5C;IAEA,IAAI8D,OAAO,EAAE;MACX,IAAI,CAAClE,mBAAmB,CAACsE,OAAO,EAAE;IACpC;IAEA,IAAI,CAAC3B,0BAA0B,EAAE;IAEjC,IAAI,CAAC4B,UAAU,CAACjD,OAAO,EAAElB,UAAU,CAAC;IAEpC,IAAI,IAAI,CAACZ,iBAAiB,KAAKe,SAAS,CAACI,QAAQ,EAAE;MACjD,IAAI,CAACnB,iBAAiB,GAAGe,SAAS,CAACI,QAAQ;MAC3C,IAAI,CAAC1B,sBAAsB,GAAG,IAAI;IACpC;IACA,OAAO,IAAI,CAACuF,SAAS;EACvB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEC,WAAWA,CAACC,KAAK,EAAE;IACjB,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;MAC9B,IAAI,CAAC,IAAI,CAAC3F,sBAAsB,IAAI,CAAC,IAAI,CAACD,uBAAuB,EAAE;QACjE,MAAM0C,IAAI,GAAG,CAAC,IAAI,CAACJ,OAAO,CAACoB,MAAM,CAACnB,KAAK,EAAE,IAAI,CAACD,OAAO,CAACoB,MAAM,CAACf,MAAM,CAAC;QACpE/E,KAAK,CAAC,IAAI,CAAC0G,cAAc,EAAE5B,IAAI,CAAC;QAChC,MAAMlB,MAAM,GAAG,IAAI,CAACf,eAAe;QACnC,MAAMgB,UAAU,GAAG,IAAI,CAACrB,mBAAmB;QAC3C,MAAMuB,QAAQ,GAAG,IAAI,CAACnB,iBAAiB;QACvC,MAAMkB,UAAU,GAAG,IAAI,CAAChB,mBAAmB;QAC3C,MAAMY,MAAM,GAAG,IAAI,CAACf,sBAAsB;QAC1C,MAAMsF,KAAK,GAAG,IAAI,CAAC9D,QAAQ,EAAE;QAC7B,MAAM+D,UAAU,GAAG,EAAE;QACrB,MAAMvD,KAAK,GAAGG,IAAI,CAAC,CAAC,CAAC,GAAGjF,qBAAqB;QAC7C,MAAMkF,MAAM,GAAGD,IAAI,CAAC,CAAC,CAAC,GAAGjF,qBAAqB;QAC9CqI,UAAU,CAAC/B,IAAI,CACb,IAAI,CAACV,kBAAkB,CACrB7B,MAAM,EACNC,UAAU,EACVE,QAAQ,EACRlE,qBAAqB,EACrB8E,KAAK,EACLI,MAAM,EACN,CAAC,CACF,CAACoD,KAAK,EAAE,CACV;QACD,MAAMC,MAAM,GAAGH,KAAK,CAAC7D,SAAS,EAAE;QAChC,MAAMJ,gBAAgB,GAAGF,UAAU,CAACG,SAAS,EAAE;QAC/C,IACEmE,MAAM,CAACnD,QAAQ,EAAE,IACjBnB,UAAU,CAACoB,QAAQ,EAAE,IACrB,CAAC5E,cAAc,CAAC0D,gBAAgB,EAAEN,MAAM,CAAC,EACzC;UACA,IAAI2E,MAAM,GAAG3E,MAAM,CAAC,CAAC,CAAC;UACtB,MAAMyB,UAAU,GAAG3E,QAAQ,CAACwD,gBAAgB,CAAC;UAC7C,IAAIsB,KAAK,GAAG,CAAC;UACb,IAAIgD,OAAO;UACX,OAAOD,MAAM,GAAGrE,gBAAgB,CAAC,CAAC,CAAC,EAAE;YACnC,EAAEsB,KAAK;YACPgD,OAAO,GAAGnD,UAAU,GAAGG,KAAK;YAC5B4C,UAAU,CAAC/B,IAAI,CACb,IAAI,CAACV,kBAAkB,CACrB7B,MAAM,EACNC,UAAU,EACVE,QAAQ,EACRlE,qBAAqB,EACrB8E,KAAK,EACLI,MAAM,EACNuD,OAAO,CACR,CAACH,KAAK,EAAE,CACV;YACDE,MAAM,IAAIlD,UAAU;UACtB;UACAG,KAAK,GAAG,CAAC;UACT+C,MAAM,GAAG3E,MAAM,CAAC,CAAC,CAAC;UAClB,OAAO2E,MAAM,GAAGrE,gBAAgB,CAAC,CAAC,CAAC,EAAE;YACnC,EAAEsB,KAAK;YACPgD,OAAO,GAAGnD,UAAU,GAAGG,KAAK;YAC5B4C,UAAU,CAAC/B,IAAI,CACb,IAAI,CAACV,kBAAkB,CACrB7B,MAAM,EACNC,UAAU,EACVE,QAAQ,EACRlE,qBAAqB,EACrB8E,KAAK,EACLI,MAAM,EACNuD,OAAO,CACR,CAACH,KAAK,EAAE,CACV;YACDE,MAAM,IAAIlD,UAAU;UACtB;QACF;QAEA,IAAI,CAAC9C,sBAAsB,GAAGvC,2BAA2B,CACvDgF,IAAI,EACJoD,UAAU,EACV,IAAI,CAAC5F,iBAAiB,EACtB2F,KAAK,CAACM,gBAAgB,EAAE,EACxB7E,MAAM,EACNG,UAAU,EACVE,QAAQ,CACT;MACH;MACAiE,OAAO,CACLjI,SAAS,CAAC+H,KAAK,EAAE,IAAI,CAACxF,iBAAiB,EAAE,IAAI,CAACD,sBAAsB,CAAC,CACtE;IACH,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEmG,0BAA0BA,CACxBC,UAAU,EACVjF,UAAU,EACVkF,YAAY,EACZC,QAAQ,EACRC,OAAO,EACP;IACA,IAAI,CAAC,IAAI,CAAC5F,YAAY,EAAE;MACtB,OAAO2C,SAAS;IAClB;IACA,MAAM9B,UAAU,GAAGL,UAAU,CAACG,SAAS,CAACE,UAAU;IAClD,MAAME,QAAQ,GAAGP,UAAU,CAACG,SAAS,CAACI,QAAQ;IAC9C,MAAMkE,KAAK,GAAG,IAAI,CAAC9D,QAAQ,EAAE;;IAE7B;IACA,MAAM0E,QAAQ,GAAG,CAAC,CAAC;;IAEnB;AACJ;AACA;AACA;AACA;AACA;IACI,MAAMC,eAAe,GAAG,SAAAA,CAAUC,OAAO,EAAEC,QAAQ,EAAEC,UAAU,EAAE;MAC/D,MAAMC,GAAG,GAAGtH,MAAM,CAACmH,OAAO,CAAC;MAC3B,MAAMI,KAAK,GAAGN,QAAQ,CAACK,GAAG,CAAC;MAC3B,IAAI,CAACC,KAAK,EAAE;QACV,IAAIF,UAAU,KAAK,CAAC,EAAE;UACpBJ,QAAQ,CAACK,GAAG,CAAC,GAAG,IAAI;UACpB,OAAOP,QAAQ,CAACI,OAAO,EAAEd,KAAK,EAAEe,QAAQ,CAAC;QAC3C;QACAJ,OAAO,CAACzC,IAAI,CACT0C,QAAQ,CAACK,GAAG,CAAC,GAAG;UACfH,OAAO,EAAEA,OAAO;UAChBd,KAAK,EAAEA,KAAK;UACZe,QAAQ,EAAEA,QAAQ;UAClBC,UAAU,EAAEA,UAAU;UACtBN,QAAQ,EAAEA;QACZ,CAAC,CACF;MACH,CAAC,MAAM,IAAIQ,KAAK,KAAK,IAAI,IAAIF,UAAU,GAAGE,KAAK,CAACF,UAAU,EAAE;QAC1D,IAAIA,UAAU,KAAK,CAAC,EAAE;UACpBJ,QAAQ,CAACK,GAAG,CAAC,GAAG,IAAI;UACpBN,OAAO,CAACQ,MAAM,CAACR,OAAO,CAACS,WAAW,CAACF,KAAK,CAAC,EAAE,CAAC,CAAC;UAC7C,OAAOR,QAAQ,CAACI,OAAO,EAAEd,KAAK,EAAEe,QAAQ,CAAC;QAC3C;QACAG,KAAK,CAACH,QAAQ,GAAGA,QAAQ;QACzBG,KAAK,CAACF,UAAU,GAAGA,UAAU;MAC/B;MACA,OAAOtD,SAAS;IAClB,CAAC;IAED,IAAI2D,MAAM;IACV,MAAMC,cAAc,GAAG,CAAC,IAAI,CAACvG,YAAY,CAAC;IAC1C,IAAI,IAAI,CAACE,sBAAsB,EAAE;MAC/BqG,cAAc,CAACpD,IAAI,CAAC,IAAI,CAACjD,sBAAsB,CAAC;IAClD;IACAqG,cAAc,CAACC,IAAI,CAAEjG,aAAa,IAAK;MACrC,OAAQ+F,MAAM,GAAG/F,aAAa,CAACiF,0BAA0B,CACvDC,UAAU,EACV5E,UAAU,EACVE,QAAQ,EACR2E,YAAY,EACZI,eAAe,EACfvF,aAAa,KAAK,IAAI,CAACL,sBAAsB,IAC3CM,UAAU,CAACC,aAAa,GACtBD,UAAU,CAACC,aAAa,CAACgG,GAAG,EAAE,CAACC,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,KAAK,CAAC,GACxD,IAAI,CACT;IACH,CAAC,CAAC;IAEF,OAAON,MAAM;EACf;;EAEA;AACF;AACA;EACEO,kBAAkBA,CAAA,EAAG;IACnB,MAAM5B,KAAK,GAAG,IAAI,CAAC9D,QAAQ,EAAE;IAC7B,IAAI8D,KAAK,CAAC6B,UAAU,EAAE,IAAI,IAAI,CAAC9G,YAAY,EAAE;MAC3CiF,KAAK,CAAC8B,OAAO,EAAE;IACjB;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE7H,uBAAuBA,CAAC8H,KAAK,EAAE;IAC7B,IAAI,CAACC,uBAAuB,EAAE;EAChC;;EAEA;AACF;AACA;AACA;AACA;EACEC,YAAYA,CAAC1G,UAAU,EAAE;IACvB,MAAMxB,WAAW,GAAG,IAAI,CAACmC,QAAQ,EAAE;IACnC,MAAMD,YAAY,GAAGlC,WAAW,CAACoC,SAAS,EAAE;IAC5C,IAAI,CAACF,YAAY,EAAE;MACjB,OAAO,KAAK;IACd;IAEA,MAAMiG,SAAS,GAAG3G,UAAU,CAACc,SAAS,CAAC1E,QAAQ,CAAC4E,SAAS,CAAC;IAC1D,MAAM4F,WAAW,GAAG5G,UAAU,CAACc,SAAS,CAAC1E,QAAQ,CAAC6E,WAAW,CAAC;IAC9D,MAAM4F,oBAAoB,GAAGrI,WAAW,CAACsI,uBAAuB,EAAE;IAClE,MAAMC,sBAAsB,GAAGvI,WAAW,CAACwI,yBAAyB,EAAE;IAEtE,IACG,IAAI,CAACC,KAAK,IAAI,CAACJ,oBAAoB,IAAIF,SAAS,IAChD,CAACI,sBAAsB,IAAIH,WAAY,EACxC;MACA,IAAI,CAAChI,uBAAuB,GAAG,IAAI;MACnC,OAAO,IAAI;IACb;IACA,IAAI,CAACA,uBAAuB,GAAG,KAAK;IAEpC,MAAMsI,gBAAgB,GAAGlH,UAAU,CAACE,MAAM;IAC1C,MAAMC,SAAS,GAAGH,UAAU,CAACG,SAAS;IACtC,MAAMG,UAAU,GAAGH,SAAS,CAACG,UAAU;IACvC,MAAMD,UAAU,GAAGF,SAAS,CAACE,UAAU;IACvC,MAAMQ,UAAU,GAAGb,UAAU,CAACa,UAAU;IACxC,MAAMsG,mBAAmB,GAAG3I,WAAW,CAAC4I,WAAW,EAAE;IACrD,MAAMC,uBAAuB,GAAG7I,WAAW,CAAC8I,eAAe,EAAE;IAC7D,IAAIC,sBAAsB,GAAG/I,WAAW,CAACgJ,cAAc,EAAE;IAEzD,IAAID,sBAAsB,KAAKpF,SAAS,EAAE;MACxCoF,sBAAsB,GAAG/J,kBAAkB;IAC7C;IAEA,MAAM4C,MAAM,GAAGD,SAAS,CAACC,MAAM,CAACuE,KAAK,EAAE;IACvC,MAAMzE,MAAM,GAAGrD,MAAM,CACnBqK,gBAAgB,EAChBG,uBAAuB,GAAGhH,UAAU,CACrC;IACD,MAAMoH,cAAc,GAAGvH,MAAM,CAACyE,KAAK,EAAE;IACrC,MAAM+C,WAAW,GAAG,CAACxH,MAAM,CAACyE,KAAK,EAAE,CAAC;IACpC,MAAMnE,gBAAgB,GAAGF,UAAU,CAACG,SAAS,EAAE;IAE/C,IACEC,YAAY,CAACe,QAAQ,EAAE,IACvBnB,UAAU,CAACoB,QAAQ,EAAE,IACrB,CAAC5E,cAAc,CAAC0D,gBAAgB,EAAER,UAAU,CAACE,MAAM,CAAC,EACpD;MACA;MACA;MACA;MACA;MACA;MACA,MAAMyB,UAAU,GAAG3E,QAAQ,CAACwD,gBAAgB,CAAC;MAC7C,MAAMmH,MAAM,GAAGvG,IAAI,CAACwG,GAAG,CAAC5K,QAAQ,CAACkD,MAAM,CAAC,GAAG,CAAC,EAAEyB,UAAU,CAAC;MACzDzB,MAAM,CAAC,CAAC,CAAC,GAAGM,gBAAgB,CAAC,CAAC,CAAC,GAAGmH,MAAM;MACxCzH,MAAM,CAAC,CAAC,CAAC,GAAGM,gBAAgB,CAAC,CAAC,CAAC,GAAGmH,MAAM;MACxCtJ,eAAe,CAAC+B,MAAM,EAAEE,UAAU,CAAC;MACnC,MAAMuH,UAAU,GAAGzK,WAAW,CAACsK,WAAW,CAAC,CAAC,CAAC,EAAEpH,UAAU,CAAC;MAC1D;MACA,IACEuH,UAAU,CAAC,CAAC,CAAC,GAAGrH,gBAAgB,CAAC,CAAC,CAAC,IACnCqH,UAAU,CAAC,CAAC,CAAC,GAAGrH,gBAAgB,CAAC,CAAC,CAAC,EACnC;QACAkH,WAAW,CAAC/E,IAAI,CAAC,CACfkF,UAAU,CAAC,CAAC,CAAC,GAAGlG,UAAU,EAC1BkG,UAAU,CAAC,CAAC,CAAC,EACbA,UAAU,CAAC,CAAC,CAAC,GAAGlG,UAAU,EAC1BkG,UAAU,CAAC,CAAC,CAAC,CACd,CAAC;MACJ,CAAC,MAAM,IACLA,UAAU,CAAC,CAAC,CAAC,GAAGrH,gBAAgB,CAAC,CAAC,CAAC,IACnCqH,UAAU,CAAC,CAAC,CAAC,GAAGrH,gBAAgB,CAAC,CAAC,CAAC,EACnC;QACAkH,WAAW,CAAC/E,IAAI,CAAC,CACfkF,UAAU,CAAC,CAAC,CAAC,GAAGlG,UAAU,EAC1BkG,UAAU,CAAC,CAAC,CAAC,EACbA,UAAU,CAAC,CAAC,CAAC,GAAGlG,UAAU,EAC1BkG,UAAU,CAAC,CAAC,CAAC,CACd,CAAC;MACJ;IACF;IAEA,IACE,IAAI,CAACZ,KAAK,IACV,IAAI,CAACjI,mBAAmB,IAAIqB,UAAU,IACtC,IAAI,CAACtB,iBAAiB,IAAIoI,mBAAmB,IAC7C,IAAI,CAAC5H,oBAAoB,IAAIgI,sBAAsB,IACnDzK,cAAc,CAAC,IAAI,CAACqC,sBAAsB,EAAEe,MAAM,CAAC,EACnD;MACA,IAAI,CAACpC,MAAM,CAAC,IAAI,CAACoB,eAAe,EAAEuI,cAAc,CAAC,EAAE;QACjD,IAAI,CAAC5I,sBAAsB,GAAG,IAAI;QAClC,IAAI,CAACK,eAAe,GAAGuI,cAAc;MACvC;MACA,IAAI,CAACpI,eAAe,GAAGe,MAAM;MAC7B,IAAI,CAACX,kBAAkB,GAAG,KAAK;MAC/B,OAAO,IAAI;IACb;IAEA,IAAI,CAACD,YAAY,GAAG,IAAI;IAExB,MAAM+D,WAAW,GAAG,IAAIvH,kBAAkB,CACxC0B,kBAAkB,CAAC2C,UAAU,EAAEQ,UAAU,CAAC,EAC1CX,MAAM,EACNG,UAAU,EACVQ,UAAU,CACX;IAED,IAAIiH,qBAAqB;IACzB,IAAI,IAAI,CAACnH,QAAQ,EAAE,CAACoH,YAAY,EAAE,EAAE;MAClCD,qBAAqB,GAAG,IAAI9L,kBAAkB,CAC5C0B,kBAAkB,CAAC2C,UAAU,EAAEQ,UAAU,CAAC,EAC1CX,MAAM,EACNG,UAAU,EACVQ,UAAU,CACX;IACH;IAEA,MAAMmH,cAAc,GAAG/J,iBAAiB,EAAE;IAC1C,IAAIgK,aAAa;IACjB,IAAID,cAAc,EAAE;MAClB,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGT,WAAW,CAACU,MAAM,EAAEF,CAAC,GAAGC,EAAE,EAAE,EAAED,CAAC,EAAE;QACpD,MAAMhI,MAAM,GAAGwH,WAAW,CAACQ,CAAC,CAAC;QAC7B,MAAMG,UAAU,GAAGnK,YAAY,CAACgC,MAAM,EAAEI,UAAU,CAAC;QACnDI,YAAY,CAAC4H,YAAY,CACvBD,UAAU,EACVlK,gBAAgB,CAACkC,UAAU,EAAEC,UAAU,CAAC,EACxC0H,cAAc,CACf;MACH;MACAC,aAAa,GAAGjK,2BAA2B,CAACgK,cAAc,EAAE1H,UAAU,CAAC;IACzE,CAAC,MAAM;MACL,KAAK,IAAI4H,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGT,WAAW,CAACU,MAAM,EAAEF,CAAC,GAAGC,EAAE,EAAE,EAAED,CAAC,EAAE;QACpDxH,YAAY,CAAC4H,YAAY,CAACZ,WAAW,CAACQ,CAAC,CAAC,EAAE7H,UAAU,EAAEC,UAAU,CAAC;MACnE;IACF;IAEA,MAAMiI,gBAAgB,GAAG3K,yBAAyB,CAACyC,UAAU,EAAEQ,UAAU,CAAC;IAC1E,IAAIoG,KAAK,GAAG,IAAI;IAChB,MAAMlD,MAAM;IACV;AACN;AACA;IACOwB,OAAO,IAAK;MACX,IAAIiD,MAAM;MACV,MAAMC,aAAa,GACjBlD,OAAO,CAACR,gBAAgB,EAAE,IAAIvG,WAAW,CAACuG,gBAAgB,EAAE;MAC9D,IAAI0D,aAAa,EAAE;QACjBD,MAAM,GAAGC,aAAa,CAAClD,OAAO,EAAElF,UAAU,CAAC;MAC7C;MACA,IAAImI,MAAM,EAAE;QACV,MAAME,KAAK,GAAG,IAAI,CAAC7K,aAAa,CAC9B0H,OAAO,EACPgD,gBAAgB,EAChBC,MAAM,EACNjF,WAAW,EACX0E,aAAa,EACbH,qBAAqB,CACtB;QACDb,KAAK,GAAGA,KAAK,IAAI,CAACyB,KAAK;MACzB;IACF,CAAC;IAEH,MAAML,UAAU,GAAGnK,YAAY,CAACgC,MAAM,EAAEI,UAAU,CAAC;IACnD;IACA,MAAM+E,QAAQ,GAAG3E,YAAY,CAACiI,mBAAmB,CAACN,UAAU,CAAC;IAC7D,IAAId,sBAAsB,EAAE;MAC1BlC,QAAQ,CAACuD,IAAI,CAACrB,sBAAsB,CAAC;IACvC;IACA,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAG9C,QAAQ,CAAC+C,MAAM,EAAEF,CAAC,GAAGC,EAAE,EAAE,EAAED,CAAC,EAAE;MACjDnE,MAAM,CAACsB,QAAQ,CAAC6C,CAAC,CAAC,CAAC;IACrB;IACA,IAAI,CAACpJ,iBAAiB,GAAGuG,QAAQ;IACjC,IAAI,CAAC4B,KAAK,GAAGA,KAAK;IAElB,MAAM4B,uBAAuB,GAAGtF,WAAW,CAACuF,MAAM,EAAE;IACpD,MAAM/I,aAAa,GAAG,IAAI5D,aAAa,CACrC+D,MAAM,EACNG,UAAU,EACVQ,UAAU,EACVH,YAAY,CAACqI,WAAW,EAAE,EAC1BF,uBAAuB,EACvBrK,WAAW,CAAC8I,eAAe,EAAE,CAC9B;IAED,IAAIQ,qBAAqB,EAAE;MACzB,IAAI,CAACpI,sBAAsB,GAAG,IAAIvD,aAAa,CAC7C+D,MAAM,EACNG,UAAU,EACVQ,UAAU,EACVH,YAAY,CAACqI,WAAW,EAAE,EAC1BjB,qBAAqB,CAACgB,MAAM,EAAE,EAC9BtK,WAAW,CAAC8I,eAAe,EAAE,CAC9B;IACH;IAEA,IAAI,CAACtI,mBAAmB,GAAGqB,UAAU;IACrC,IAAI,CAACtB,iBAAiB,GAAGoI,mBAAmB;IAC5C,IAAI,CAAC5H,oBAAoB,GAAGgI,sBAAsB;IAClD,IAAI,CAACrI,eAAe,GAAGuI,cAAc;IACrC,IAAI,CAACtI,sBAAsB,GAAGe,MAAM;IACpC,IAAI,CAACb,eAAe,GAAGe,MAAM;IAC7B,IAAI,CAACd,mBAAmB,GAAGgB,UAAU;IACrC,IAAI,CAACd,YAAY,GAAGO,aAAa;IACjC,IAAI,CAAClB,sBAAsB,GAAG,IAAI;IAElC,IAAI,CAACY,kBAAkB,GAAG,IAAI;IAC9B,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE5B,aAAaA,CACX0H,OAAO,EACPgD,gBAAgB,EAChBC,MAAM,EACNQ,YAAY,EACZhH,SAAS,EACT8F,qBAAqB,EACrB;IACA,IAAI,CAACU,MAAM,EAAE;MACX,OAAO,KAAK;IACd;IACA,IAAIS,OAAO,GAAG,KAAK;IACnB,IAAIC,KAAK,CAACC,OAAO,CAACX,MAAM,CAAC,EAAE;MACzB,KAAK,IAAIN,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGK,MAAM,CAACJ,MAAM,EAAEF,CAAC,GAAGC,EAAE,EAAE,EAAED,CAAC,EAAE;QAC/Ce,OAAO,GACLpL,aAAa,CACXmL,YAAY,EACZzD,OAAO,EACPiD,MAAM,CAACN,CAAC,CAAC,EACTK,gBAAgB,EAChB,IAAI,CAAC9J,4BAA4B,EACjCuD,SAAS,EACT8F,qBAAqB,CACtB,IAAImB,OAAO;MAChB;IACF,CAAC,MAAM;MACLA,OAAO,GAAGpL,aAAa,CACrBmL,YAAY,EACZzD,OAAO,EACPiD,MAAM,EACND,gBAAgB,EAChB,IAAI,CAAC9J,4BAA4B,EACjCuD,SAAS,EACT8F,qBAAqB,CACtB;IACH;IACA,OAAOmB,OAAO;EAChB;AACF;AAEA,eAAe3K,yBAAyB"},"metadata":{},"sourceType":"module","externalDependencies":[]}