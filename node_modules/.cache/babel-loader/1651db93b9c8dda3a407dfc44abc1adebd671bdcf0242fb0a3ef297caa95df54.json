{"ast":null,"code":"import _classCallCheck from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\n * @module ol/style/Text\n */\nimport Fill from './Fill.js';\nimport { toSize } from '../size.js';\n\n/**\n * @typedef {'point' | 'line'} TextPlacement\n * Default text placement is `'point'`. Note that\n * `'line'` requires the underlying geometry to be a {@link module:ol/geom/LineString~LineString},\n * {@link module:ol/geom/Polygon~Polygon}, {@link module:ol/geom/MultiLineString~MultiLineString} or\n * {@link module:ol/geom/MultiPolygon~MultiPolygon}.\n */\n\n/**\n * @typedef {'left' | 'center' | 'right'} TextJustify\n */\n\n/**\n * The default fill color to use if no fill was set at construction time; a\n * blackish `#333`.\n *\n * @const {string}\n */\nvar DEFAULT_FILL_COLOR = '#333';\n\n/**\n * @typedef {Object} Options\n * @property {string} [font] Font style as CSS `font` value, see:\n * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font. Default is `'10px sans-serif'`\n * @property {number} [maxAngle=Math.PI/4] When `placement` is set to `'line'`, allow a maximum angle between adjacent characters.\n * The expected value is in radians, and the default is 45Â° (`Math.PI / 4`).\n * @property {number} [offsetX=0] Horizontal text offset in pixels. A positive will shift the text right.\n * @property {number} [offsetY=0] Vertical text offset in pixels. A positive will shift the text down.\n * @property {boolean} [overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed\n * the width of the polygon at the label position or the length of the path that it follows.\n * @property {TextPlacement} [placement='point'] Text placement.\n * @property {number} [repeat] Repeat interval in pixels. When set, the text will be repeated at this interval. Only available\n * when `placement` is set to `'line'`. Overrides 'textAlign'.\n * @property {number|import(\"../size.js\").Size} [scale] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the text with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {string|Array<string>} [text] Text content or rich text content. For plain text provide a string, which can\n * contain line breaks (`\\n`). For rich text provide an array of text/font tuples. A tuple consists of the text to\n * render and the font to use (or `''` to use the text style's font). A line break has to be a separate tuple (i.e. `'\\n', ''`).\n * **Example:** `['foo', 'bold 10px sans-serif', ' bar', 'italic 10px sans-serif', ' baz', '']` will yield \"**foo** *bar* baz\".\n * **Note:** Rich text is not supported for the immediate rendering API.\n * @property {CanvasTextAlign} [textAlign] Text alignment. Possible values: `'left'`, `'right'`, `'center'`, `'end'` or `'start'`.\n * Default is `'center'` for `placement: 'point'`. For `placement: 'line'`, the default is to let the renderer choose a\n * placement where `maxAngle` is not exceeded.\n * @property {TextJustify} [justify] Text justification within the text box.\n * If not set, text is justified towards the `textAlign` anchor.\n * Otherwise, use options `'left'`, `'center'`, or `'right'` to justify the text within the text box.\n * **Note:** `justify` is ignored for immediate rendering and also for `placement: 'line'`.\n * @property {CanvasTextBaseline} [textBaseline='middle'] Text base line. Possible values: `'bottom'`, `'top'`, `'middle'`, `'alphabetic'`,\n * `'hanging'`, `'ideographic'`.\n * @property {import(\"./Fill.js\").default} [fill] Fill style. If none is provided, we'll use a dark fill-style (#333).\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Fill.js\").default} [backgroundFill] Fill style for the text background when `placement` is\n * `'point'`. Default is no fill.\n * @property {import(\"./Stroke.js\").default} [backgroundStroke] Stroke style for the text background  when `placement`\n * is `'point'`. Default is no stroke.\n * @property {Array<number>} [padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of\n * values in the array is `[top, right, bottom, left]`.\n */\n\n/**\n * @classdesc\n * Set text style for vector features.\n * @api\n */\nvar Text = /*#__PURE__*/function () {\n  /**\n   * @param {Options} [options] Options.\n   */\n  function Text(options) {\n    _classCallCheck(this, Text);\n    options = options || {};\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.font_ = options.font;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.rotation_ = options.rotation;\n\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    this.rotateWithView_ = options.rotateWithView;\n\n    /**\n     * @private\n     * @type {number|import(\"../size.js\").Size|undefined}\n     */\n    this.scale_ = options.scale;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.scaleArray_ = toSize(options.scale !== undefined ? options.scale : 1);\n\n    /**\n     * @private\n     * @type {string|Array<string>|undefined}\n     */\n    this.text_ = options.text;\n\n    /**\n     * @private\n     * @type {CanvasTextAlign|undefined}\n     */\n    this.textAlign_ = options.textAlign;\n\n    /**\n     * @private\n     * @type {TextJustify|undefined}\n     */\n    this.justify_ = options.justify;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.repeat_ = options.repeat;\n\n    /**\n     * @private\n     * @type {CanvasTextBaseline|undefined}\n     */\n    this.textBaseline_ = options.textBaseline;\n\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n    this.fill_ = options.fill !== undefined ? options.fill : new Fill({\n      color: DEFAULT_FILL_COLOR\n    });\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxAngle_ = options.maxAngle !== undefined ? options.maxAngle : Math.PI / 4;\n\n    /**\n     * @private\n     * @type {TextPlacement}\n     */\n    this.placement_ = options.placement !== undefined ? options.placement : 'point';\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overflow_ = !!options.overflow;\n\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.offsetX_ = options.offsetX !== undefined ? options.offsetX : 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.offsetY_ = options.offsetY !== undefined ? options.offsetY : 0;\n\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n    this.backgroundFill_ = options.backgroundFill ? options.backgroundFill : null;\n\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n    this.backgroundStroke_ = options.backgroundStroke ? options.backgroundStroke : null;\n\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n    this.padding_ = options.padding === undefined ? null : options.padding;\n  }\n\n  /**\n   * Clones the style.\n   * @return {Text} The cloned style.\n   * @api\n   */\n  _createClass(Text, [{\n    key: \"clone\",\n    value: function clone() {\n      var scale = this.getScale();\n      return new Text({\n        font: this.getFont(),\n        placement: this.getPlacement(),\n        repeat: this.getRepeat(),\n        maxAngle: this.getMaxAngle(),\n        overflow: this.getOverflow(),\n        rotation: this.getRotation(),\n        rotateWithView: this.getRotateWithView(),\n        scale: Array.isArray(scale) ? scale.slice() : scale,\n        text: this.getText(),\n        textAlign: this.getTextAlign(),\n        justify: this.getJustify(),\n        textBaseline: this.getTextBaseline(),\n        fill: this.getFill() ? this.getFill().clone() : undefined,\n        stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n        offsetX: this.getOffsetX(),\n        offsetY: this.getOffsetY(),\n        backgroundFill: this.getBackgroundFill() ? this.getBackgroundFill().clone() : undefined,\n        backgroundStroke: this.getBackgroundStroke() ? this.getBackgroundStroke().clone() : undefined,\n        padding: this.getPadding() || undefined\n      });\n    }\n\n    /**\n     * Get the `overflow` configuration.\n     * @return {boolean} Let text overflow the length of the path they follow.\n     * @api\n     */\n  }, {\n    key: \"getOverflow\",\n    value: function getOverflow() {\n      return this.overflow_;\n    }\n\n    /**\n     * Get the font name.\n     * @return {string|undefined} Font.\n     * @api\n     */\n  }, {\n    key: \"getFont\",\n    value: function getFont() {\n      return this.font_;\n    }\n\n    /**\n     * Get the maximum angle between adjacent characters.\n     * @return {number} Angle in radians.\n     * @api\n     */\n  }, {\n    key: \"getMaxAngle\",\n    value: function getMaxAngle() {\n      return this.maxAngle_;\n    }\n\n    /**\n     * Get the label placement.\n     * @return {TextPlacement} Text placement.\n     * @api\n     */\n  }, {\n    key: \"getPlacement\",\n    value: function getPlacement() {\n      return this.placement_;\n    }\n\n    /**\n     * Get the repeat interval of the text.\n     * @return {number|undefined} Repeat interval in pixels.\n     * @api\n     */\n  }, {\n    key: \"getRepeat\",\n    value: function getRepeat() {\n      return this.repeat_;\n    }\n\n    /**\n     * Get the x-offset for the text.\n     * @return {number} Horizontal text offset.\n     * @api\n     */\n  }, {\n    key: \"getOffsetX\",\n    value: function getOffsetX() {\n      return this.offsetX_;\n    }\n\n    /**\n     * Get the y-offset for the text.\n     * @return {number} Vertical text offset.\n     * @api\n     */\n  }, {\n    key: \"getOffsetY\",\n    value: function getOffsetY() {\n      return this.offsetY_;\n    }\n\n    /**\n     * Get the fill style for the text.\n     * @return {import(\"./Fill.js\").default} Fill style.\n     * @api\n     */\n  }, {\n    key: \"getFill\",\n    value: function getFill() {\n      return this.fill_;\n    }\n\n    /**\n     * Determine whether the text rotates with the map.\n     * @return {boolean|undefined} Rotate with map.\n     * @api\n     */\n  }, {\n    key: \"getRotateWithView\",\n    value: function getRotateWithView() {\n      return this.rotateWithView_;\n    }\n\n    /**\n     * Get the text rotation.\n     * @return {number|undefined} Rotation.\n     * @api\n     */\n  }, {\n    key: \"getRotation\",\n    value: function getRotation() {\n      return this.rotation_;\n    }\n\n    /**\n     * Get the text scale.\n     * @return {number|import(\"../size.js\").Size|undefined} Scale.\n     * @api\n     */\n  }, {\n    key: \"getScale\",\n    value: function getScale() {\n      return this.scale_;\n    }\n\n    /**\n     * Get the symbolizer scale array.\n     * @return {import(\"../size.js\").Size} Scale array.\n     */\n  }, {\n    key: \"getScaleArray\",\n    value: function getScaleArray() {\n      return this.scaleArray_;\n    }\n\n    /**\n     * Get the stroke style for the text.\n     * @return {import(\"./Stroke.js\").default} Stroke style.\n     * @api\n     */\n  }, {\n    key: \"getStroke\",\n    value: function getStroke() {\n      return this.stroke_;\n    }\n\n    /**\n     * Get the text to be rendered.\n     * @return {string|Array<string>|undefined} Text.\n     * @api\n     */\n  }, {\n    key: \"getText\",\n    value: function getText() {\n      return this.text_;\n    }\n\n    /**\n     * Get the text alignment.\n     * @return {CanvasTextAlign|undefined} Text align.\n     * @api\n     */\n  }, {\n    key: \"getTextAlign\",\n    value: function getTextAlign() {\n      return this.textAlign_;\n    }\n\n    /**\n     * Get the justification.\n     * @return {TextJustify|undefined} Justification.\n     * @api\n     */\n  }, {\n    key: \"getJustify\",\n    value: function getJustify() {\n      return this.justify_;\n    }\n\n    /**\n     * Get the text baseline.\n     * @return {CanvasTextBaseline|undefined} Text baseline.\n     * @api\n     */\n  }, {\n    key: \"getTextBaseline\",\n    value: function getTextBaseline() {\n      return this.textBaseline_;\n    }\n\n    /**\n     * Get the background fill style for the text.\n     * @return {import(\"./Fill.js\").default} Fill style.\n     * @api\n     */\n  }, {\n    key: \"getBackgroundFill\",\n    value: function getBackgroundFill() {\n      return this.backgroundFill_;\n    }\n\n    /**\n     * Get the background stroke style for the text.\n     * @return {import(\"./Stroke.js\").default} Stroke style.\n     * @api\n     */\n  }, {\n    key: \"getBackgroundStroke\",\n    value: function getBackgroundStroke() {\n      return this.backgroundStroke_;\n    }\n\n    /**\n     * Get the padding for the text.\n     * @return {Array<number>|null} Padding.\n     * @api\n     */\n  }, {\n    key: \"getPadding\",\n    value: function getPadding() {\n      return this.padding_;\n    }\n\n    /**\n     * Set the `overflow` property.\n     *\n     * @param {boolean} overflow Let text overflow the path that it follows.\n     * @api\n     */\n  }, {\n    key: \"setOverflow\",\n    value: function setOverflow(overflow) {\n      this.overflow_ = overflow;\n    }\n\n    /**\n     * Set the font.\n     *\n     * @param {string|undefined} font Font.\n     * @api\n     */\n  }, {\n    key: \"setFont\",\n    value: function setFont(font) {\n      this.font_ = font;\n    }\n\n    /**\n     * Set the maximum angle between adjacent characters.\n     *\n     * @param {number} maxAngle Angle in radians.\n     * @api\n     */\n  }, {\n    key: \"setMaxAngle\",\n    value: function setMaxAngle(maxAngle) {\n      this.maxAngle_ = maxAngle;\n    }\n\n    /**\n     * Set the x offset.\n     *\n     * @param {number} offsetX Horizontal text offset.\n     * @api\n     */\n  }, {\n    key: \"setOffsetX\",\n    value: function setOffsetX(offsetX) {\n      this.offsetX_ = offsetX;\n    }\n\n    /**\n     * Set the y offset.\n     *\n     * @param {number} offsetY Vertical text offset.\n     * @api\n     */\n  }, {\n    key: \"setOffsetY\",\n    value: function setOffsetY(offsetY) {\n      this.offsetY_ = offsetY;\n    }\n\n    /**\n     * Set the text placement.\n     *\n     * @param {TextPlacement} placement Placement.\n     * @api\n     */\n  }, {\n    key: \"setPlacement\",\n    value: function setPlacement(placement) {\n      this.placement_ = placement;\n    }\n\n    /**\n     * Set the repeat interval of the text.\n     * @param {number|undefined} [repeat] Repeat interval in pixels.\n     * @api\n     */\n  }, {\n    key: \"setRepeat\",\n    value: function setRepeat(repeat) {\n      this.repeat_ = repeat;\n    }\n\n    /**\n     * Set whether to rotate the text with the view.\n     *\n     * @param {boolean} rotateWithView Rotate with map.\n     * @api\n     */\n  }, {\n    key: \"setRotateWithView\",\n    value: function setRotateWithView(rotateWithView) {\n      this.rotateWithView_ = rotateWithView;\n    }\n\n    /**\n     * Set the fill.\n     *\n     * @param {import(\"./Fill.js\").default} fill Fill style.\n     * @api\n     */\n  }, {\n    key: \"setFill\",\n    value: function setFill(fill) {\n      this.fill_ = fill;\n    }\n\n    /**\n     * Set the rotation.\n     *\n     * @param {number|undefined} rotation Rotation.\n     * @api\n     */\n  }, {\n    key: \"setRotation\",\n    value: function setRotation(rotation) {\n      this.rotation_ = rotation;\n    }\n\n    /**\n     * Set the scale.\n     *\n     * @param {number|import(\"../size.js\").Size|undefined} scale Scale.\n     * @api\n     */\n  }, {\n    key: \"setScale\",\n    value: function setScale(scale) {\n      this.scale_ = scale;\n      this.scaleArray_ = toSize(scale !== undefined ? scale : 1);\n    }\n\n    /**\n     * Set the stroke.\n     *\n     * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n     * @api\n     */\n  }, {\n    key: \"setStroke\",\n    value: function setStroke(stroke) {\n      this.stroke_ = stroke;\n    }\n\n    /**\n     * Set the text.\n     *\n     * @param {string|Array<string>|undefined} text Text.\n     * @api\n     */\n  }, {\n    key: \"setText\",\n    value: function setText(text) {\n      this.text_ = text;\n    }\n\n    /**\n     * Set the text alignment.\n     *\n     * @param {CanvasTextAlign|undefined} textAlign Text align.\n     * @api\n     */\n  }, {\n    key: \"setTextAlign\",\n    value: function setTextAlign(textAlign) {\n      this.textAlign_ = textAlign;\n    }\n\n    /**\n     * Set the justification.\n     *\n     * @param {TextJustify|undefined} justify Justification.\n     * @api\n     */\n  }, {\n    key: \"setJustify\",\n    value: function setJustify(justify) {\n      this.justify_ = justify;\n    }\n\n    /**\n     * Set the text baseline.\n     *\n     * @param {CanvasTextBaseline|undefined} textBaseline Text baseline.\n     * @api\n     */\n  }, {\n    key: \"setTextBaseline\",\n    value: function setTextBaseline(textBaseline) {\n      this.textBaseline_ = textBaseline;\n    }\n\n    /**\n     * Set the background fill.\n     *\n     * @param {import(\"./Fill.js\").default} fill Fill style.\n     * @api\n     */\n  }, {\n    key: \"setBackgroundFill\",\n    value: function setBackgroundFill(fill) {\n      this.backgroundFill_ = fill;\n    }\n\n    /**\n     * Set the background stroke.\n     *\n     * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n     * @api\n     */\n  }, {\n    key: \"setBackgroundStroke\",\n    value: function setBackgroundStroke(stroke) {\n      this.backgroundStroke_ = stroke;\n    }\n\n    /**\n     * Set the padding (`[top, right, bottom, left]`).\n     *\n     * @param {Array<number>|null} padding Padding.\n     * @api\n     */\n  }, {\n    key: \"setPadding\",\n    value: function setPadding(padding) {\n      this.padding_ = padding;\n    }\n  }]);\n  return Text;\n}();\nexport default Text;","map":{"version":3,"names":["Fill","toSize","DEFAULT_FILL_COLOR","Text","options","_classCallCheck","font_","font","rotation_","rotation","rotateWithView_","rotateWithView","scale_","scale","scaleArray_","undefined","text_","text","textAlign_","textAlign","justify_","justify","repeat_","repeat","textBaseline_","textBaseline","fill_","fill","color","maxAngle_","maxAngle","Math","PI","placement_","placement","overflow_","overflow","stroke_","stroke","offsetX_","offsetX","offsetY_","offsetY","backgroundFill_","backgroundFill","backgroundStroke_","backgroundStroke","padding_","padding","_createClass","key","value","clone","getScale","getFont","getPlacement","getRepeat","getMaxAngle","getOverflow","getRotation","getRotateWithView","Array","isArray","slice","getText","getTextAlign","getJustify","getTextBaseline","getFill","getStroke","getOffsetX","getOffsetY","getBackgroundFill","getBackgroundStroke","getPadding","getScaleArray","setOverflow","setFont","setMaxAngle","setOffsetX","setOffsetY","setPlacement","setRepeat","setRotateWithView","setFill","setRotation","setScale","setStroke","setText","setTextAlign","setJustify","setTextBaseline","setBackgroundFill","setBackgroundStroke","setPadding"],"sources":["/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/ol/style/Text.js"],"sourcesContent":["/**\n * @module ol/style/Text\n */\nimport Fill from './Fill.js';\nimport {toSize} from '../size.js';\n\n/**\n * @typedef {'point' | 'line'} TextPlacement\n * Default text placement is `'point'`. Note that\n * `'line'` requires the underlying geometry to be a {@link module:ol/geom/LineString~LineString},\n * {@link module:ol/geom/Polygon~Polygon}, {@link module:ol/geom/MultiLineString~MultiLineString} or\n * {@link module:ol/geom/MultiPolygon~MultiPolygon}.\n */\n\n/**\n * @typedef {'left' | 'center' | 'right'} TextJustify\n */\n\n/**\n * The default fill color to use if no fill was set at construction time; a\n * blackish `#333`.\n *\n * @const {string}\n */\nconst DEFAULT_FILL_COLOR = '#333';\n\n/**\n * @typedef {Object} Options\n * @property {string} [font] Font style as CSS `font` value, see:\n * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font. Default is `'10px sans-serif'`\n * @property {number} [maxAngle=Math.PI/4] When `placement` is set to `'line'`, allow a maximum angle between adjacent characters.\n * The expected value is in radians, and the default is 45Â° (`Math.PI / 4`).\n * @property {number} [offsetX=0] Horizontal text offset in pixels. A positive will shift the text right.\n * @property {number} [offsetY=0] Vertical text offset in pixels. A positive will shift the text down.\n * @property {boolean} [overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed\n * the width of the polygon at the label position or the length of the path that it follows.\n * @property {TextPlacement} [placement='point'] Text placement.\n * @property {number} [repeat] Repeat interval in pixels. When set, the text will be repeated at this interval. Only available\n * when `placement` is set to `'line'`. Overrides 'textAlign'.\n * @property {number|import(\"../size.js\").Size} [scale] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the text with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {string|Array<string>} [text] Text content or rich text content. For plain text provide a string, which can\n * contain line breaks (`\\n`). For rich text provide an array of text/font tuples. A tuple consists of the text to\n * render and the font to use (or `''` to use the text style's font). A line break has to be a separate tuple (i.e. `'\\n', ''`).\n * **Example:** `['foo', 'bold 10px sans-serif', ' bar', 'italic 10px sans-serif', ' baz', '']` will yield \"**foo** *bar* baz\".\n * **Note:** Rich text is not supported for the immediate rendering API.\n * @property {CanvasTextAlign} [textAlign] Text alignment. Possible values: `'left'`, `'right'`, `'center'`, `'end'` or `'start'`.\n * Default is `'center'` for `placement: 'point'`. For `placement: 'line'`, the default is to let the renderer choose a\n * placement where `maxAngle` is not exceeded.\n * @property {TextJustify} [justify] Text justification within the text box.\n * If not set, text is justified towards the `textAlign` anchor.\n * Otherwise, use options `'left'`, `'center'`, or `'right'` to justify the text within the text box.\n * **Note:** `justify` is ignored for immediate rendering and also for `placement: 'line'`.\n * @property {CanvasTextBaseline} [textBaseline='middle'] Text base line. Possible values: `'bottom'`, `'top'`, `'middle'`, `'alphabetic'`,\n * `'hanging'`, `'ideographic'`.\n * @property {import(\"./Fill.js\").default} [fill] Fill style. If none is provided, we'll use a dark fill-style (#333).\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Fill.js\").default} [backgroundFill] Fill style for the text background when `placement` is\n * `'point'`. Default is no fill.\n * @property {import(\"./Stroke.js\").default} [backgroundStroke] Stroke style for the text background  when `placement`\n * is `'point'`. Default is no stroke.\n * @property {Array<number>} [padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of\n * values in the array is `[top, right, bottom, left]`.\n */\n\n/**\n * @classdesc\n * Set text style for vector features.\n * @api\n */\nclass Text {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.font_ = options.font;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.rotation_ = options.rotation;\n\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    this.rotateWithView_ = options.rotateWithView;\n\n    /**\n     * @private\n     * @type {number|import(\"../size.js\").Size|undefined}\n     */\n    this.scale_ = options.scale;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.scaleArray_ = toSize(options.scale !== undefined ? options.scale : 1);\n\n    /**\n     * @private\n     * @type {string|Array<string>|undefined}\n     */\n    this.text_ = options.text;\n\n    /**\n     * @private\n     * @type {CanvasTextAlign|undefined}\n     */\n    this.textAlign_ = options.textAlign;\n\n    /**\n     * @private\n     * @type {TextJustify|undefined}\n     */\n    this.justify_ = options.justify;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.repeat_ = options.repeat;\n\n    /**\n     * @private\n     * @type {CanvasTextBaseline|undefined}\n     */\n    this.textBaseline_ = options.textBaseline;\n\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n    this.fill_ =\n      options.fill !== undefined\n        ? options.fill\n        : new Fill({color: DEFAULT_FILL_COLOR});\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxAngle_ =\n      options.maxAngle !== undefined ? options.maxAngle : Math.PI / 4;\n\n    /**\n     * @private\n     * @type {TextPlacement}\n     */\n    this.placement_ =\n      options.placement !== undefined ? options.placement : 'point';\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overflow_ = !!options.overflow;\n\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.offsetX_ = options.offsetX !== undefined ? options.offsetX : 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.offsetY_ = options.offsetY !== undefined ? options.offsetY : 0;\n\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n    this.backgroundFill_ = options.backgroundFill\n      ? options.backgroundFill\n      : null;\n\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n    this.backgroundStroke_ = options.backgroundStroke\n      ? options.backgroundStroke\n      : null;\n\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n    this.padding_ = options.padding === undefined ? null : options.padding;\n  }\n\n  /**\n   * Clones the style.\n   * @return {Text} The cloned style.\n   * @api\n   */\n  clone() {\n    const scale = this.getScale();\n    return new Text({\n      font: this.getFont(),\n      placement: this.getPlacement(),\n      repeat: this.getRepeat(),\n      maxAngle: this.getMaxAngle(),\n      overflow: this.getOverflow(),\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      text: this.getText(),\n      textAlign: this.getTextAlign(),\n      justify: this.getJustify(),\n      textBaseline: this.getTextBaseline(),\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      offsetX: this.getOffsetX(),\n      offsetY: this.getOffsetY(),\n      backgroundFill: this.getBackgroundFill()\n        ? this.getBackgroundFill().clone()\n        : undefined,\n      backgroundStroke: this.getBackgroundStroke()\n        ? this.getBackgroundStroke().clone()\n        : undefined,\n      padding: this.getPadding() || undefined,\n    });\n  }\n\n  /**\n   * Get the `overflow` configuration.\n   * @return {boolean} Let text overflow the length of the path they follow.\n   * @api\n   */\n  getOverflow() {\n    return this.overflow_;\n  }\n\n  /**\n   * Get the font name.\n   * @return {string|undefined} Font.\n   * @api\n   */\n  getFont() {\n    return this.font_;\n  }\n\n  /**\n   * Get the maximum angle between adjacent characters.\n   * @return {number} Angle in radians.\n   * @api\n   */\n  getMaxAngle() {\n    return this.maxAngle_;\n  }\n\n  /**\n   * Get the label placement.\n   * @return {TextPlacement} Text placement.\n   * @api\n   */\n  getPlacement() {\n    return this.placement_;\n  }\n\n  /**\n   * Get the repeat interval of the text.\n   * @return {number|undefined} Repeat interval in pixels.\n   * @api\n   */\n  getRepeat() {\n    return this.repeat_;\n  }\n\n  /**\n   * Get the x-offset for the text.\n   * @return {number} Horizontal text offset.\n   * @api\n   */\n  getOffsetX() {\n    return this.offsetX_;\n  }\n\n  /**\n   * Get the y-offset for the text.\n   * @return {number} Vertical text offset.\n   * @api\n   */\n  getOffsetY() {\n    return this.offsetY_;\n  }\n\n  /**\n   * Get the fill style for the text.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n  getFill() {\n    return this.fill_;\n  }\n\n  /**\n   * Determine whether the text rotates with the map.\n   * @return {boolean|undefined} Rotate with map.\n   * @api\n   */\n  getRotateWithView() {\n    return this.rotateWithView_;\n  }\n\n  /**\n   * Get the text rotation.\n   * @return {number|undefined} Rotation.\n   * @api\n   */\n  getRotation() {\n    return this.rotation_;\n  }\n\n  /**\n   * Get the text scale.\n   * @return {number|import(\"../size.js\").Size|undefined} Scale.\n   * @api\n   */\n  getScale() {\n    return this.scale_;\n  }\n\n  /**\n   * Get the symbolizer scale array.\n   * @return {import(\"../size.js\").Size} Scale array.\n   */\n  getScaleArray() {\n    return this.scaleArray_;\n  }\n\n  /**\n   * Get the stroke style for the text.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n  getStroke() {\n    return this.stroke_;\n  }\n\n  /**\n   * Get the text to be rendered.\n   * @return {string|Array<string>|undefined} Text.\n   * @api\n   */\n  getText() {\n    return this.text_;\n  }\n\n  /**\n   * Get the text alignment.\n   * @return {CanvasTextAlign|undefined} Text align.\n   * @api\n   */\n  getTextAlign() {\n    return this.textAlign_;\n  }\n\n  /**\n   * Get the justification.\n   * @return {TextJustify|undefined} Justification.\n   * @api\n   */\n  getJustify() {\n    return this.justify_;\n  }\n\n  /**\n   * Get the text baseline.\n   * @return {CanvasTextBaseline|undefined} Text baseline.\n   * @api\n   */\n  getTextBaseline() {\n    return this.textBaseline_;\n  }\n\n  /**\n   * Get the background fill style for the text.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n  getBackgroundFill() {\n    return this.backgroundFill_;\n  }\n\n  /**\n   * Get the background stroke style for the text.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n  getBackgroundStroke() {\n    return this.backgroundStroke_;\n  }\n\n  /**\n   * Get the padding for the text.\n   * @return {Array<number>|null} Padding.\n   * @api\n   */\n  getPadding() {\n    return this.padding_;\n  }\n\n  /**\n   * Set the `overflow` property.\n   *\n   * @param {boolean} overflow Let text overflow the path that it follows.\n   * @api\n   */\n  setOverflow(overflow) {\n    this.overflow_ = overflow;\n  }\n\n  /**\n   * Set the font.\n   *\n   * @param {string|undefined} font Font.\n   * @api\n   */\n  setFont(font) {\n    this.font_ = font;\n  }\n\n  /**\n   * Set the maximum angle between adjacent characters.\n   *\n   * @param {number} maxAngle Angle in radians.\n   * @api\n   */\n  setMaxAngle(maxAngle) {\n    this.maxAngle_ = maxAngle;\n  }\n\n  /**\n   * Set the x offset.\n   *\n   * @param {number} offsetX Horizontal text offset.\n   * @api\n   */\n  setOffsetX(offsetX) {\n    this.offsetX_ = offsetX;\n  }\n\n  /**\n   * Set the y offset.\n   *\n   * @param {number} offsetY Vertical text offset.\n   * @api\n   */\n  setOffsetY(offsetY) {\n    this.offsetY_ = offsetY;\n  }\n\n  /**\n   * Set the text placement.\n   *\n   * @param {TextPlacement} placement Placement.\n   * @api\n   */\n  setPlacement(placement) {\n    this.placement_ = placement;\n  }\n\n  /**\n   * Set the repeat interval of the text.\n   * @param {number|undefined} [repeat] Repeat interval in pixels.\n   * @api\n   */\n  setRepeat(repeat) {\n    this.repeat_ = repeat;\n  }\n\n  /**\n   * Set whether to rotate the text with the view.\n   *\n   * @param {boolean} rotateWithView Rotate with map.\n   * @api\n   */\n  setRotateWithView(rotateWithView) {\n    this.rotateWithView_ = rotateWithView;\n  }\n\n  /**\n   * Set the fill.\n   *\n   * @param {import(\"./Fill.js\").default} fill Fill style.\n   * @api\n   */\n  setFill(fill) {\n    this.fill_ = fill;\n  }\n\n  /**\n   * Set the rotation.\n   *\n   * @param {number|undefined} rotation Rotation.\n   * @api\n   */\n  setRotation(rotation) {\n    this.rotation_ = rotation;\n  }\n\n  /**\n   * Set the scale.\n   *\n   * @param {number|import(\"../size.js\").Size|undefined} scale Scale.\n   * @api\n   */\n  setScale(scale) {\n    this.scale_ = scale;\n    this.scaleArray_ = toSize(scale !== undefined ? scale : 1);\n  }\n\n  /**\n   * Set the stroke.\n   *\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n   * @api\n   */\n  setStroke(stroke) {\n    this.stroke_ = stroke;\n  }\n\n  /**\n   * Set the text.\n   *\n   * @param {string|Array<string>|undefined} text Text.\n   * @api\n   */\n  setText(text) {\n    this.text_ = text;\n  }\n\n  /**\n   * Set the text alignment.\n   *\n   * @param {CanvasTextAlign|undefined} textAlign Text align.\n   * @api\n   */\n  setTextAlign(textAlign) {\n    this.textAlign_ = textAlign;\n  }\n\n  /**\n   * Set the justification.\n   *\n   * @param {TextJustify|undefined} justify Justification.\n   * @api\n   */\n  setJustify(justify) {\n    this.justify_ = justify;\n  }\n\n  /**\n   * Set the text baseline.\n   *\n   * @param {CanvasTextBaseline|undefined} textBaseline Text baseline.\n   * @api\n   */\n  setTextBaseline(textBaseline) {\n    this.textBaseline_ = textBaseline;\n  }\n\n  /**\n   * Set the background fill.\n   *\n   * @param {import(\"./Fill.js\").default} fill Fill style.\n   * @api\n   */\n  setBackgroundFill(fill) {\n    this.backgroundFill_ = fill;\n  }\n\n  /**\n   * Set the background stroke.\n   *\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n   * @api\n   */\n  setBackgroundStroke(stroke) {\n    this.backgroundStroke_ = stroke;\n  }\n\n  /**\n   * Set the padding (`[top, right, bottom, left]`).\n   *\n   * @param {Array<number>|null} padding Padding.\n   * @api\n   */\n  setPadding(padding) {\n    this.padding_ = padding;\n  }\n}\n\nexport default Text;\n"],"mappings":";;AAAA;AACA;AACA;AACA,OAAOA,IAAI,MAAM,WAAW;AAC5B,SAAQC,MAAM,QAAO,YAAY;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMC,kBAAkB,GAAG,MAAM;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAJA,IAKMC,IAAI;EACR;AACF;AACA;EACE,SAAAA,KAAYC,OAAO,EAAE;IAAAC,eAAA,OAAAF,IAAA;IACnBC,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;;IAEvB;AACJ;AACA;AACA;IACI,IAAI,CAACE,KAAK,GAAGF,OAAO,CAACG,IAAI;;IAEzB;AACJ;AACA;AACA;IACI,IAAI,CAACC,SAAS,GAAGJ,OAAO,CAACK,QAAQ;;IAEjC;AACJ;AACA;AACA;IACI,IAAI,CAACC,eAAe,GAAGN,OAAO,CAACO,cAAc;;IAE7C;AACJ;AACA;AACA;IACI,IAAI,CAACC,MAAM,GAAGR,OAAO,CAACS,KAAK;;IAE3B;AACJ;AACA;AACA;IACI,IAAI,CAACC,WAAW,GAAGb,MAAM,CAACG,OAAO,CAACS,KAAK,KAAKE,SAAS,GAAGX,OAAO,CAACS,KAAK,GAAG,CAAC,CAAC;;IAE1E;AACJ;AACA;AACA;IACI,IAAI,CAACG,KAAK,GAAGZ,OAAO,CAACa,IAAI;;IAEzB;AACJ;AACA;AACA;IACI,IAAI,CAACC,UAAU,GAAGd,OAAO,CAACe,SAAS;;IAEnC;AACJ;AACA;AACA;IACI,IAAI,CAACC,QAAQ,GAAGhB,OAAO,CAACiB,OAAO;;IAE/B;AACJ;AACA;AACA;IACI,IAAI,CAACC,OAAO,GAAGlB,OAAO,CAACmB,MAAM;;IAE7B;AACJ;AACA;AACA;IACI,IA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}