{"ast":null,"code":"import _classCallCheck from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * @module ol/source/Tile\n */\nimport Event from '../events/Event.js';\nimport Source from './Source.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport { abstract } from '../util.js';\nimport { assert } from '../asserts.js';\nimport { equivalent } from '../proj.js';\nimport { getKeyZXY, withinExtentAndZ } from '../tilecoord.js';\nimport { getForProjection as _getTileGridForProjection, wrapX } from '../tilegrid.js';\nimport { scale as scaleSize, toSize } from '../size.js';\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./TileEventType\").TileSourceEventTypes, TileSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     import(\"./TileEventType\").TileSourceEventTypes, Return>} TileSourceOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] CacheSize.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {number} [tilePixelRatio] TilePixelRatio.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {import(\"./Source.js\").State} [state] State.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\n * @property {boolean} [wrapX=false] WrapX.\n * @property {number} [transition] Transition.\n * @property {string} [key] Key.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing images divided into a tile grid.\n * @abstract\n * @api\n */\nvar TileSource = /*#__PURE__*/function (_Source) {\n  _inherits(TileSource, _Source);\n  var _super = _createSuper(TileSource);\n  /**\n   * @param {Options} options SourceTile source options.\n   */\n  function TileSource(options) {\n    var _this;\n    _classCallCheck(this, TileSource);\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      projection: options.projection,\n      state: options.state,\n      wrapX: options.wrapX,\n      interpolate: options.interpolate\n    });\n\n    /***\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this.on;\n\n    /***\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this.once;\n\n    /***\n     * @type {TileSourceOnSignature<void>}\n     */\n    _this.un;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.opaque_ = options.opaque !== undefined ? options.opaque : false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.tilePixelRatio_ = options.tilePixelRatio !== undefined ? options.tilePixelRatio : 1;\n\n    /**\n     * @type {import(\"../tilegrid/TileGrid.js\").default|null}\n     */\n    _this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;\n    var tileSize = [256, 256];\n    if (_this.tileGrid) {\n      toSize(_this.tileGrid.getTileSize(_this.tileGrid.getMinZoom()), tileSize);\n    }\n\n    /**\n     * @protected\n     * @type {import(\"../TileCache.js\").default}\n     */\n    _this.tileCache = new TileCache(options.cacheSize || 0);\n\n    /**\n     * @protected\n     * @type {import(\"../size.js\").Size}\n     */\n    _this.tmpSize = [0, 0];\n\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.key_ = options.key || '';\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").Options}\n     */\n    _this.tileOptions = {\n      transition: options.transition,\n      interpolate: options.interpolate\n    };\n\n    /**\n     * zDirection hint, read by the renderer. Indicates which resolution should be used\n     * by a renderer if the views resolution does not match any resolution of the tile source.\n     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n     * will be used. If -1, the nearest higher resolution will be used.\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\n     */\n    _this.zDirection = options.zDirection ? options.zDirection : 0;\n    return _this;\n  }\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  _createClass(TileSource, [{\n    key: \"canExpireCache\",\n    value: function canExpireCache() {\n      return this.tileCache.canExpireCache();\n    }\n\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @param {!Object<string, boolean>} usedTiles Used tiles.\n     */\n  }, {\n    key: \"expireCache\",\n    value: function expireCache(projection, usedTiles) {\n      var tileCache = this.getTileCacheForProjection(projection);\n      if (tileCache) {\n        tileCache.expireCache(usedTiles);\n      }\n    }\n\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @param {number} z Zoom level.\n     * @param {import(\"../TileRange.js\").default} tileRange Tile range.\n     * @param {function(import(\"../Tile.js\").default):(boolean|void)} callback Called with each\n     *     loaded tile.  If the callback returns `false`, the tile will not be\n     *     considered loaded.\n     * @return {boolean} The tile range is fully covered with loaded tiles.\n     */\n  }, {\n    key: \"forEachLoadedTile\",\n    value: function forEachLoadedTile(projection, z, tileRange, callback) {\n      var tileCache = this.getTileCacheForProjection(projection);\n      if (!tileCache) {\n        return false;\n      }\n      var covered = true;\n      var tile, tileCoordKey, loaded;\n      for (var x = tileRange.minX; x <= tileRange.maxX; ++x) {\n        for (var y = tileRange.minY; y <= tileRange.maxY; ++y) {\n          tileCoordKey = getKeyZXY(z, x, y);\n          loaded = false;\n          if (tileCache.containsKey(tileCoordKey)) {\n            tile = /** @type {!import(\"../Tile.js\").default} */\n            tileCache.get(tileCoordKey);\n            loaded = tile.getState() === TileState.LOADED;\n            if (loaded) {\n              loaded = callback(tile) !== false;\n            }\n          }\n          if (!loaded) {\n            covered = false;\n          }\n        }\n      }\n      return covered;\n    }\n\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {number} Gutter.\n     */\n  }, {\n    key: \"getGutterForProjection\",\n    value: function getGutterForProjection(projection) {\n      return 0;\n    }\n\n    /**\n     * Return the key to be used for all tiles in the source.\n     * @return {string} The key for all tiles.\n     */\n  }, {\n    key: \"getKey\",\n    value: function getKey() {\n      return this.key_;\n    }\n\n    /**\n     * Set the value to be used as the key for all tiles in the source.\n     * @param {string} key The key for tiles.\n     * @protected\n     */\n  }, {\n    key: \"setKey\",\n    value: function setKey(key) {\n      if (this.key_ !== key) {\n        this.key_ = key;\n        this.changed();\n      }\n    }\n\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {boolean} Opaque.\n     */\n  }, {\n    key: \"getOpaque\",\n    value: function getOpaque(projection) {\n      return this.opaque_;\n    }\n\n    /**\n     * @param {import(\"../proj/Projection\").default} [projection] Projection.\n     * @return {Array<number>|null} Resolutions.\n     */\n  }, {\n    key: \"getResolutions\",\n    value: function getResolutions(projection) {\n      var tileGrid = projection ? this.getTileGridForProjection(projection) : this.tileGrid;\n      if (!tileGrid) {\n        return null;\n      }\n      return tileGrid.getResolutions();\n    }\n\n    /**\n     * @abstract\n     * @param {number} z Tile coordinate z.\n     * @param {number} x Tile coordinate x.\n     * @param {number} y Tile coordinate y.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {!import(\"../Tile.js\").default} Tile.\n     */\n  }, {\n    key: \"getTile\",\n    value: function getTile(z, x, y, pixelRatio, projection) {\n      return abstract();\n    }\n\n    /**\n     * Return the tile grid of the tile source.\n     * @return {import(\"../tilegrid/TileGrid.js\").default|null} Tile grid.\n     * @api\n     */\n  }, {\n    key: \"getTileGrid\",\n    value: function getTileGrid() {\n      return this.tileGrid;\n    }\n\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n     */\n  }, {\n    key: \"getTileGridForProjection\",\n    value: function getTileGridForProjection(projection) {\n      if (!this.tileGrid) {\n        return _getTileGridForProjection(projection);\n      }\n      return this.tileGrid;\n    }\n\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {import(\"../TileCache.js\").default} Tile cache.\n     * @protected\n     */\n  }, {\n    key: \"getTileCacheForProjection\",\n    value: function getTileCacheForProjection(projection) {\n      var sourceProjection = this.getProjection();\n      assert(sourceProjection === null || equivalent(sourceProjection, projection), 68 // A VectorTile source can only be rendered if it has a projection compatible with the view projection.\n      );\n\n      return this.tileCache;\n    }\n\n    /**\n     * Get the tile pixel ratio for this source. Subclasses may override this\n     * method, which is meant to return a supported pixel ratio that matches the\n     * provided `pixelRatio` as close as possible.\n     * @param {number} pixelRatio Pixel ratio.\n     * @return {number} Tile pixel ratio.\n     */\n  }, {\n    key: \"getTilePixelRatio\",\n    value: function getTilePixelRatio(pixelRatio) {\n      return this.tilePixelRatio_;\n    }\n\n    /**\n     * @param {number} z Z.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {import(\"../size.js\").Size} Tile size.\n     */\n  }, {\n    key: \"getTilePixelSize\",\n    value: function getTilePixelSize(z, pixelRatio, projection) {\n      var tileGrid = this.getTileGridForProjection(projection);\n      var tilePixelRatio = this.getTilePixelRatio(pixelRatio);\n      var tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);\n      if (tilePixelRatio == 1) {\n        return tileSize;\n      }\n      return scaleSize(tileSize, tilePixelRatio, this.tmpSize);\n    }\n\n    /**\n     * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate\n     * is outside the resolution and extent range of the tile grid, `null` will be\n     * returned.\n     * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n     * @param {import(\"../proj/Projection.js\").default} [projection] Projection.\n     * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate to be passed to the tileUrlFunction or\n     *     null if no tile URL should be created for the passed `tileCoord`.\n     */\n  }, {\n    key: \"getTileCoordForTileUrlFunction\",\n    value: function getTileCoordForTileUrlFunction(tileCoord, projection) {\n      projection = projection !== undefined ? projection : this.getProjection();\n      var tileGrid = this.getTileGridForProjection(projection);\n      if (this.getWrapX() && projection.isGlobal()) {\n        tileCoord = wrapX(tileGrid, tileCoord, projection);\n      }\n      return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;\n    }\n\n    /**\n     * Remove all cached tiles from the source. The next render cycle will fetch new tiles.\n     * @api\n     */\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.tileCache.clear();\n    }\n  }, {\n    key: \"refresh\",\n    value: function refresh() {\n      this.clear();\n      _get(_getPrototypeOf(TileSource.prototype), \"refresh\", this).call(this);\n    }\n\n    /**\n     * Increases the cache size if needed\n     * @param {number} tileCount Minimum number of tiles needed.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     */\n  }, {\n    key: \"updateCacheSize\",\n    value: function updateCacheSize(tileCount, projection) {\n      var tileCache = this.getTileCacheForProjection(projection);\n      if (tileCount > tileCache.highWaterMark) {\n        tileCache.highWaterMark = tileCount;\n      }\n    }\n\n    /**\n     * Marks a tile coord as being used, without triggering a load.\n     * @abstract\n     * @param {number} z Tile coordinate z.\n     * @param {number} x Tile coordinate x.\n     * @param {number} y Tile coordinate y.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     */\n  }, {\n    key: \"useTile\",\n    value: function useTile(z, x, y, projection) {}\n  }]);\n  return TileSource;\n}(Source);\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this\n * type.\n */\nexport var TileSourceEvent = /*#__PURE__*/function (_Event) {\n  _inherits(TileSourceEvent, _Event);\n  var _super2 = _createSuper(TileSourceEvent);\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Tile.js\").default} tile The tile.\n   */\n  function TileSourceEvent(type, tile) {\n    var _this2;\n    _classCallCheck(this, TileSourceEvent);\n    _this2 = _super2.call(this, type);\n\n    /**\n     * The tile related to the event.\n     * @type {import(\"../Tile.js\").default}\n     * @api\n     */\n    _this2.tile = tile;\n    return _this2;\n  }\n  return _createClass(TileSourceEvent);\n}(Event);\nexport default TileSource;","map":{"version":3,"names":["Event","Source","TileCache","TileState","abstract","assert","equivalent","getKeyZXY","withinExtentAndZ","getForProjection","getTileGridForProjection","wrapX","scale","scaleSize","toSize","TileSource","_Source","_inherits","_super","_createSuper","options","_this","_classCallCheck","call","attributions","attributionsCollapsible","projection","state","interpolate","on","once","un","opaque_","opaque","undefined","tilePixelRatio_","tilePixelRatio","tileGrid","tileSize","getTileSize","getMinZoom","tileCache","cacheSize","tmpSize","key_","key","tileOptions","transition","zDirection","_createClass","value","canExpireCache","expireCache","usedTiles","getTileCacheForProjection","forEachLoadedTile","z","tileRange","callback","covered","tile","tileCoordKey","loaded","x","minX","maxX","y","minY","maxY","containsKey","get","getState","LOADED","getGutterForProjection","getKey","setKey","changed","getOpaque","getResolutions","getTile","pixelRatio","getTileGrid","sourceProjection","getProjection","getTilePixelRatio","getTilePixelSize","getTileCoordForTileUrlFunction","tileCoord","getWrapX","isGlobal","clear","refresh","_get","_getPrototypeOf","prototype","updateCacheSize","tileCount","highWaterMark","useTile","TileSourceEvent","_Event","_super2","type","_this2"],"sources":["/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/ol/source/Tile.js"],"sourcesContent":["/**\n * @module ol/source/Tile\n */\nimport Event from '../events/Event.js';\nimport Source from './Source.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport {abstract} from '../util.js';\nimport {assert} from '../asserts.js';\nimport {equivalent} from '../proj.js';\nimport {getKeyZXY, withinExtentAndZ} from '../tilecoord.js';\nimport {\n  getForProjection as getTileGridForProjection,\n  wrapX,\n} from '../tilegrid.js';\nimport {scale as scaleSize, toSize} from '../size.js';\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./TileEventType\").TileSourceEventTypes, TileSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     import(\"./TileEventType\").TileSourceEventTypes, Return>} TileSourceOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] CacheSize.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {number} [tilePixelRatio] TilePixelRatio.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {import(\"./Source.js\").State} [state] State.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\n * @property {boolean} [wrapX=false] WrapX.\n * @property {number} [transition] Transition.\n * @property {string} [key] Key.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing images divided into a tile grid.\n * @abstract\n * @api\n */\nclass TileSource extends Source {\n  /**\n   * @param {Options} options SourceTile source options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      projection: options.projection,\n      state: options.state,\n      wrapX: options.wrapX,\n      interpolate: options.interpolate,\n    });\n\n    /***\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {TileSourceOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.opaque_ = options.opaque !== undefined ? options.opaque : false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.tilePixelRatio_ =\n      options.tilePixelRatio !== undefined ? options.tilePixelRatio : 1;\n\n    /**\n     * @type {import(\"../tilegrid/TileGrid.js\").default|null}\n     */\n    this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;\n\n    const tileSize = [256, 256];\n    if (this.tileGrid) {\n      toSize(this.tileGrid.getTileSize(this.tileGrid.getMinZoom()), tileSize);\n    }\n\n    /**\n     * @protected\n     * @type {import(\"../TileCache.js\").default}\n     */\n    this.tileCache = new TileCache(options.cacheSize || 0);\n\n    /**\n     * @protected\n     * @type {import(\"../size.js\").Size}\n     */\n    this.tmpSize = [0, 0];\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.key_ = options.key || '';\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").Options}\n     */\n    this.tileOptions = {\n      transition: options.transition,\n      interpolate: options.interpolate,\n    };\n\n    /**\n     * zDirection hint, read by the renderer. Indicates which resolution should be used\n     * by a renderer if the views resolution does not match any resolution of the tile source.\n     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n     * will be used. If -1, the nearest higher resolution will be used.\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\n     */\n    this.zDirection = options.zDirection ? options.zDirection : 0;\n  }\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  canExpireCache() {\n    return this.tileCache.canExpireCache();\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\n   */\n  expireCache(projection, usedTiles) {\n    const tileCache = this.getTileCacheForProjection(projection);\n    if (tileCache) {\n      tileCache.expireCache(usedTiles);\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {number} z Zoom level.\n   * @param {import(\"../TileRange.js\").default} tileRange Tile range.\n   * @param {function(import(\"../Tile.js\").default):(boolean|void)} callback Called with each\n   *     loaded tile.  If the callback returns `false`, the tile will not be\n   *     considered loaded.\n   * @return {boolean} The tile range is fully covered with loaded tiles.\n   */\n  forEachLoadedTile(projection, z, tileRange, callback) {\n    const tileCache = this.getTileCacheForProjection(projection);\n    if (!tileCache) {\n      return false;\n    }\n\n    let covered = true;\n    let tile, tileCoordKey, loaded;\n    for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {\n      for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {\n        tileCoordKey = getKeyZXY(z, x, y);\n        loaded = false;\n        if (tileCache.containsKey(tileCoordKey)) {\n          tile = /** @type {!import(\"../Tile.js\").default} */ (\n            tileCache.get(tileCoordKey)\n          );\n          loaded = tile.getState() === TileState.LOADED;\n          if (loaded) {\n            loaded = callback(tile) !== false;\n          }\n        }\n        if (!loaded) {\n          covered = false;\n        }\n      }\n    }\n    return covered;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   */\n  getGutterForProjection(projection) {\n    return 0;\n  }\n\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   */\n  getKey() {\n    return this.key_;\n  }\n\n  /**\n   * Set the value to be used as the key for all tiles in the source.\n   * @param {string} key The key for tiles.\n   * @protected\n   */\n  setKey(key) {\n    if (this.key_ !== key) {\n      this.key_ = key;\n      this.changed();\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {boolean} Opaque.\n   */\n  getOpaque(projection) {\n    return this.opaque_;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection\").default} [projection] Projection.\n   * @return {Array<number>|null} Resolutions.\n   */\n  getResolutions(projection) {\n    const tileGrid = projection\n      ? this.getTileGridForProjection(projection)\n      : this.tileGrid;\n    if (!tileGrid) {\n      return null;\n    }\n    return tileGrid.getResolutions();\n  }\n\n  /**\n   * @abstract\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../Tile.js\").default} Tile.\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    return abstract();\n  }\n\n  /**\n   * Return the tile grid of the tile source.\n   * @return {import(\"../tilegrid/TileGrid.js\").default|null} Tile grid.\n   * @api\n   */\n  getTileGrid() {\n    return this.tileGrid;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   */\n  getTileGridForProjection(projection) {\n    if (!this.tileGrid) {\n      return getTileGridForProjection(projection);\n    }\n    return this.tileGrid;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../TileCache.js\").default} Tile cache.\n   * @protected\n   */\n  getTileCacheForProjection(projection) {\n    const sourceProjection = this.getProjection();\n    assert(\n      sourceProjection === null || equivalent(sourceProjection, projection),\n      68 // A VectorTile source can only be rendered if it has a projection compatible with the view projection.\n    );\n    return this.tileCache;\n  }\n\n  /**\n   * Get the tile pixel ratio for this source. Subclasses may override this\n   * method, which is meant to return a supported pixel ratio that matches the\n   * provided `pixelRatio` as close as possible.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n  getTilePixelRatio(pixelRatio) {\n    return this.tilePixelRatio_;\n  }\n\n  /**\n   * @param {number} z Z.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../size.js\").Size} Tile size.\n   */\n  getTilePixelSize(z, pixelRatio, projection) {\n    const tileGrid = this.getTileGridForProjection(projection);\n    const tilePixelRatio = this.getTilePixelRatio(pixelRatio);\n    const tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);\n    if (tilePixelRatio == 1) {\n      return tileSize;\n    }\n    return scaleSize(tileSize, tilePixelRatio, this.tmpSize);\n  }\n\n  /**\n   * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate\n   * is outside the resolution and extent range of the tile grid, `null` will be\n   * returned.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../proj/Projection.js\").default} [projection] Projection.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate to be passed to the tileUrlFunction or\n   *     null if no tile URL should be created for the passed `tileCoord`.\n   */\n  getTileCoordForTileUrlFunction(tileCoord, projection) {\n    projection = projection !== undefined ? projection : this.getProjection();\n    const tileGrid = this.getTileGridForProjection(projection);\n    if (this.getWrapX() && projection.isGlobal()) {\n      tileCoord = wrapX(tileGrid, tileCoord, projection);\n    }\n    return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;\n  }\n\n  /**\n   * Remove all cached tiles from the source. The next render cycle will fetch new tiles.\n   * @api\n   */\n  clear() {\n    this.tileCache.clear();\n  }\n\n  refresh() {\n    this.clear();\n    super.refresh();\n  }\n\n  /**\n   * Increases the cache size if needed\n   * @param {number} tileCount Minimum number of tiles needed.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  updateCacheSize(tileCount, projection) {\n    const tileCache = this.getTileCacheForProjection(projection);\n    if (tileCount > tileCache.highWaterMark) {\n      tileCache.highWaterMark = tileCount;\n    }\n  }\n\n  /**\n   * Marks a tile coord as being used, without triggering a load.\n   * @abstract\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  useTile(z, x, y, projection) {}\n}\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this\n * type.\n */\nexport class TileSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Tile.js\").default} tile The tile.\n   */\n  constructor(type, tile) {\n    super(type);\n\n    /**\n     * The tile related to the event.\n     * @type {import(\"../Tile.js\").default}\n     * @api\n     */\n    this.tile = tile;\n  }\n}\n\nexport default TileSource;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}