{"ast":null,"code":"import _classCallCheck from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * @module ol/style/RegularShape\n */\n\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport { asArray } from '../color.js';\nimport { asColorLike } from '../colorlike.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { defaultFillStyle, defaultLineJoin, defaultLineWidth, defaultMiterLimit, defaultStrokeStyle } from '../render/canvas.js';\n\n/**\n * Specify radius for regular polygons, or radius1 and radius2 for stars.\n * @typedef {Object} Options\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points\n * is the number of sides.\n * @property {number} [radius] Radius of a regular polygon.\n * @property {number} [radius1] First radius of a star. Ignored if radius is set.\n * @property {number} [radius2] Second radius of a star.\n * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's points facing up.\n * @property {Array<number>} [displacement=[0, 0]] Displacement of the shape in pixels.\n * Positive values will shift the shape right and up.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. Unless two dimensional scaling is required a better\n * result may be obtained with appropriate settings for `radius`, `radius1` and `radius2`.\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [declutterMode] Declutter mode.\n */\n\n/**\n * @typedef {Object} RenderOptions\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle] StrokeStyle.\n * @property {number} strokeWidth StrokeWidth.\n * @property {number} size Size.\n * @property {Array<number>|null} lineDash LineDash.\n * @property {number} lineDashOffset LineDashOffset.\n * @property {CanvasLineJoin} lineJoin LineJoin.\n * @property {number} miterLimit MiterLimit.\n */\n\n/**\n * @classdesc\n * Set regular shape style for vector features. The resulting shape will be\n * a regular polygon when `radius` is provided, or a star when `radius1` and\n * `radius2` are provided.\n * @api\n */\nvar RegularShape = /*#__PURE__*/function (_ImageStyle) {\n  _inherits(RegularShape, _ImageStyle);\n  var _super = _createSuper(RegularShape);\n  /**\n   * @param {Options} options Options.\n   */\n  function RegularShape(options) {\n    var _this;\n    _classCallCheck(this, RegularShape);\n    /**\n     * @type {boolean}\n     */\n    var rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;\n    _this = _super.call(this, {\n      opacity: 1,\n      rotateWithView: rotateWithView,\n      rotation: options.rotation !== undefined ? options.rotation : 0,\n      scale: options.scale !== undefined ? options.scale : 1,\n      displacement: options.displacement !== undefined ? options.displacement : [0, 0],\n      declutterMode: options.declutterMode\n    });\n\n    /**\n     * @private\n     * @type {Object<number, HTMLCanvasElement>}\n     */\n    _this.canvas_ = undefined;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    _this.hitDetectionCanvas_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n    _this.fill_ = options.fill !== undefined ? options.fill : null;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    _this.origin_ = [0, 0];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.points_ = options.points;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    _this.radius_ = options.radius !== undefined ? options.radius : options.radius1;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    _this.radius2_ = options.radius2;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.angle_ = options.angle !== undefined ? options.angle : 0;\n\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n    _this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    _this.size_ = null;\n\n    /**\n     * @private\n     * @type {RenderOptions}\n     */\n    _this.renderOptions_ = null;\n    _this.render();\n    return _this;\n  }\n\n  /**\n   * Clones the style.\n   * @return {RegularShape} The cloned style.\n   * @api\n   */\n  _createClass(RegularShape, [{\n    key: \"clone\",\n    value: function clone() {\n      var scale = this.getScale();\n      var style = new RegularShape({\n        fill: this.getFill() ? this.getFill().clone() : undefined,\n        points: this.getPoints(),\n        radius: this.getRadius(),\n        radius2: this.getRadius2(),\n        angle: this.getAngle(),\n        stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n        rotation: this.getRotation(),\n        rotateWithView: this.getRotateWithView(),\n        scale: Array.isArray(scale) ? scale.slice() : scale,\n        displacement: this.getDisplacement().slice(),\n        declutterMode: this.getDeclutterMode()\n      });\n      style.setOpacity(this.getOpacity());\n      return style;\n    }\n\n    /**\n     * Get the anchor point in pixels. The anchor determines the center point for the\n     * symbolizer.\n     * @return {Array<number>} Anchor.\n     * @api\n     */\n  }, {\n    key: \"getAnchor\",\n    value: function getAnchor() {\n      var size = this.size_;\n      if (!size) {\n        return null;\n      }\n      var displacement = this.getDisplacement();\n      var scale = this.getScaleArray();\n      // anchor is scaled by renderer but displacement should not be scaled\n      // so divide by scale here\n      return [size[0] / 2 - displacement[0] / scale[0], size[1] / 2 + displacement[1] / scale[1]];\n    }\n\n    /**\n     * Get the angle used in generating the shape.\n     * @return {number} Shape's rotation in radians.\n     * @api\n     */\n  }, {\n    key: \"getAngle\",\n    value: function getAngle() {\n      return this.angle_;\n    }\n\n    /**\n     * Get the fill style for the shape.\n     * @return {import(\"./Fill.js\").default} Fill style.\n     * @api\n     */\n  }, {\n    key: \"getFill\",\n    value: function getFill() {\n      return this.fill_;\n    }\n\n    /**\n     * Set the fill style.\n     * @param {import(\"./Fill.js\").default} fill Fill style.\n     * @api\n     */\n  }, {\n    key: \"setFill\",\n    value: function setFill(fill) {\n      this.fill_ = fill;\n      this.render();\n    }\n\n    /**\n     * @return {HTMLCanvasElement} Image element.\n     */\n  }, {\n    key: \"getHitDetectionImage\",\n    value: function getHitDetectionImage() {\n      if (!this.hitDetectionCanvas_) {\n        this.createHitDetectionCanvas_(this.renderOptions_);\n      }\n      return this.hitDetectionCanvas_;\n    }\n\n    /**\n     * Get the image icon.\n     * @param {number} pixelRatio Pixel ratio.\n     * @return {HTMLCanvasElement} Image or Canvas element.\n     * @api\n     */\n  }, {\n    key: \"getImage\",\n    value: function getImage(pixelRatio) {\n      var image = this.canvas_[pixelRatio];\n      if (!image) {\n        var renderOptions = this.renderOptions_;\n        var context = createCanvasContext2D(renderOptions.size * pixelRatio, renderOptions.size * pixelRatio);\n        this.draw_(renderOptions, context, pixelRatio);\n        image = context.canvas;\n        this.canvas_[pixelRatio] = image;\n      }\n      return image;\n    }\n\n    /**\n     * Get the image pixel ratio.\n     * @param {number} pixelRatio Pixel ratio.\n     * @return {number} Pixel ratio.\n     */\n  }, {\n    key: \"getPixelRatio\",\n    value: function getPixelRatio(pixelRatio) {\n      return pixelRatio;\n    }\n\n    /**\n     * @return {import(\"../size.js\").Size} Image size.\n     */\n  }, {\n    key: \"getImageSize\",\n    value: function getImageSize() {\n      return this.size_;\n    }\n\n    /**\n     * @return {import(\"../ImageState.js\").default} Image state.\n     */\n  }, {\n    key: \"getImageState\",\n    value: function getImageState() {\n      return ImageState.LOADED;\n    }\n\n    /**\n     * Get the origin of the symbolizer.\n     * @return {Array<number>} Origin.\n     * @api\n     */\n  }, {\n    key: \"getOrigin\",\n    value: function getOrigin() {\n      return this.origin_;\n    }\n\n    /**\n     * Get the number of points for generating the shape.\n     * @return {number} Number of points for stars and regular polygons.\n     * @api\n     */\n  }, {\n    key: \"getPoints\",\n    value: function getPoints() {\n      return this.points_;\n    }\n\n    /**\n     * Get the (primary) radius for the shape.\n     * @return {number} Radius.\n     * @api\n     */\n  }, {\n    key: \"getRadius\",\n    value: function getRadius() {\n      return this.radius_;\n    }\n\n    /**\n     * Get the secondary radius for the shape.\n     * @return {number|undefined} Radius2.\n     * @api\n     */\n  }, {\n    key: \"getRadius2\",\n    value: function getRadius2() {\n      return this.radius2_;\n    }\n\n    /**\n     * Get the size of the symbolizer (in pixels).\n     * @return {import(\"../size.js\").Size} Size.\n     * @api\n     */\n  }, {\n    key: \"getSize\",\n    value: function getSize() {\n      return this.size_;\n    }\n\n    /**\n     * Get the stroke style for the shape.\n     * @return {import(\"./Stroke.js\").default} Stroke style.\n     * @api\n     */\n  }, {\n    key: \"getStroke\",\n    value: function getStroke() {\n      return this.stroke_;\n    }\n\n    /**\n     * Set the stroke style.\n     * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n     * @api\n     */\n  }, {\n    key: \"setStroke\",\n    value: function setStroke(stroke) {\n      this.stroke_ = stroke;\n      this.render();\n    }\n\n    /**\n     * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n     */\n  }, {\n    key: \"listenImageChange\",\n    value: function listenImageChange(listener) {}\n\n    /**\n     * Load not yet loaded URI.\n     */\n  }, {\n    key: \"load\",\n    value: function load() {}\n\n    /**\n     * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n     */\n  }, {\n    key: \"unlistenImageChange\",\n    value: function unlistenImageChange(listener) {}\n\n    /**\n     * Calculate additional canvas size needed for the miter.\n     * @param {string} lineJoin Line join\n     * @param {number} strokeWidth Stroke width\n     * @param {number} miterLimit Miter limit\n     * @return {number} Additional canvas size needed\n     * @private\n     */\n  }, {\n    key: \"calculateLineJoinSize_\",\n    value: function calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit) {\n      if (strokeWidth === 0 || this.points_ === Infinity || lineJoin !== 'bevel' && lineJoin !== 'miter') {\n        return strokeWidth;\n      }\n      // m  | ^\n      // i  | |\\                  .\n      // t >|  #\\\n      // e  | |\\ \\              .\n      // r      \\s\\\n      //      |  \\t\\          .                 .\n      //          \\r\\                      .   .\n      //      |    \\o\\      .          .  . . .\n      //          e \\k\\            .  .    . .\n      //      |      \\e\\  .    .  .       . .\n      //       d      \\ \\  .  .          . .\n      //      | _ _a_ _\\#  .            . .\n      //   r1          / `             . .\n      //      |                       . .\n      //       b     /               . .\n      //      |                     . .\n      //           / r2            . .\n      //      |                        .   .\n      //         /                           .   .\n      //      |α                                   .   .\n      //       /                                         .   .\n      //      ° center\n      var r1 = this.radius_;\n      var r2 = this.radius2_ === undefined ? r1 : this.radius2_;\n      if (r1 < r2) {\n        var tmp = r1;\n        r1 = r2;\n        r2 = tmp;\n      }\n      var points = this.radius2_ === undefined ? this.points_ : this.points_ * 2;\n      var alpha = 2 * Math.PI / points;\n      var a = r2 * Math.sin(alpha);\n      var b = Math.sqrt(r2 * r2 - a * a);\n      var d = r1 - b;\n      var e = Math.sqrt(a * a + d * d);\n      var miterRatio = e / a;\n      if (lineJoin === 'miter' && miterRatio <= miterLimit) {\n        return miterRatio * strokeWidth;\n      }\n      // Calculate the distnce from center to the stroke corner where\n      // it was cut short because of the miter limit.\n      //              l\n      //        ----+---- <= distance from center to here is maxr\n      //       /####|k ##\\\n      //      /#####^#####\\\n      //     /#### /+\\# s #\\\n      //    /### h/+++\\# t #\\\n      //   /### t/+++++\\# r #\\\n      //  /### a/+++++++\\# o #\\\n      // /### p/++ fill +\\# k #\\\n      ///#### /+++++^+++++\\# e #\\\n      //#####/+++++/+\\+++++\\#####\\\n      var k = strokeWidth / 2 / miterRatio;\n      var l = strokeWidth / 2 * (d / e);\n      var maxr = Math.sqrt((r1 + k) * (r1 + k) + l * l);\n      var bevelAdd = maxr - r1;\n      if (this.radius2_ === undefined || lineJoin === 'bevel') {\n        return bevelAdd * 2;\n      }\n      // If outer miter is over the miter limit the inner miter may reach through the\n      // center and be longer than the bevel, same calculation as above but swap r1 / r2.\n      var aa = r1 * Math.sin(alpha);\n      var bb = Math.sqrt(r1 * r1 - aa * aa);\n      var dd = r2 - bb;\n      var ee = Math.sqrt(aa * aa + dd * dd);\n      var innerMiterRatio = ee / aa;\n      if (innerMiterRatio <= miterLimit) {\n        var innerLength = innerMiterRatio * strokeWidth / 2 - r2 - r1;\n        return 2 * Math.max(bevelAdd, innerLength);\n      }\n      return bevelAdd * 2;\n    }\n\n    /**\n     * @return {RenderOptions}  The render options\n     * @protected\n     */\n  }, {\n    key: \"createRenderOptions\",\n    value: function createRenderOptions() {\n      var lineJoin = defaultLineJoin;\n      var miterLimit = 0;\n      var lineDash = null;\n      var lineDashOffset = 0;\n      var strokeStyle;\n      var strokeWidth = 0;\n      if (this.stroke_) {\n        strokeStyle = this.stroke_.getColor();\n        if (strokeStyle === null) {\n          strokeStyle = defaultStrokeStyle;\n        }\n        strokeStyle = asColorLike(strokeStyle);\n        strokeWidth = this.stroke_.getWidth();\n        if (strokeWidth === undefined) {\n          strokeWidth = defaultLineWidth;\n        }\n        lineDash = this.stroke_.getLineDash();\n        lineDashOffset = this.stroke_.getLineDashOffset();\n        lineJoin = this.stroke_.getLineJoin();\n        if (lineJoin === undefined) {\n          lineJoin = defaultLineJoin;\n        }\n        miterLimit = this.stroke_.getMiterLimit();\n        if (miterLimit === undefined) {\n          miterLimit = defaultMiterLimit;\n        }\n      }\n      var add = this.calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit);\n      var maxRadius = Math.max(this.radius_, this.radius2_ || 0);\n      var size = Math.ceil(2 * maxRadius + add);\n      return {\n        strokeStyle: strokeStyle,\n        strokeWidth: strokeWidth,\n        size: size,\n        lineDash: lineDash,\n        lineDashOffset: lineDashOffset,\n        lineJoin: lineJoin,\n        miterLimit: miterLimit\n      };\n    }\n\n    /**\n     * @protected\n     */\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.renderOptions_ = this.createRenderOptions();\n      var size = this.renderOptions_.size;\n      this.canvas_ = {};\n      this.size_ = [size, size];\n    }\n\n    /**\n     * @private\n     * @param {RenderOptions} renderOptions Render options.\n     * @param {CanvasRenderingContext2D} context The rendering context.\n     * @param {number} pixelRatio The pixel ratio.\n     */\n  }, {\n    key: \"draw_\",\n    value: function draw_(renderOptions, context, pixelRatio) {\n      context.scale(pixelRatio, pixelRatio);\n      // set origin to canvas center\n      context.translate(renderOptions.size / 2, renderOptions.size / 2);\n      this.createPath_(context);\n      if (this.fill_) {\n        var color = this.fill_.getColor();\n        if (color === null) {\n          color = defaultFillStyle;\n        }\n        context.fillStyle = asColorLike(color);\n        context.fill();\n      }\n      if (this.stroke_) {\n        context.strokeStyle = renderOptions.strokeStyle;\n        context.lineWidth = renderOptions.strokeWidth;\n        if (renderOptions.lineDash) {\n          context.setLineDash(renderOptions.lineDash);\n          context.lineDashOffset = renderOptions.lineDashOffset;\n        }\n        context.lineJoin = renderOptions.lineJoin;\n        context.miterLimit = renderOptions.miterLimit;\n        context.stroke();\n      }\n    }\n\n    /**\n     * @private\n     * @param {RenderOptions} renderOptions Render options.\n     */\n  }, {\n    key: \"createHitDetectionCanvas_\",\n    value: function createHitDetectionCanvas_(renderOptions) {\n      if (this.fill_) {\n        var color = this.fill_.getColor();\n\n        // determine if fill is transparent (or pattern or gradient)\n        var opacity = 0;\n        if (typeof color === 'string') {\n          color = asArray(color);\n        }\n        if (color === null) {\n          opacity = 1;\n        } else if (Array.isArray(color)) {\n          opacity = color.length === 4 ? color[3] : 1;\n        }\n        if (opacity === 0) {\n          // if a transparent fill style is set, create an extra hit-detection image\n          // with a default fill style\n          var context = createCanvasContext2D(renderOptions.size, renderOptions.size);\n          this.hitDetectionCanvas_ = context.canvas;\n          this.drawHitDetectionCanvas_(renderOptions, context);\n        }\n      }\n      if (!this.hitDetectionCanvas_) {\n        this.hitDetectionCanvas_ = this.getImage(1);\n      }\n    }\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} context The context to draw in.\n     */\n  }, {\n    key: \"createPath_\",\n    value: function createPath_(context) {\n      var points = this.points_;\n      var radius = this.radius_;\n      if (points === Infinity) {\n        context.arc(0, 0, radius, 0, 2 * Math.PI);\n      } else {\n        var radius2 = this.radius2_ === undefined ? radius : this.radius2_;\n        if (this.radius2_ !== undefined) {\n          points *= 2;\n        }\n        var startAngle = this.angle_ - Math.PI / 2;\n        var step = 2 * Math.PI / points;\n        for (var i = 0; i < points; i++) {\n          var angle0 = startAngle + i * step;\n          var radiusC = i % 2 === 0 ? radius : radius2;\n          context.lineTo(radiusC * Math.cos(angle0), radiusC * Math.sin(angle0));\n        }\n        context.closePath();\n      }\n    }\n\n    /**\n     * @private\n     * @param {RenderOptions} renderOptions Render options.\n     * @param {CanvasRenderingContext2D} context The context.\n     */\n  }, {\n    key: \"drawHitDetectionCanvas_\",\n    value: function drawHitDetectionCanvas_(renderOptions, context) {\n      // set origin to canvas center\n      context.translate(renderOptions.size / 2, renderOptions.size / 2);\n      this.createPath_(context);\n      context.fillStyle = defaultFillStyle;\n      context.fill();\n      if (this.stroke_) {\n        context.strokeStyle = renderOptions.strokeStyle;\n        context.lineWidth = renderOptions.strokeWidth;\n        if (renderOptions.lineDash) {\n          context.setLineDash(renderOptions.lineDash);\n          context.lineDashOffset = renderOptions.lineDashOffset;\n        }\n        context.lineJoin = renderOptions.lineJoin;\n        context.miterLimit = renderOptions.miterLimit;\n        context.stroke();\n      }\n    }\n  }]);\n  return RegularShape;\n}(ImageStyle);\nexport default RegularShape;","map":{"version":3,"names":["ImageState","ImageStyle","asArray","asColorLike","createCanvasContext2D","defaultFillStyle","defaultLineJoin","defaultLineWidth","defaultMiterLimit","defaultStrokeStyle","RegularShape","_ImageStyle","_inherits","_super","_createSuper","options","_this","_classCallCheck","rotateWithView","undefined","call","opacity","rotation","scale","displacement","declutterMode","canvas_","hitDetectionCanvas_","fill_","fill","origin_","points_","points","radius_","radius","radius1","radius2_","radius2","angle_","angle","stroke_","stroke","size_","renderOptions_","render","_createClass","key","value","clone","getScale","style","getFill","getPoints","getRadius","getRadius2","getAngle","getStroke","getRotation","getRotateWithView","Array","isArray","slice","getDisplacement","getDeclutterMode","setOpacity","getOpacity","getAnchor","size","getScaleArray","setFill","getHitDetectionImage","createHitDetectionCanvas_","getImage","pixelRatio","image","renderOptions","context","draw_","canvas","getPixelRatio","getImageSize","getImageState","LOADED","getOrigin","getSize","setStroke","listenImageChange","listener","load","unlistenImageChange","calculateLineJoinSize_","lineJoin","strokeWidth","miterLimit","Infinity","r1","r2","tmp","alpha","Math","PI","a","sin","b","sqrt","d","e","miterRatio","k","l","maxr","bevelAdd","aa","bb","dd","ee","innerMiterRatio","innerLength","max","createRenderOptions","lineDash","lineDashOffset","strokeStyle","getColor","getWidth","getLineDash","getLineDashOffset","getLineJoin","getMiterLimit","add","maxRadius","ceil","translate","createPath_","color","fillStyle","lineWidth","setLineDash","length","drawHitDetectionCanvas_","arc","startAngle","step","i","angle0","radiusC","lineTo","cos","closePath"],"sources":["/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/ol/style/RegularShape.js"],"sourcesContent":["/**\n * @module ol/style/RegularShape\n */\n\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport {asArray} from '../color.js';\nimport {asColorLike} from '../colorlike.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {\n  defaultFillStyle,\n  defaultLineJoin,\n  defaultLineWidth,\n  defaultMiterLimit,\n  defaultStrokeStyle,\n} from '../render/canvas.js';\n\n/**\n * Specify radius for regular polygons, or radius1 and radius2 for stars.\n * @typedef {Object} Options\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points\n * is the number of sides.\n * @property {number} [radius] Radius of a regular polygon.\n * @property {number} [radius1] First radius of a star. Ignored if radius is set.\n * @property {number} [radius2] Second radius of a star.\n * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's points facing up.\n * @property {Array<number>} [displacement=[0, 0]] Displacement of the shape in pixels.\n * Positive values will shift the shape right and up.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. Unless two dimensional scaling is required a better\n * result may be obtained with appropriate settings for `radius`, `radius1` and `radius2`.\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [declutterMode] Declutter mode.\n */\n\n/**\n * @typedef {Object} RenderOptions\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle] StrokeStyle.\n * @property {number} strokeWidth StrokeWidth.\n * @property {number} size Size.\n * @property {Array<number>|null} lineDash LineDash.\n * @property {number} lineDashOffset LineDashOffset.\n * @property {CanvasLineJoin} lineJoin LineJoin.\n * @property {number} miterLimit MiterLimit.\n */\n\n/**\n * @classdesc\n * Set regular shape style for vector features. The resulting shape will be\n * a regular polygon when `radius` is provided, or a star when `radius1` and\n * `radius2` are provided.\n * @api\n */\nclass RegularShape extends ImageStyle {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    /**\n     * @type {boolean}\n     */\n    const rotateWithView =\n      options.rotateWithView !== undefined ? options.rotateWithView : false;\n\n    super({\n      opacity: 1,\n      rotateWithView: rotateWithView,\n      rotation: options.rotation !== undefined ? options.rotation : 0,\n      scale: options.scale !== undefined ? options.scale : 1,\n      displacement:\n        options.displacement !== undefined ? options.displacement : [0, 0],\n      declutterMode: options.declutterMode,\n    });\n\n    /**\n     * @private\n     * @type {Object<number, HTMLCanvasElement>}\n     */\n    this.canvas_ = undefined;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.hitDetectionCanvas_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n    this.fill_ = options.fill !== undefined ? options.fill : null;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.origin_ = [0, 0];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.points_ = options.points;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.radius_ =\n      options.radius !== undefined ? options.radius : options.radius1;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.radius2_ = options.radius2;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.angle_ = options.angle !== undefined ? options.angle : 0;\n\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.size_ = null;\n\n    /**\n     * @private\n     * @type {RenderOptions}\n     */\n    this.renderOptions_ = null;\n\n    this.render();\n  }\n\n  /**\n   * Clones the style.\n   * @return {RegularShape} The cloned style.\n   * @api\n   */\n  clone() {\n    const scale = this.getScale();\n    const style = new RegularShape({\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      points: this.getPoints(),\n      radius: this.getRadius(),\n      radius2: this.getRadius2(),\n      angle: this.getAngle(),\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      displacement: this.getDisplacement().slice(),\n      declutterMode: this.getDeclutterMode(),\n    });\n    style.setOpacity(this.getOpacity());\n    return style;\n  }\n\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @return {Array<number>} Anchor.\n   * @api\n   */\n  getAnchor() {\n    const size = this.size_;\n    if (!size) {\n      return null;\n    }\n    const displacement = this.getDisplacement();\n    const scale = this.getScaleArray();\n    // anchor is scaled by renderer but displacement should not be scaled\n    // so divide by scale here\n    return [\n      size[0] / 2 - displacement[0] / scale[0],\n      size[1] / 2 + displacement[1] / scale[1],\n    ];\n  }\n\n  /**\n   * Get the angle used in generating the shape.\n   * @return {number} Shape's rotation in radians.\n   * @api\n   */\n  getAngle() {\n    return this.angle_;\n  }\n\n  /**\n   * Get the fill style for the shape.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n  getFill() {\n    return this.fill_;\n  }\n\n  /**\n   * Set the fill style.\n   * @param {import(\"./Fill.js\").default} fill Fill style.\n   * @api\n   */\n  setFill(fill) {\n    this.fill_ = fill;\n    this.render();\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Image element.\n   */\n  getHitDetectionImage() {\n    if (!this.hitDetectionCanvas_) {\n      this.createHitDetectionCanvas_(this.renderOptions_);\n    }\n    return this.hitDetectionCanvas_;\n  }\n\n  /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLCanvasElement} Image or Canvas element.\n   * @api\n   */\n  getImage(pixelRatio) {\n    let image = this.canvas_[pixelRatio];\n    if (!image) {\n      const renderOptions = this.renderOptions_;\n      const context = createCanvasContext2D(\n        renderOptions.size * pixelRatio,\n        renderOptions.size * pixelRatio\n      );\n      this.draw_(renderOptions, context, pixelRatio);\n\n      image = context.canvas;\n      this.canvas_[pixelRatio] = image;\n    }\n    return image;\n  }\n\n  /**\n   * Get the image pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Pixel ratio.\n   */\n  getPixelRatio(pixelRatio) {\n    return pixelRatio;\n  }\n\n  /**\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  getImageSize() {\n    return this.size_;\n  }\n\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  getImageState() {\n    return ImageState.LOADED;\n  }\n\n  /**\n   * Get the origin of the symbolizer.\n   * @return {Array<number>} Origin.\n   * @api\n   */\n  getOrigin() {\n    return this.origin_;\n  }\n\n  /**\n   * Get the number of points for generating the shape.\n   * @return {number} Number of points for stars and regular polygons.\n   * @api\n   */\n  getPoints() {\n    return this.points_;\n  }\n\n  /**\n   * Get the (primary) radius for the shape.\n   * @return {number} Radius.\n   * @api\n   */\n  getRadius() {\n    return this.radius_;\n  }\n\n  /**\n   * Get the secondary radius for the shape.\n   * @return {number|undefined} Radius2.\n   * @api\n   */\n  getRadius2() {\n    return this.radius2_;\n  }\n\n  /**\n   * Get the size of the symbolizer (in pixels).\n   * @return {import(\"../size.js\").Size} Size.\n   * @api\n   */\n  getSize() {\n    return this.size_;\n  }\n\n  /**\n   * Get the stroke style for the shape.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n  getStroke() {\n    return this.stroke_;\n  }\n\n  /**\n   * Set the stroke style.\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n   * @api\n   */\n  setStroke(stroke) {\n    this.stroke_ = stroke;\n    this.render();\n  }\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  listenImageChange(listener) {}\n\n  /**\n   * Load not yet loaded URI.\n   */\n  load() {}\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  unlistenImageChange(listener) {}\n\n  /**\n   * Calculate additional canvas size needed for the miter.\n   * @param {string} lineJoin Line join\n   * @param {number} strokeWidth Stroke width\n   * @param {number} miterLimit Miter limit\n   * @return {number} Additional canvas size needed\n   * @private\n   */\n  calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit) {\n    if (\n      strokeWidth === 0 ||\n      this.points_ === Infinity ||\n      (lineJoin !== 'bevel' && lineJoin !== 'miter')\n    ) {\n      return strokeWidth;\n    }\n    // m  | ^\n    // i  | |\\                  .\n    // t >|  #\\\n    // e  | |\\ \\              .\n    // r      \\s\\\n    //      |  \\t\\          .                 .\n    //          \\r\\                      .   .\n    //      |    \\o\\      .          .  . . .\n    //          e \\k\\            .  .    . .\n    //      |      \\e\\  .    .  .       . .\n    //       d      \\ \\  .  .          . .\n    //      | _ _a_ _\\#  .            . .\n    //   r1          / `             . .\n    //      |                       . .\n    //       b     /               . .\n    //      |                     . .\n    //           / r2            . .\n    //      |                        .   .\n    //         /                           .   .\n    //      |α                                   .   .\n    //       /                                         .   .\n    //      ° center\n    let r1 = this.radius_;\n    let r2 = this.radius2_ === undefined ? r1 : this.radius2_;\n    if (r1 < r2) {\n      const tmp = r1;\n      r1 = r2;\n      r2 = tmp;\n    }\n    const points =\n      this.radius2_ === undefined ? this.points_ : this.points_ * 2;\n    const alpha = (2 * Math.PI) / points;\n    const a = r2 * Math.sin(alpha);\n    const b = Math.sqrt(r2 * r2 - a * a);\n    const d = r1 - b;\n    const e = Math.sqrt(a * a + d * d);\n    const miterRatio = e / a;\n    if (lineJoin === 'miter' && miterRatio <= miterLimit) {\n      return miterRatio * strokeWidth;\n    }\n    // Calculate the distnce from center to the stroke corner where\n    // it was cut short because of the miter limit.\n    //              l\n    //        ----+---- <= distance from center to here is maxr\n    //       /####|k ##\\\n    //      /#####^#####\\\n    //     /#### /+\\# s #\\\n    //    /### h/+++\\# t #\\\n    //   /### t/+++++\\# r #\\\n    //  /### a/+++++++\\# o #\\\n    // /### p/++ fill +\\# k #\\\n    ///#### /+++++^+++++\\# e #\\\n    //#####/+++++/+\\+++++\\#####\\\n    const k = strokeWidth / 2 / miterRatio;\n    const l = (strokeWidth / 2) * (d / e);\n    const maxr = Math.sqrt((r1 + k) * (r1 + k) + l * l);\n    const bevelAdd = maxr - r1;\n    if (this.radius2_ === undefined || lineJoin === 'bevel') {\n      return bevelAdd * 2;\n    }\n    // If outer miter is over the miter limit the inner miter may reach through the\n    // center and be longer than the bevel, same calculation as above but swap r1 / r2.\n    const aa = r1 * Math.sin(alpha);\n    const bb = Math.sqrt(r1 * r1 - aa * aa);\n    const dd = r2 - bb;\n    const ee = Math.sqrt(aa * aa + dd * dd);\n    const innerMiterRatio = ee / aa;\n    if (innerMiterRatio <= miterLimit) {\n      const innerLength = (innerMiterRatio * strokeWidth) / 2 - r2 - r1;\n      return 2 * Math.max(bevelAdd, innerLength);\n    }\n    return bevelAdd * 2;\n  }\n\n  /**\n   * @return {RenderOptions}  The render options\n   * @protected\n   */\n  createRenderOptions() {\n    let lineJoin = defaultLineJoin;\n    let miterLimit = 0;\n    let lineDash = null;\n    let lineDashOffset = 0;\n    let strokeStyle;\n    let strokeWidth = 0;\n\n    if (this.stroke_) {\n      strokeStyle = this.stroke_.getColor();\n      if (strokeStyle === null) {\n        strokeStyle = defaultStrokeStyle;\n      }\n      strokeStyle = asColorLike(strokeStyle);\n      strokeWidth = this.stroke_.getWidth();\n      if (strokeWidth === undefined) {\n        strokeWidth = defaultLineWidth;\n      }\n      lineDash = this.stroke_.getLineDash();\n      lineDashOffset = this.stroke_.getLineDashOffset();\n      lineJoin = this.stroke_.getLineJoin();\n      if (lineJoin === undefined) {\n        lineJoin = defaultLineJoin;\n      }\n      miterLimit = this.stroke_.getMiterLimit();\n      if (miterLimit === undefined) {\n        miterLimit = defaultMiterLimit;\n      }\n    }\n\n    const add = this.calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit);\n    const maxRadius = Math.max(this.radius_, this.radius2_ || 0);\n    const size = Math.ceil(2 * maxRadius + add);\n\n    return {\n      strokeStyle: strokeStyle,\n      strokeWidth: strokeWidth,\n      size: size,\n      lineDash: lineDash,\n      lineDashOffset: lineDashOffset,\n      lineJoin: lineJoin,\n      miterLimit: miterLimit,\n    };\n  }\n\n  /**\n   * @protected\n   */\n  render() {\n    this.renderOptions_ = this.createRenderOptions();\n    const size = this.renderOptions_.size;\n    this.canvas_ = {};\n    this.size_ = [size, size];\n  }\n\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The rendering context.\n   * @param {number} pixelRatio The pixel ratio.\n   */\n  draw_(renderOptions, context, pixelRatio) {\n    context.scale(pixelRatio, pixelRatio);\n    // set origin to canvas center\n    context.translate(renderOptions.size / 2, renderOptions.size / 2);\n\n    this.createPath_(context);\n\n    if (this.fill_) {\n      let color = this.fill_.getColor();\n      if (color === null) {\n        color = defaultFillStyle;\n      }\n      context.fillStyle = asColorLike(color);\n      context.fill();\n    }\n    if (this.stroke_) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n      if (renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n      context.lineJoin = renderOptions.lineJoin;\n      context.miterLimit = renderOptions.miterLimit;\n      context.stroke();\n    }\n  }\n\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   */\n  createHitDetectionCanvas_(renderOptions) {\n    if (this.fill_) {\n      let color = this.fill_.getColor();\n\n      // determine if fill is transparent (or pattern or gradient)\n      let opacity = 0;\n      if (typeof color === 'string') {\n        color = asArray(color);\n      }\n      if (color === null) {\n        opacity = 1;\n      } else if (Array.isArray(color)) {\n        opacity = color.length === 4 ? color[3] : 1;\n      }\n      if (opacity === 0) {\n        // if a transparent fill style is set, create an extra hit-detection image\n        // with a default fill style\n        const context = createCanvasContext2D(\n          renderOptions.size,\n          renderOptions.size\n        );\n        this.hitDetectionCanvas_ = context.canvas;\n\n        this.drawHitDetectionCanvas_(renderOptions, context);\n      }\n    }\n    if (!this.hitDetectionCanvas_) {\n      this.hitDetectionCanvas_ = this.getImage(1);\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context The context to draw in.\n   */\n  createPath_(context) {\n    let points = this.points_;\n    const radius = this.radius_;\n    if (points === Infinity) {\n      context.arc(0, 0, radius, 0, 2 * Math.PI);\n    } else {\n      const radius2 = this.radius2_ === undefined ? radius : this.radius2_;\n      if (this.radius2_ !== undefined) {\n        points *= 2;\n      }\n      const startAngle = this.angle_ - Math.PI / 2;\n      const step = (2 * Math.PI) / points;\n      for (let i = 0; i < points; i++) {\n        const angle0 = startAngle + i * step;\n        const radiusC = i % 2 === 0 ? radius : radius2;\n        context.lineTo(radiusC * Math.cos(angle0), radiusC * Math.sin(angle0));\n      }\n      context.closePath();\n    }\n  }\n\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The context.\n   */\n  drawHitDetectionCanvas_(renderOptions, context) {\n    // set origin to canvas center\n    context.translate(renderOptions.size / 2, renderOptions.size / 2);\n\n    this.createPath_(context);\n\n    context.fillStyle = defaultFillStyle;\n    context.fill();\n    if (this.stroke_) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n      if (renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n      context.lineJoin = renderOptions.lineJoin;\n      context.miterLimit = renderOptions.miterLimit;\n      context.stroke();\n    }\n  }\n}\n\nexport default RegularShape;\n"],"mappings":";;;;AAAA;AACA;AACA;;AAEA,OAAOA,UAAU,MAAM,kBAAkB;AACzC,OAAOC,UAAU,MAAM,YAAY;AACnC,SAAQC,OAAO,QAAO,aAAa;AACnC,SAAQC,WAAW,QAAO,iBAAiB;AAC3C,SAAQC,qBAAqB,QAAO,WAAW;AAC/C,SACEC,gBAAgB,EAChBC,eAAe,EACfC,gBAAgB,EAChBC,iBAAiB,EACjBC,kBAAkB,QACb,qBAAqB;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA,IAOMC,YAAY,0BAAAC,WAAA;EAAAC,SAAA,CAAAF,YAAA,EAAAC,WAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,YAAA;EAChB;AACF;AACA;EACE,SAAAA,aAAYK,OAAO,EAAE;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAP,YAAA;IACnB;AACJ;AACA;IACI,IAAMQ,cAAc,GAClBH,OAAO,CAACG,cAAc,KAAKC,SAAS,GAAGJ,OAAO,CAACG,cAAc,GAAG,KAAK;IAEvEF,KAAA,GAAAH,MAAA,CAAAO,IAAA,OAAM;MACJC,OAAO,EAAE,CAAC;MACVH,cAAc,EAAEA,cAAc;MAC9BI,QAAQ,EAAEP,OAAO,CAACO,QAAQ,KAAKH,SAAS,GAAGJ,OAAO,CAACO,QAAQ,GAAG,CAAC;MAC/DC,KAAK,EAAER,OAAO,CAACQ,KAAK,KAAKJ,SAAS,GAAGJ,OAAO,CAACQ,KAAK,GAAG,CAAC;MACtDC,YAAY,EACVT,OAAO,CAACS,YAAY,KAAKL,SAAS,GAAGJ,OAAO,CAACS,YAAY,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;MACpEC,aAAa,EAAEV,OAAO,CAACU;IACzB,CAAC;;IAED;AACJ;AACA;AACA;IACIT,KAAA,CAAKU,OAAO,GAAGP,SAAS;;IAExB;AACJ;AACA;AACA;IACIH,KAAA,CAAKW,mBAAmB,GAAG,IAAI;;IAE/B;AACJ;AACA;AACA;IACIX,KAAA,CAAKY,KAAK,GAAGb,OAAO,CAACc,IAAI,KAAKV,SAAS,GAAGJ,OAAO,CAACc,IAAI,GAAG,IAAI;;IAE7D;AACJ;AACA;AACA;IACIb,KAAA,CAAKc,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;;IAErB;AACJ;AACA;AACA;IACId,KAAA,CAAKe,OAAO,GAAGhB,OAAO,CAACiB,MAAM;;IAE7B;AACJ;AACA;AACA;IACIhB,KAAA,CAAKiB,OAAO,GACVlB,OAAO,CAACmB,MAAM,KAAKf,SAAS,GAAGJ,OAAO,CAACmB,MAAM,GAAGnB,OAAO,CAACoB,OAAO;;IAEjE;AACJ;AACA;AACA;IACInB,KAAA,CAAKoB,QAAQ,GAAGrB,OAAO,CAACsB,OAAO;;IAE/B;AACJ;AACA;AACA;IACIrB,KAAA,CAAKsB,MAAM,GAAGvB,OAAO,CAACwB,KAAK,KAAKpB,SAAS,GAAGJ,OAAO,CAACwB,KAAK,GAAG,CAAC;;IAE7D;AACJ;AACA;AACA;IACIvB,KAAA,CAAKwB,OAAO,GAAGzB,OAAO,CAAC0B,MAAM,KAAKtB,SAAS,GAAGJ,OAAO,CAAC0B,MAAM,GAAG,IAAI;;IAEnE;AACJ;AACA;AACA;IACIzB,KAAA,CAAK0B,KAAK,GAAG,IAAI;;IAEjB;AACJ;AACA;AACA;IACI1B,KAAA,CAAK2B,cAAc,GAAG,IAAI;IAE1B3B,KAAA,CAAK4B,MAAM,EAAE;IAAC,OAAA5B,KAAA;EAChB;;EAEA;AACF;AACA;AACA;AACA;EAJE6B,YAAA,CAAAnC,YAAA;IAAAoC,GAAA;IAAAC,KAAA,EAKA,SAAAC,MAAA,EAAQ;MACN,IAAMzB,KAAK,GAAG,IAAI,CAAC0B,QAAQ,EAAE;MAC7B,IAAMC,KAAK,GAAG,IAAIxC,YAAY,CAAC;QAC7BmB,IAAI,EAAE,IAAI,CAACsB,OAAO,EAAE,GAAG,IAAI,CAACA,OAAO,EAAE,CAACH,KAAK,EAAE,GAAG7B,SAAS;QACzDa,MAAM,EAAE,IAAI,CAACoB,SAAS,EAAE;QACxBlB,MAAM,EAAE,IAAI,CAACmB,SAAS,EAAE;QACxBhB,OAAO,EAAE,IAAI,CAACiB,UAAU,EAAE;QAC1Bf,KAAK,EAAE,IAAI,CAACgB,QAAQ,EAAE;QACtBd,MAAM,EAAE,IAAI,CAACe,SAAS,EAAE,GAAG,IAAI,CAACA,SAAS,EAAE,CAACR,KAAK,EAAE,GAAG7B,SAAS;QAC/DG,QAAQ,EAAE,IAAI,CAACmC,WAAW,EAAE;QAC5BvC,cAAc,EAAE,IAAI,CAACwC,iBAAiB,EAAE;QACxCnC,KAAK,EAAEoC,KAAK,CAACC,OAAO,CAACrC,KAAK,CAAC,GAAGA,KAAK,CAACsC,KAAK,EAAE,GAAGtC,KAAK;QACnDC,YAAY,EAAE,IAAI,CAACsC,eAAe,EAAE,CAACD,KAAK,EAAE;QAC5CpC,aAAa,EAAE,IAAI,CAACsC,gBAAgB;MACtC,CAAC,CAAC;MACFb,KAAK,CAACc,UAAU,CAAC,IAAI,CAACC,UAAU,EAAE,CAAC;MACnC,OAAOf,KAAK;IACd;;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAAJ,GAAA;IAAAC,KAAA,EAMA,SAAAmB,UAAA,EAAY;MACV,IAAMC,IAAI,GAAG,IAAI,CAACzB,KAAK;MACvB,IAAI,CAACyB,IAAI,EAAE;QACT,OAAO,IAAI;MACb;MACA,IAAM3C,YAAY,GAAG,IAAI,CAACsC,eAAe,EAAE;MAC3C,IAAMvC,KAAK,GAAG,IAAI,CAAC6C,aAAa,EAAE;MAClC;MACA;MACA,OAAO,CACLD,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG3C,YAAY,CAAC,CAAC,CAAC,GAAGD,KAAK,CAAC,CAAC,CAAC,EACxC4C,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG3C,YAAY,CAAC,CAAC,CAAC,GAAGD,KAAK,CAAC,CAAC,CAAC,CACzC;IACH;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAAuB,GAAA;IAAAC,KAAA,EAKA,SAAAQ,SAAA,EAAW;MACT,OAAO,IAAI,CAACjB,MAAM;IACpB;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAAQ,GAAA;IAAAC,KAAA,EAKA,SAAAI,QAAA,EAAU;MACR,OAAO,IAAI,CAACvB,KAAK;IACnB;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAAkB,GAAA;IAAAC,KAAA,EAKA,SAAAsB,QAAQxC,IAAI,EAAE;MACZ,IAAI,CAACD,KAAK,GAAGC,IAAI;MACjB,IAAI,CAACe,MAAM,EAAE;IACf;;IAEA;AACF;AACA;EAFE;IAAAE,GAAA;IAAAC,KAAA,EAGA,SAAAuB,qBAAA,EAAuB;MACrB,IAAI,CAAC,IAAI,CAAC3C,mBAAmB,EAAE;QAC7B,IAAI,CAAC4C,yBAAyB,CAAC,IAAI,CAAC5B,cAAc,CAAC;MACrD;MACA,OAAO,IAAI,CAAChB,mBAAmB;IACjC;;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAAmB,GAAA;IAAAC,KAAA,EAMA,SAAAyB,SAASC,UAAU,EAAE;MACnB,IAAIC,KAAK,GAAG,IAAI,CAAChD,OAAO,CAAC+C,UAAU,CAAC;MACpC,IAAI,CAACC,KAAK,EAAE;QACV,IAAMC,aAAa,GAAG,IAAI,CAAChC,cAAc;QACzC,IAAMiC,OAAO,GAAGxE,qBAAqB,CACnCuE,aAAa,CAACR,IAAI,GAAGM,UAAU,EAC/BE,aAAa,CAACR,IAAI,GAAGM,UAAU,CAChC;QACD,IAAI,CAACI,KAAK,CAACF,aAAa,EAAEC,OAAO,EAAEH,UAAU,CAAC;QAE9CC,KAAK,GAAGE,OAAO,CAACE,MAAM;QACtB,IAAI,CAACpD,OAAO,CAAC+C,UAAU,CAAC,GAAGC,KAAK;MAClC;MACA,OAAOA,KAAK;IACd;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA5B,GAAA;IAAAC,KAAA,EAKA,SAAAgC,cAAcN,UAAU,EAAE;MACxB,OAAOA,UAAU;IACnB;;IAEA;AACF;AACA;EAFE;IAAA3B,GAAA;IAAAC,KAAA,EAGA,SAAAiC,aAAA,EAAe;MACb,OAAO,IAAI,CAACtC,KAAK;IACnB;;IAEA;AACF;AACA;EAFE;IAAAI,GAAA;IAAAC,KAAA,EAGA,SAAAkC,cAAA,EAAgB;MACd,OAAOjF,UAAU,CAACkF,MAAM;IAC1B;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAApC,GAAA;IAAAC,KAAA,EAKA,SAAAoC,UAAA,EAAY;MACV,OAAO,IAAI,CAACrD,OAAO;IACrB;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAAgB,GAAA;IAAAC,KAAA,EAKA,SAAAK,UAAA,EAAY;MACV,OAAO,IAAI,CAACrB,OAAO;IACrB;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAAe,GAAA;IAAAC,KAAA,EAKA,SAAAM,UAAA,EAAY;MACV,OAAO,IAAI,CAACpB,OAAO;IACrB;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAAa,GAAA;IAAAC,KAAA,EAKA,SAAAO,WAAA,EAAa;MACX,OAAO,IAAI,CAAClB,QAAQ;IACtB;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAAU,GAAA;IAAAC,KAAA,EAKA,SAAAqC,QAAA,EAAU;MACR,OAAO,IAAI,CAAC1C,KAAK;IACnB;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAAI,GAAA;IAAAC,KAAA,EAKA,SAAAS,UAAA,EAAY;MACV,OAAO,IAAI,CAAChB,OAAO;IACrB;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAAM,GAAA;IAAAC,KAAA,EAKA,SAAAsC,UAAU5C,MAAM,EAAE;MAChB,IAAI,CAACD,OAAO,GAAGC,MAAM;MACrB,IAAI,CAACG,MAAM,EAAE;IACf;;IAEA;AACF;AACA;EAFE;IAAAE,GAAA;IAAAC,KAAA,EAGA,SAAAuC,kBAAkBC,QAAQ,EAAE,CAAC;;IAE7B;AACF;AACA;EAFE;IAAAzC,GAAA;IAAAC,KAAA,EAGA,SAAAyC,KAAA,EAAO,CAAC;;IAER;AACF;AACA;EAFE;IAAA1C,GAAA;IAAAC,KAAA,EAGA,SAAA0C,oBAAoBF,QAAQ,EAAE,CAAC;;IAE/B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EAPE;IAAAzC,GAAA;IAAAC,KAAA,EAQA,SAAA2C,uBAAuBC,QAAQ,EAAEC,WAAW,EAAEC,UAAU,EAAE;MACxD,IACED,WAAW,KAAK,CAAC,IACjB,IAAI,CAAC7D,OAAO,KAAK+D,QAAQ,IACxBH,QAAQ,KAAK,OAAO,IAAIA,QAAQ,KAAK,OAAQ,EAC9C;QACA,OAAOC,WAAW;MACpB;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,IAAIG,EAAE,GAAG,IAAI,CAAC9D,OAAO;MACrB,IAAI+D,EAAE,GAAG,IAAI,CAAC5D,QAAQ,KAAKjB,SAAS,GAAG4E,EAAE,GAAG,IAAI,CAAC3D,QAAQ;MACzD,IAAI2D,EAAE,GAAGC,EAAE,EAAE;QACX,IAAMC,GAAG,GAAGF,EAAE;QACdA,EAAE,GAAGC,EAAE;QACPA,EAAE,GAAGC,GAAG;MACV;MACA,IAAMjE,MAAM,GACV,IAAI,CAACI,QAAQ,KAAKjB,SAAS,GAAG,IAAI,CAACY,OAAO,GAAG,IAAI,CAACA,OAAO,GAAG,CAAC;MAC/D,IAAMmE,KAAK,GAAI,CAAC,GAAGC,IAAI,CAACC,EAAE,GAAIpE,MAAM;MACpC,IAAMqE,CAAC,GAAGL,EAAE,GAAGG,IAAI,CAACG,GAAG,CAACJ,KAAK,CAAC;MAC9B,IAAMK,CAAC,GAAGJ,IAAI,CAACK,IAAI,CAACR,EAAE,GAAGA,EAAE,GAAGK,CAAC,GAAGA,CAAC,CAAC;MACpC,IAAMI,CAAC,GAAGV,EAAE,GAAGQ,CAAC;MAChB,IAAMG,CAAC,GAAGP,IAAI,CAACK,IAAI,CAACH,CAAC,GAAGA,CAAC,GAAGI,CAAC,GAAGA,CAAC,CAAC;MAClC,IAAME,UAAU,GAAGD,CAAC,GAAGL,CAAC;MACxB,IAAIV,QAAQ,KAAK,OAAO,IAAIgB,UAAU,IAAId,UAAU,EAAE;QACpD,OAAOc,UAAU,GAAGf,WAAW;MACjC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,IAAMgB,CAAC,GAAGhB,WAAW,GAAG,CAAC,GAAGe,UAAU;MACtC,IAAME,CAAC,GAAIjB,WAAW,GAAG,CAAC,IAAKa,CAAC,GAAGC,CAAC,CAAC;MACrC,IAAMI,IAAI,GAAGX,IAAI,CAACK,IAAI,CAAC,CAACT,EAAE,GAAGa,CAAC,KAAKb,EAAE,GAAGa,CAAC,CAAC,GAAGC,CAAC,GAAGA,CAAC,CAAC;MACnD,IAAME,QAAQ,GAAGD,IAAI,GAAGf,EAAE;MAC1B,IAAI,IAAI,CAAC3D,QAAQ,KAAKjB,SAAS,IAAIwE,QAAQ,KAAK,OAAO,EAAE;QACvD,OAAOoB,QAAQ,GAAG,CAAC;MACrB;MACA;MACA;MACA,IAAMC,EAAE,GAAGjB,EAAE,GAAGI,IAAI,CAACG,GAAG,CAACJ,KAAK,CAAC;MAC/B,IAAMe,EAAE,GAAGd,IAAI,CAACK,IAAI,CAACT,EAAE,GAAGA,EAAE,GAAGiB,EAAE,GAAGA,EAAE,CAAC;MACvC,IAAME,EAAE,GAAGlB,EAAE,GAAGiB,EAAE;MAClB,IAAME,EAAE,GAAGhB,IAAI,CAACK,IAAI,CAACQ,EAAE,GAAGA,EAAE,GAAGE,EAAE,GAAGA,EAAE,CAAC;MACvC,IAAME,eAAe,GAAGD,EAAE,GAAGH,EAAE;MAC/B,IAAII,eAAe,IAAIvB,UAAU,EAAE;QACjC,IAAMwB,WAAW,GAAID,eAAe,GAAGxB,WAAW,GAAI,CAAC,GAAGI,EAAE,GAAGD,EAAE;QACjE,OAAO,CAAC,GAAGI,IAAI,CAACmB,GAAG,CAACP,QAAQ,EAAEM,WAAW,CAAC;MAC5C;MACA,OAAON,QAAQ,GAAG,CAAC;IACrB;;IAEA;AACF;AACA;AACA;EAHE;IAAAjE,GAAA;IAAAC,KAAA,EAIA,SAAAwE,oBAAA,EAAsB;MACpB,IAAI5B,QAAQ,GAAGrF,eAAe;MAC9B,IAAIuF,UAAU,GAAG,CAAC;MAClB,IAAI2B,QAAQ,GAAG,IAAI;MACnB,IAAIC,cAAc,GAAG,CAAC;MACtB,IAAIC,WAAW;MACf,IAAI9B,WAAW,GAAG,CAAC;MAEnB,IAAI,IAAI,CAACpD,OAAO,EAAE;QAChBkF,WAAW,GAAG,IAAI,CAAClF,OAAO,CAACmF,QAAQ,EAAE;QACrC,IAAID,WAAW,KAAK,IAAI,EAAE;UACxBA,WAAW,GAAGjH,kBAAkB;QAClC;QACAiH,WAAW,GAAGvH,WAAW,CAACuH,WAAW,CAAC;QACtC9B,WAAW,GAAG,IAAI,CAACpD,OAAO,CAACoF,QAAQ,EAAE;QACrC,IAAIhC,WAAW,KAAKzE,SAAS,EAAE;UAC7ByE,WAAW,GAAGrF,gBAAgB;QAChC;QACAiH,QAAQ,GAAG,IAAI,CAAChF,OAAO,CAACqF,WAAW,EAAE;QACrCJ,cAAc,GAAG,IAAI,CAACjF,OAAO,CAACsF,iBAAiB,EAAE;QACjDnC,QAAQ,GAAG,IAAI,CAACnD,OAAO,CAACuF,WAAW,EAAE;QACrC,IAAIpC,QAAQ,KAAKxE,SAAS,EAAE;UAC1BwE,QAAQ,GAAGrF,eAAe;QAC5B;QACAuF,UAAU,GAAG,IAAI,CAACrD,OAAO,CAACwF,aAAa,EAAE;QACzC,IAAInC,UAAU,KAAK1E,SAAS,EAAE;UAC5B0E,UAAU,GAAGrF,iBAAiB;QAChC;MACF;MAEA,IAAMyH,GAAG,GAAG,IAAI,CAACvC,sBAAsB,CAACC,QAAQ,EAAEC,WAAW,EAAEC,UAAU,CAAC;MAC1E,IAAMqC,SAAS,GAAG/B,IAAI,CAACmB,GAAG,CAAC,IAAI,CAACrF,OAAO,EAAE,IAAI,CAACG,QAAQ,IAAI,CAAC,CAAC;MAC5D,IAAM+B,IAAI,GAAGgC,IAAI,CAACgC,IAAI,CAAC,CAAC,GAAGD,SAAS,GAAGD,GAAG,CAAC;MAE3C,OAAO;QACLP,WAAW,EAAEA,WAAW;QACxB9B,WAAW,EAAEA,WAAW;QACxBzB,IAAI,EAAEA,IAAI;QACVqD,QAAQ,EAAEA,QAAQ;QAClBC,cAAc,EAAEA,cAAc;QAC9B9B,QAAQ,EAAEA,QAAQ;QAClBE,UAAU,EAAEA;MACd,CAAC;IACH;;IAEA;AACF;AACA;EAFE;IAAA/C,GAAA;IAAAC,KAAA,EAGA,SAAAH,OAAA,EAAS;MACP,IAAI,CAACD,cAAc,GAAG,IAAI,CAAC4E,mBAAmB,EAAE;MAChD,IAAMpD,IAAI,GAAG,IAAI,CAACxB,cAAc,CAACwB,IAAI;MACrC,IAAI,CAACzC,OAAO,GAAG,CAAC,CAAC;MACjB,IAAI,CAACgB,KAAK,GAAG,CAACyB,IAAI,EAAEA,IAAI,CAAC;IAC3B;;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAArB,GAAA;IAAAC,KAAA,EAMA,SAAA8B,MAAMF,aAAa,EAAEC,OAAO,EAAEH,UAAU,EAAE;MACxCG,OAAO,CAACrD,KAAK,CAACkD,UAAU,EAAEA,UAAU,CAAC;MACrC;MACAG,OAAO,CAACwD,SAAS,CAACzD,aAAa,CAACR,IAAI,GAAG,CAAC,EAAEQ,aAAa,CAACR,IAAI,GAAG,CAAC,CAAC;MAEjE,IAAI,CAACkE,WAAW,CAACzD,OAAO,CAAC;MAEzB,IAAI,IAAI,CAAChD,KAAK,EAAE;QACd,IAAI0G,KAAK,GAAG,IAAI,CAAC1G,KAAK,CAAC+F,QAAQ,EAAE;QACjC,IAAIW,KAAK,KAAK,IAAI,EAAE;UAClBA,KAAK,GAAGjI,gBAAgB;QAC1B;QACAuE,OAAO,CAAC2D,SAAS,GAAGpI,WAAW,CAACmI,KAAK,CAAC;QACtC1D,OAAO,CAAC/C,IAAI,EAAE;MAChB;MACA,IAAI,IAAI,CAACW,OAAO,EAAE;QAChBoC,OAAO,CAAC8C,WAAW,GAAG/C,aAAa,CAAC+C,WAAW;QAC/C9C,OAAO,CAAC4D,SAAS,GAAG7D,aAAa,CAACiB,WAAW;QAC7C,IAAIjB,aAAa,CAAC6C,QAAQ,EAAE;UAC1B5C,OAAO,CAAC6D,WAAW,CAAC9D,aAAa,CAAC6C,QAAQ,CAAC;UAC3C5C,OAAO,CAAC6C,cAAc,GAAG9C,aAAa,CAAC8C,cAAc;QACvD;QACA7C,OAAO,CAACe,QAAQ,GAAGhB,aAAa,CAACgB,QAAQ;QACzCf,OAAO,CAACiB,UAAU,GAAGlB,aAAa,CAACkB,UAAU;QAC7CjB,OAAO,CAACnC,MAAM,EAAE;MAClB;IACF;;IAEA;AACF;AACA;AACA;EAHE;IAAAK,GAAA;IAAAC,KAAA,EAIA,SAAAwB,0BAA0BI,aAAa,EAAE;MACvC,IAAI,IAAI,CAAC/C,KAAK,EAAE;QACd,IAAI0G,KAAK,GAAG,IAAI,CAAC1G,KAAK,CAAC+F,QAAQ,EAAE;;QAEjC;QACA,IAAItG,OAAO,GAAG,CAAC;QACf,IAAI,OAAOiH,KAAK,KAAK,QAAQ,EAAE;UAC7BA,KAAK,GAAGpI,OAAO,CAACoI,KAAK,CAAC;QACxB;QACA,IAAIA,KAAK,KAAK,IAAI,EAAE;UAClBjH,OAAO,GAAG,CAAC;QACb,CAAC,MAAM,IAAIsC,KAAK,CAACC,OAAO,CAAC0E,KAAK,CAAC,EAAE;UAC/BjH,OAAO,GAAGiH,KAAK,CAACI,MAAM,KAAK,CAAC,GAAGJ,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC;QAC7C;QACA,IAAIjH,OAAO,KAAK,CAAC,EAAE;UACjB;UACA;UACA,IAAMuD,OAAO,GAAGxE,qBAAqB,CACnCuE,aAAa,CAACR,IAAI,EAClBQ,aAAa,CAACR,IAAI,CACnB;UACD,IAAI,CAACxC,mBAAmB,GAAGiD,OAAO,CAACE,MAAM;UAEzC,IAAI,CAAC6D,uBAAuB,CAAChE,aAAa,EAAEC,OAAO,CAAC;QACtD;MACF;MACA,IAAI,CAAC,IAAI,CAACjD,mBAAmB,EAAE;QAC7B,IAAI,CAACA,mBAAmB,GAAG,IAAI,CAAC6C,QAAQ,CAAC,CAAC,CAAC;MAC7C;IACF;;IAEA;AACF;AACA;AACA;EAHE;IAAA1B,GAAA;IAAAC,KAAA,EAIA,SAAAsF,YAAYzD,OAAO,EAAE;MACnB,IAAI5C,MAAM,GAAG,IAAI,CAACD,OAAO;MACzB,IAAMG,MAAM,GAAG,IAAI,CAACD,OAAO;MAC3B,IAAID,MAAM,KAAK8D,QAAQ,EAAE;QACvBlB,OAAO,CAACgE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE1G,MAAM,EAAE,CAAC,EAAE,CAAC,GAAGiE,IAAI,CAACC,EAAE,CAAC;MAC3C,CAAC,MAAM;QACL,IAAM/D,OAAO,GAAG,IAAI,CAACD,QAAQ,KAAKjB,SAAS,GAAGe,MAAM,GAAG,IAAI,CAACE,QAAQ;QACpE,IAAI,IAAI,CAACA,QAAQ,KAAKjB,SAAS,EAAE;UAC/Ba,MAAM,IAAI,CAAC;QACb;QACA,IAAM6G,UAAU,GAAG,IAAI,CAACvG,MAAM,GAAG6D,IAAI,CAACC,EAAE,GAAG,CAAC;QAC5C,IAAM0C,IAAI,GAAI,CAAC,GAAG3C,IAAI,CAACC,EAAE,GAAIpE,MAAM;QACnC,KAAK,IAAI+G,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG/G,MAAM,EAAE+G,CAAC,EAAE,EAAE;UAC/B,IAAMC,MAAM,GAAGH,UAAU,GAAGE,CAAC,GAAGD,IAAI;UACpC,IAAMG,OAAO,GAAGF,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG7G,MAAM,GAAGG,OAAO;UAC9CuC,OAAO,CAACsE,MAAM,CAACD,OAAO,GAAG9C,IAAI,CAACgD,GAAG,CAACH,MAAM,CAAC,EAAEC,OAAO,GAAG9C,IAAI,CAACG,GAAG,CAAC0C,MAAM,CAAC,CAAC;QACxE;QACApE,OAAO,CAACwE,SAAS,EAAE;MACrB;IACF;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAAtG,GAAA;IAAAC,KAAA,EAKA,SAAA4F,wBAAwBhE,aAAa,EAAEC,OAAO,EAAE;MAC9C;MACAA,OAAO,CAACwD,SAAS,CAACzD,aAAa,CAACR,IAAI,GAAG,CAAC,EAAEQ,aAAa,CAACR,IAAI,GAAG,CAAC,CAAC;MAEjE,IAAI,CAACkE,WAAW,CAACzD,OAAO,CAAC;MAEzBA,OAAO,CAAC2D,SAAS,GAAGlI,gBAAgB;MACpCuE,OAAO,CAAC/C,IAAI,EAAE;MACd,IAAI,IAAI,CAACW,OAAO,EAAE;QAChBoC,OAAO,CAAC8C,WAAW,GAAG/C,aAAa,CAAC+C,WAAW;QAC/C9C,OAAO,CAAC4D,SAAS,GAAG7D,aAAa,CAACiB,WAAW;QAC7C,IAAIjB,aAAa,CAAC6C,QAAQ,EAAE;UAC1B5C,OAAO,CAAC6D,WAAW,CAAC9D,aAAa,CAAC6C,QAAQ,CAAC;UAC3C5C,OAAO,CAAC6C,cAAc,GAAG9C,aAAa,CAAC8C,cAAc;QACvD;QACA7C,OAAO,CAACe,QAAQ,GAAGhB,aAAa,CAACgB,QAAQ;QACzCf,OAAO,CAACiB,UAAU,GAAGlB,aAAa,CAACkB,UAAU;QAC7CjB,OAAO,CAACnC,MAAM,EAAE;MAClB;IACF;EAAC;EAAA,OAAA/B,YAAA;AAAA,EArjBwBT,UAAU;AAwjBrC,eAAeS,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}