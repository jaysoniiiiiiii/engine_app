{"ast":null,"code":"import _classCallCheck from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * @module ol/layer/Base\n */\nimport BaseObject from '../Object.js';\nimport LayerProperty from './Property.js';\nimport { abstract } from '../util.js';\nimport { assert } from '../asserts.js';\nimport { clamp } from '../math.js';\n\n/**\n * A css color, or a function called with a view resolution returning a css color.\n *\n * @typedef {string|function(number):string} BackgroundColor\n * @api\n */\n\n/**\n * @typedef {import(\"../ObjectEventType\").Types|'change:extent'|'change:maxResolution'|'change:maxZoom'|\n *    'change:minResolution'|'change:minZoom'|'change:opacity'|'change:visible'|'change:zIndex'} BaseLayerObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<BaseLayerObjectEventTypes, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|BaseLayerObjectEventTypes, Return>} BaseLayerOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {BackgroundColor} [background] Background color for the layer. If not specified, no background\n * will be rendered.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Note that with {@link module:ol/layer/Base~BaseLayer} and all its subclasses, any property set in\n * the options is set as a {@link module:ol/Object~BaseObject} property on the layer object, so\n * is observable, and has get/set accessors.\n *\n * @api\n */\nvar BaseLayer = /*#__PURE__*/function (_BaseObject) {\n  _inherits(BaseLayer, _BaseObject);\n  var _super = _createSuper(BaseLayer);\n  /**\n   * @param {Options} options Layer options.\n   */\n  function BaseLayer(options) {\n    var _this;\n    _classCallCheck(this, BaseLayer);\n    _this = _super.call(this);\n\n    /***\n     * @type {BaseLayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this.on;\n\n    /***\n     * @type {BaseLayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this.once;\n\n    /***\n     * @type {BaseLayerOnSignature<void>}\n     */\n    _this.un;\n\n    /**\n     * @type {BackgroundColor|false}\n     * @private\n     */\n    _this.background_ = options.background;\n\n    /**\n     * @type {Object<string, *>}\n     */\n    var properties = Object.assign({}, options);\n    if (typeof options.properties === 'object') {\n      delete properties.properties;\n      Object.assign(properties, options.properties);\n    }\n    properties[LayerProperty.OPACITY] = options.opacity !== undefined ? options.opacity : 1;\n    assert(typeof properties[LayerProperty.OPACITY] === 'number', 64); // Layer opacity must be a number\n\n    properties[LayerProperty.VISIBLE] = options.visible !== undefined ? options.visible : true;\n    properties[LayerProperty.Z_INDEX] = options.zIndex;\n    properties[LayerProperty.MAX_RESOLUTION] = options.maxResolution !== undefined ? options.maxResolution : Infinity;\n    properties[LayerProperty.MIN_RESOLUTION] = options.minResolution !== undefined ? options.minResolution : 0;\n    properties[LayerProperty.MIN_ZOOM] = options.minZoom !== undefined ? options.minZoom : -Infinity;\n    properties[LayerProperty.MAX_ZOOM] = options.maxZoom !== undefined ? options.maxZoom : Infinity;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    _this.className_ = properties.className !== undefined ? properties.className : 'ol-layer';\n    delete properties.className;\n    _this.setProperties(properties);\n\n    /**\n     * @type {import(\"./Layer.js\").State}\n     * @private\n     */\n    _this.state_ = null;\n    return _this;\n  }\n\n  /**\n   * Get the background for this layer.\n   * @return {BackgroundColor|false} Layer background.\n   */\n  _createClass(BaseLayer, [{\n    key: \"getBackground\",\n    value: function getBackground() {\n      return this.background_;\n    }\n\n    /**\n     * @return {string} CSS class name.\n     */\n  }, {\n    key: \"getClassName\",\n    value: function getClassName() {\n      return this.className_;\n    }\n\n    /**\n     * This method is not meant to be called by layers or layer renderers because the state\n     * is incorrect if the layer is included in a layer group.\n     *\n     * @param {boolean} [managed] Layer is managed.\n     * @return {import(\"./Layer.js\").State} Layer state.\n     */\n  }, {\n    key: \"getLayerState\",\n    value: function getLayerState(managed) {\n      /** @type {import(\"./Layer.js\").State} */\n      var state = this.state_ || /** @type {?} */{\n        layer: this,\n        managed: managed === undefined ? true : managed\n      };\n      var zIndex = this.getZIndex();\n      state.opacity = clamp(Math.round(this.getOpacity() * 100) / 100, 0, 1);\n      state.visible = this.getVisible();\n      state.extent = this.getExtent();\n      state.zIndex = zIndex === undefined && !state.managed ? Infinity : zIndex;\n      state.maxResolution = this.getMaxResolution();\n      state.minResolution = Math.max(this.getMinResolution(), 0);\n      state.minZoom = this.getMinZoom();\n      state.maxZoom = this.getMaxZoom();\n      this.state_ = state;\n      return state;\n    }\n\n    /**\n     * @abstract\n     * @param {Array<import(\"./Layer.js\").default>} [array] Array of layers (to be\n     *     modified in place).\n     * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n     */\n  }, {\n    key: \"getLayersArray\",\n    value: function getLayersArray(array) {\n      return abstract();\n    }\n\n    /**\n     * @abstract\n     * @param {Array<import(\"./Layer.js\").State>} [states] Optional list of layer\n     *     states (to be modified in place).\n     * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n     */\n  }, {\n    key: \"getLayerStatesArray\",\n    value: function getLayerStatesArray(states) {\n      return abstract();\n    }\n\n    /**\n     * Return the {@link module:ol/extent~Extent extent} of the layer or `undefined` if it\n     * will be visible regardless of extent.\n     * @return {import(\"../extent.js\").Extent|undefined} The layer extent.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getExtent\",\n    value: function getExtent() {\n      return (/** @type {import(\"../extent.js\").Extent|undefined} */\n        this.get(LayerProperty.EXTENT)\n      );\n    }\n\n    /**\n     * Return the maximum resolution of the layer.\n     * @return {number} The maximum resolution of the layer.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getMaxResolution\",\n    value: function getMaxResolution() {\n      return (/** @type {number} */this.get(LayerProperty.MAX_RESOLUTION)\n      );\n    }\n\n    /**\n     * Return the minimum resolution of the layer.\n     * @return {number} The minimum resolution of the layer.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getMinResolution\",\n    value: function getMinResolution() {\n      return (/** @type {number} */this.get(LayerProperty.MIN_RESOLUTION)\n      );\n    }\n\n    /**\n     * Return the minimum zoom level of the layer.\n     * @return {number} The minimum zoom level of the layer.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getMinZoom\",\n    value: function getMinZoom() {\n      return (/** @type {number} */this.get(LayerProperty.MIN_ZOOM)\n      );\n    }\n\n    /**\n     * Return the maximum zoom level of the layer.\n     * @return {number} The maximum zoom level of the layer.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getMaxZoom\",\n    value: function getMaxZoom() {\n      return (/** @type {number} */this.get(LayerProperty.MAX_ZOOM)\n      );\n    }\n\n    /**\n     * Return the opacity of the layer (between 0 and 1).\n     * @return {number} The opacity of the layer.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getOpacity\",\n    value: function getOpacity() {\n      return (/** @type {number} */this.get(LayerProperty.OPACITY)\n      );\n    }\n\n    /**\n     * @abstract\n     * @return {import(\"../source/Source.js\").State} Source state.\n     */\n  }, {\n    key: \"getSourceState\",\n    value: function getSourceState() {\n      return abstract();\n    }\n\n    /**\n     * Return the visibility of the layer (`true` or `false`).\n     * @return {boolean} The visibility of the layer.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getVisible\",\n    value: function getVisible() {\n      return (/** @type {boolean} */this.get(LayerProperty.VISIBLE)\n      );\n    }\n\n    /**\n     * Return the Z-index of the layer, which is used to order layers before\n     * rendering. The default Z-index is 0.\n     * @return {number} The Z-index of the layer.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getZIndex\",\n    value: function getZIndex() {\n      return (/** @type {number} */this.get(LayerProperty.Z_INDEX)\n      );\n    }\n\n    /**\n     * Sets the background color.\n     * @param {BackgroundColor} [background] Background color.\n     */\n  }, {\n    key: \"setBackground\",\n    value: function setBackground(background) {\n      this.background_ = background;\n      this.changed();\n    }\n\n    /**\n     * Set the extent at which the layer is visible.  If `undefined`, the layer\n     * will be visible at all extents.\n     * @param {import(\"../extent.js\").Extent|undefined} extent The extent of the layer.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setExtent\",\n    value: function setExtent(extent) {\n      this.set(LayerProperty.EXTENT, extent);\n    }\n\n    /**\n     * Set the maximum resolution at which the layer is visible.\n     * @param {number} maxResolution The maximum resolution of the layer.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setMaxResolution\",\n    value: function setMaxResolution(maxResolution) {\n      this.set(LayerProperty.MAX_RESOLUTION, maxResolution);\n    }\n\n    /**\n     * Set the minimum resolution at which the layer is visible.\n     * @param {number} minResolution The minimum resolution of the layer.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setMinResolution\",\n    value: function setMinResolution(minResolution) {\n      this.set(LayerProperty.MIN_RESOLUTION, minResolution);\n    }\n\n    /**\n     * Set the maximum zoom (exclusive) at which the layer is visible.\n     * Note that the zoom levels for layer visibility are based on the\n     * view zoom level, which may be different from a tile source zoom level.\n     * @param {number} maxZoom The maximum zoom of the layer.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setMaxZoom\",\n    value: function setMaxZoom(maxZoom) {\n      this.set(LayerProperty.MAX_ZOOM, maxZoom);\n    }\n\n    /**\n     * Set the minimum zoom (inclusive) at which the layer is visible.\n     * Note that the zoom levels for layer visibility are based on the\n     * view zoom level, which may be different from a tile source zoom level.\n     * @param {number} minZoom The minimum zoom of the layer.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setMinZoom\",\n    value: function setMinZoom(minZoom) {\n      this.set(LayerProperty.MIN_ZOOM, minZoom);\n    }\n\n    /**\n     * Set the opacity of the layer, allowed values range from 0 to 1.\n     * @param {number} opacity The opacity of the layer.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setOpacity\",\n    value: function setOpacity(opacity) {\n      assert(typeof opacity === 'number', 64); // Layer opacity must be a number\n      this.set(LayerProperty.OPACITY, opacity);\n    }\n\n    /**\n     * Set the visibility of the layer (`true` or `false`).\n     * @param {boolean} visible The visibility of the layer.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setVisible\",\n    value: function setVisible(visible) {\n      this.set(LayerProperty.VISIBLE, visible);\n    }\n\n    /**\n     * Set Z-index of the layer, which is used to order layers before rendering.\n     * The default Z-index is 0.\n     * @param {number} zindex The z-index of the layer.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setZIndex\",\n    value: function setZIndex(zindex) {\n      this.set(LayerProperty.Z_INDEX, zindex);\n    }\n\n    /**\n     * Clean up.\n     */\n  }, {\n    key: \"disposeInternal\",\n    value: function disposeInternal() {\n      if (this.state_) {\n        this.state_.layer = null;\n        this.state_ = null;\n      }\n      _get(_getPrototypeOf(BaseLayer.prototype), \"disposeInternal\", this).call(this);\n    }\n  }]);\n  return BaseLayer;\n}(BaseObject);\nexport default BaseLayer;","map":{"version":3,"names":["BaseObject","LayerProperty","abstract","assert","clamp","BaseLayer","_BaseObject","_inherits","_super","_createSuper","options","_this","_classCallCheck","call","on","once","un","background_","background","properties","Object","assign","OPACITY","opacity","undefined","VISIBLE","visible","Z_INDEX","zIndex","MAX_RESOLUTION","maxResolution","Infinity","MIN_RESOLUTION","minResolution","MIN_ZOOM","minZoom","MAX_ZOOM","maxZoom","className_","className","setProperties","state_","_createClass","key","value","getBackground","getClassName","getLayerState","managed","state","layer","getZIndex","Math","round","getOpacity","getVisible","extent","getExtent","getMaxResolution","max","getMinResolution","getMinZoom","getMaxZoom","getLayersArray","array","getLayerStatesArray","states","get","EXTENT","getSourceState","setBackground","changed","setExtent","set","setMaxResolution","setMinResolution","setMaxZoom","setMinZoom","setOpacity","setVisible","setZIndex","zindex","disposeInternal","_get","_getPrototypeOf","prototype"],"sources":["/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/ol/layer/Base.js"],"sourcesContent":["/**\n * @module ol/layer/Base\n */\nimport BaseObject from '../Object.js';\nimport LayerProperty from './Property.js';\nimport {abstract} from '../util.js';\nimport {assert} from '../asserts.js';\nimport {clamp} from '../math.js';\n\n/**\n * A css color, or a function called with a view resolution returning a css color.\n *\n * @typedef {string|function(number):string} BackgroundColor\n * @api\n */\n\n/**\n * @typedef {import(\"../ObjectEventType\").Types|'change:extent'|'change:maxResolution'|'change:maxZoom'|\n *    'change:minResolution'|'change:minZoom'|'change:opacity'|'change:visible'|'change:zIndex'} BaseLayerObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<BaseLayerObjectEventTypes, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|BaseLayerObjectEventTypes, Return>} BaseLayerOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {BackgroundColor} [background] Background color for the layer. If not specified, no background\n * will be rendered.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Note that with {@link module:ol/layer/Base~BaseLayer} and all its subclasses, any property set in\n * the options is set as a {@link module:ol/Object~BaseObject} property on the layer object, so\n * is observable, and has get/set accessors.\n *\n * @api\n */\nclass BaseLayer extends BaseObject {\n  /**\n   * @param {Options} options Layer options.\n   */\n  constructor(options) {\n    super();\n\n    /***\n     * @type {BaseLayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {BaseLayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {BaseLayerOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @type {BackgroundColor|false}\n     * @private\n     */\n    this.background_ = options.background;\n\n    /**\n     * @type {Object<string, *>}\n     */\n    const properties = Object.assign({}, options);\n    if (typeof options.properties === 'object') {\n      delete properties.properties;\n      Object.assign(properties, options.properties);\n    }\n\n    properties[LayerProperty.OPACITY] =\n      options.opacity !== undefined ? options.opacity : 1;\n    assert(typeof properties[LayerProperty.OPACITY] === 'number', 64); // Layer opacity must be a number\n\n    properties[LayerProperty.VISIBLE] =\n      options.visible !== undefined ? options.visible : true;\n    properties[LayerProperty.Z_INDEX] = options.zIndex;\n    properties[LayerProperty.MAX_RESOLUTION] =\n      options.maxResolution !== undefined ? options.maxResolution : Infinity;\n    properties[LayerProperty.MIN_RESOLUTION] =\n      options.minResolution !== undefined ? options.minResolution : 0;\n    properties[LayerProperty.MIN_ZOOM] =\n      options.minZoom !== undefined ? options.minZoom : -Infinity;\n    properties[LayerProperty.MAX_ZOOM] =\n      options.maxZoom !== undefined ? options.maxZoom : Infinity;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.className_ =\n      properties.className !== undefined ? properties.className : 'ol-layer';\n    delete properties.className;\n\n    this.setProperties(properties);\n\n    /**\n     * @type {import(\"./Layer.js\").State}\n     * @private\n     */\n    this.state_ = null;\n  }\n\n  /**\n   * Get the background for this layer.\n   * @return {BackgroundColor|false} Layer background.\n   */\n  getBackground() {\n    return this.background_;\n  }\n\n  /**\n   * @return {string} CSS class name.\n   */\n  getClassName() {\n    return this.className_;\n  }\n\n  /**\n   * This method is not meant to be called by layers or layer renderers because the state\n   * is incorrect if the layer is included in a layer group.\n   *\n   * @param {boolean} [managed] Layer is managed.\n   * @return {import(\"./Layer.js\").State} Layer state.\n   */\n  getLayerState(managed) {\n    /** @type {import(\"./Layer.js\").State} */\n    const state =\n      this.state_ ||\n      /** @type {?} */ ({\n        layer: this,\n        managed: managed === undefined ? true : managed,\n      });\n    const zIndex = this.getZIndex();\n    state.opacity = clamp(Math.round(this.getOpacity() * 100) / 100, 0, 1);\n    state.visible = this.getVisible();\n    state.extent = this.getExtent();\n    state.zIndex = zIndex === undefined && !state.managed ? Infinity : zIndex;\n    state.maxResolution = this.getMaxResolution();\n    state.minResolution = Math.max(this.getMinResolution(), 0);\n    state.minZoom = this.getMinZoom();\n    state.maxZoom = this.getMaxZoom();\n    this.state_ = state;\n\n    return state;\n  }\n\n  /**\n   * @abstract\n   * @param {Array<import(\"./Layer.js\").default>} [array] Array of layers (to be\n   *     modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   */\n  getLayersArray(array) {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @param {Array<import(\"./Layer.js\").State>} [states] Optional list of layer\n   *     states (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n   */\n  getLayerStatesArray(states) {\n    return abstract();\n  }\n\n  /**\n   * Return the {@link module:ol/extent~Extent extent} of the layer or `undefined` if it\n   * will be visible regardless of extent.\n   * @return {import(\"../extent.js\").Extent|undefined} The layer extent.\n   * @observable\n   * @api\n   */\n  getExtent() {\n    return /** @type {import(\"../extent.js\").Extent|undefined} */ (\n      this.get(LayerProperty.EXTENT)\n    );\n  }\n\n  /**\n   * Return the maximum resolution of the layer.\n   * @return {number} The maximum resolution of the layer.\n   * @observable\n   * @api\n   */\n  getMaxResolution() {\n    return /** @type {number} */ (this.get(LayerProperty.MAX_RESOLUTION));\n  }\n\n  /**\n   * Return the minimum resolution of the layer.\n   * @return {number} The minimum resolution of the layer.\n   * @observable\n   * @api\n   */\n  getMinResolution() {\n    return /** @type {number} */ (this.get(LayerProperty.MIN_RESOLUTION));\n  }\n\n  /**\n   * Return the minimum zoom level of the layer.\n   * @return {number} The minimum zoom level of the layer.\n   * @observable\n   * @api\n   */\n  getMinZoom() {\n    return /** @type {number} */ (this.get(LayerProperty.MIN_ZOOM));\n  }\n\n  /**\n   * Return the maximum zoom level of the layer.\n   * @return {number} The maximum zoom level of the layer.\n   * @observable\n   * @api\n   */\n  getMaxZoom() {\n    return /** @type {number} */ (this.get(LayerProperty.MAX_ZOOM));\n  }\n\n  /**\n   * Return the opacity of the layer (between 0 and 1).\n   * @return {number} The opacity of the layer.\n   * @observable\n   * @api\n   */\n  getOpacity() {\n    return /** @type {number} */ (this.get(LayerProperty.OPACITY));\n  }\n\n  /**\n   * @abstract\n   * @return {import(\"../source/Source.js\").State} Source state.\n   */\n  getSourceState() {\n    return abstract();\n  }\n\n  /**\n   * Return the visibility of the layer (`true` or `false`).\n   * @return {boolean} The visibility of the layer.\n   * @observable\n   * @api\n   */\n  getVisible() {\n    return /** @type {boolean} */ (this.get(LayerProperty.VISIBLE));\n  }\n\n  /**\n   * Return the Z-index of the layer, which is used to order layers before\n   * rendering. The default Z-index is 0.\n   * @return {number} The Z-index of the layer.\n   * @observable\n   * @api\n   */\n  getZIndex() {\n    return /** @type {number} */ (this.get(LayerProperty.Z_INDEX));\n  }\n\n  /**\n   * Sets the background color.\n   * @param {BackgroundColor} [background] Background color.\n   */\n  setBackground(background) {\n    this.background_ = background;\n    this.changed();\n  }\n\n  /**\n   * Set the extent at which the layer is visible.  If `undefined`, the layer\n   * will be visible at all extents.\n   * @param {import(\"../extent.js\").Extent|undefined} extent The extent of the layer.\n   * @observable\n   * @api\n   */\n  setExtent(extent) {\n    this.set(LayerProperty.EXTENT, extent);\n  }\n\n  /**\n   * Set the maximum resolution at which the layer is visible.\n   * @param {number} maxResolution The maximum resolution of the layer.\n   * @observable\n   * @api\n   */\n  setMaxResolution(maxResolution) {\n    this.set(LayerProperty.MAX_RESOLUTION, maxResolution);\n  }\n\n  /**\n   * Set the minimum resolution at which the layer is visible.\n   * @param {number} minResolution The minimum resolution of the layer.\n   * @observable\n   * @api\n   */\n  setMinResolution(minResolution) {\n    this.set(LayerProperty.MIN_RESOLUTION, minResolution);\n  }\n\n  /**\n   * Set the maximum zoom (exclusive) at which the layer is visible.\n   * Note that the zoom levels for layer visibility are based on the\n   * view zoom level, which may be different from a tile source zoom level.\n   * @param {number} maxZoom The maximum zoom of the layer.\n   * @observable\n   * @api\n   */\n  setMaxZoom(maxZoom) {\n    this.set(LayerProperty.MAX_ZOOM, maxZoom);\n  }\n\n  /**\n   * Set the minimum zoom (inclusive) at which the layer is visible.\n   * Note that the zoom levels for layer visibility are based on the\n   * view zoom level, which may be different from a tile source zoom level.\n   * @param {number} minZoom The minimum zoom of the layer.\n   * @observable\n   * @api\n   */\n  setMinZoom(minZoom) {\n    this.set(LayerProperty.MIN_ZOOM, minZoom);\n  }\n\n  /**\n   * Set the opacity of the layer, allowed values range from 0 to 1.\n   * @param {number} opacity The opacity of the layer.\n   * @observable\n   * @api\n   */\n  setOpacity(opacity) {\n    assert(typeof opacity === 'number', 64); // Layer opacity must be a number\n    this.set(LayerProperty.OPACITY, opacity);\n  }\n\n  /**\n   * Set the visibility of the layer (`true` or `false`).\n   * @param {boolean} visible The visibility of the layer.\n   * @observable\n   * @api\n   */\n  setVisible(visible) {\n    this.set(LayerProperty.VISIBLE, visible);\n  }\n\n  /**\n   * Set Z-index of the layer, which is used to order layers before rendering.\n   * The default Z-index is 0.\n   * @param {number} zindex The z-index of the layer.\n   * @observable\n   * @api\n   */\n  setZIndex(zindex) {\n    this.set(LayerProperty.Z_INDEX, zindex);\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    if (this.state_) {\n      this.state_.layer = null;\n      this.state_ = null;\n    }\n    super.disposeInternal();\n  }\n}\n\nexport default BaseLayer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}