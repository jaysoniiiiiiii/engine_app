{"ast":null,"code":"import _classCallCheck from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * @module ol/interaction/Pointer\n */\nimport Interaction from './Interaction.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\n\n/**\n * @typedef {Object} Options\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleDownEvent]\n * Function handling \"down\" events. If the function returns `true` then a drag\n * sequence is started.\n * @property {function(import(\"../MapBrowserEvent.js\").default):void} [handleDragEvent]\n * Function handling \"drag\" events. This function is called on \"move\" events\n * during a drag sequence.\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleEvent]\n * Method called by the map to notify the interaction that a browser event was\n * dispatched to the map. The function may return `false` to prevent the\n * propagation of the event to other interactions in the map's interactions\n * chain.\n * @property {function(import(\"../MapBrowserEvent.js\").default):void} [handleMoveEvent]\n * Function handling \"move\" events. This function is called on \"move\" events.\n * This functions is also called during a drag sequence, so during a drag\n * sequence both the `handleDragEvent` function and this function are called.\n * If `handleDownEvent` is defined and it returns true this function will not\n * be called during a drag sequence.\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleUpEvent]\n *  Function handling \"up\" events. If the function returns `false` then the\n * current drag sequence is stopped.\n * @property {function(boolean):boolean} [stopDown]\n * Should the down event be propagated to other interactions, or should be\n * stopped?\n */\n\n/**\n * @classdesc\n * Base class that calls user-defined functions on `down`, `move` and `up`\n * events. This class also manages \"drag sequences\".\n *\n * When the `handleDownEvent` user function returns `true` a drag sequence is\n * started. During a drag sequence the `handleDragEvent` user function is\n * called on `move` events. The drag sequence ends when the `handleUpEvent`\n * user function is called and returns `false`.\n * @api\n */\nvar PointerInteraction = /*#__PURE__*/function (_Interaction) {\n  _inherits(PointerInteraction, _Interaction);\n  var _super = _createSuper(PointerInteraction);\n  /**\n   * @param {Options} [options] Options.\n   */\n  function PointerInteraction(options) {\n    var _this;\n    _classCallCheck(this, PointerInteraction);\n    options = options ? options : {};\n    _this = _super.call(this, /** @type {import(\"./Interaction.js\").InteractionOptions} */options);\n    if (options.handleDownEvent) {\n      _this.handleDownEvent = options.handleDownEvent;\n    }\n    if (options.handleDragEvent) {\n      _this.handleDragEvent = options.handleDragEvent;\n    }\n    if (options.handleMoveEvent) {\n      _this.handleMoveEvent = options.handleMoveEvent;\n    }\n    if (options.handleUpEvent) {\n      _this.handleUpEvent = options.handleUpEvent;\n    }\n    if (options.stopDown) {\n      _this.stopDown = options.stopDown;\n    }\n\n    /**\n     * @type {boolean}\n     * @protected\n     */\n    _this.handlingDownUpSequence = false;\n\n    /**\n     * @type {Array<PointerEvent>}\n     * @protected\n     */\n    _this.targetPointers = [];\n    return _this;\n  }\n\n  /**\n   * Returns the current number of pointers involved in the interaction,\n   * e.g. `2` when two fingers are used.\n   * @return {number} The number of pointers.\n   * @api\n   */\n  _createClass(PointerInteraction, [{\n    key: \"getPointerCount\",\n    value: function getPointerCount() {\n      return this.targetPointers.length;\n    }\n\n    /**\n     * Handle pointer down events.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n     * @return {boolean} If the event was consumed.\n     * @protected\n     */\n  }, {\n    key: \"handleDownEvent\",\n    value: function handleDownEvent(mapBrowserEvent) {\n      return false;\n    }\n\n    /**\n     * Handle pointer drag events.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n     * @protected\n     */\n  }, {\n    key: \"handleDragEvent\",\n    value: function handleDragEvent(mapBrowserEvent) {}\n\n    /**\n     * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may call into\n     * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are\n     * detected.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n     * @return {boolean} `false` to stop event propagation.\n     * @api\n     */\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(mapBrowserEvent) {\n      if (!mapBrowserEvent.originalEvent) {\n        return true;\n      }\n      var stopEvent = false;\n      this.updateTrackedPointers_(mapBrowserEvent);\n      if (this.handlingDownUpSequence) {\n        if (mapBrowserEvent.type == MapBrowserEventType.POINTERDRAG) {\n          this.handleDragEvent(mapBrowserEvent);\n          // prevent page scrolling during dragging\n          mapBrowserEvent.originalEvent.preventDefault();\n        } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {\n          var handledUp = this.handleUpEvent(mapBrowserEvent);\n          this.handlingDownUpSequence = handledUp && this.targetPointers.length > 0;\n        }\n      } else {\n        if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {\n          var handled = this.handleDownEvent(mapBrowserEvent);\n          this.handlingDownUpSequence = handled;\n          stopEvent = this.stopDown(handled);\n        } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE) {\n          this.handleMoveEvent(mapBrowserEvent);\n        }\n      }\n      return !stopEvent;\n    }\n\n    /**\n     * Handle pointer move events.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n     * @protected\n     */\n  }, {\n    key: \"handleMoveEvent\",\n    value: function handleMoveEvent(mapBrowserEvent) {}\n\n    /**\n     * Handle pointer up events.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n     * @return {boolean} If the event was consumed.\n     * @protected\n     */\n  }, {\n    key: \"handleUpEvent\",\n    value: function handleUpEvent(mapBrowserEvent) {\n      return false;\n    }\n\n    /**\n     * This function is used to determine if \"down\" events should be propagated\n     * to other interactions or should be stopped.\n     * @param {boolean} handled Was the event handled by the interaction?\n     * @return {boolean} Should the `down` event be stopped?\n     */\n  }, {\n    key: \"stopDown\",\n    value: function stopDown(handled) {\n      return handled;\n    }\n\n    /**\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n     * @private\n     */\n  }, {\n    key: \"updateTrackedPointers_\",\n    value: function updateTrackedPointers_(mapBrowserEvent) {\n      if (mapBrowserEvent.activePointers) {\n        this.targetPointers = mapBrowserEvent.activePointers;\n      }\n    }\n  }]);\n  return PointerInteraction;\n}(Interaction);\n/**\n * @param {Array<PointerEvent>} pointerEvents List of events.\n * @return {{clientX: number, clientY: number}} Centroid pixel.\n */\nexport function centroid(pointerEvents) {\n  var length = pointerEvents.length;\n  var clientX = 0;\n  var clientY = 0;\n  for (var i = 0; i < length; i++) {\n    clientX += pointerEvents[i].clientX;\n    clientY += pointerEvents[i].clientY;\n  }\n  return {\n    clientX: clientX / length,\n    clientY: clientY / length\n  };\n}\nexport default PointerInteraction;","map":{"version":3,"names":["Interaction","MapBrowserEventType","PointerInteraction","_Interaction","_inherits","_super","_createSuper","options","_this","_classCallCheck","call","handleDownEvent","handleDragEvent","handleMoveEvent","handleUpEvent","stopDown","handlingDownUpSequence","targetPointers","_createClass","key","value","getPointerCount","length","mapBrowserEvent","handleEvent","originalEvent","stopEvent","updateTrackedPointers_","type","POINTERDRAG","preventDefault","POINTERUP","handledUp","POINTERDOWN","handled","POINTERMOVE","activePointers","centroid","pointerEvents","clientX","clientY","i"],"sources":["/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/ol/interaction/Pointer.js"],"sourcesContent":["/**\n * @module ol/interaction/Pointer\n */\nimport Interaction from './Interaction.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\n\n/**\n * @typedef {Object} Options\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleDownEvent]\n * Function handling \"down\" events. If the function returns `true` then a drag\n * sequence is started.\n * @property {function(import(\"../MapBrowserEvent.js\").default):void} [handleDragEvent]\n * Function handling \"drag\" events. This function is called on \"move\" events\n * during a drag sequence.\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleEvent]\n * Method called by the map to notify the interaction that a browser event was\n * dispatched to the map. The function may return `false` to prevent the\n * propagation of the event to other interactions in the map's interactions\n * chain.\n * @property {function(import(\"../MapBrowserEvent.js\").default):void} [handleMoveEvent]\n * Function handling \"move\" events. This function is called on \"move\" events.\n * This functions is also called during a drag sequence, so during a drag\n * sequence both the `handleDragEvent` function and this function are called.\n * If `handleDownEvent` is defined and it returns true this function will not\n * be called during a drag sequence.\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleUpEvent]\n *  Function handling \"up\" events. If the function returns `false` then the\n * current drag sequence is stopped.\n * @property {function(boolean):boolean} [stopDown]\n * Should the down event be propagated to other interactions, or should be\n * stopped?\n */\n\n/**\n * @classdesc\n * Base class that calls user-defined functions on `down`, `move` and `up`\n * events. This class also manages \"drag sequences\".\n *\n * When the `handleDownEvent` user function returns `true` a drag sequence is\n * started. During a drag sequence the `handleDragEvent` user function is\n * called on `move` events. The drag sequence ends when the `handleUpEvent`\n * user function is called and returns `false`.\n * @api\n */\nclass PointerInteraction extends Interaction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super(\n      /** @type {import(\"./Interaction.js\").InteractionOptions} */ (options)\n    );\n\n    if (options.handleDownEvent) {\n      this.handleDownEvent = options.handleDownEvent;\n    }\n\n    if (options.handleDragEvent) {\n      this.handleDragEvent = options.handleDragEvent;\n    }\n\n    if (options.handleMoveEvent) {\n      this.handleMoveEvent = options.handleMoveEvent;\n    }\n\n    if (options.handleUpEvent) {\n      this.handleUpEvent = options.handleUpEvent;\n    }\n\n    if (options.stopDown) {\n      this.stopDown = options.stopDown;\n    }\n\n    /**\n     * @type {boolean}\n     * @protected\n     */\n    this.handlingDownUpSequence = false;\n\n    /**\n     * @type {Array<PointerEvent>}\n     * @protected\n     */\n    this.targetPointers = [];\n  }\n\n  /**\n   * Returns the current number of pointers involved in the interaction,\n   * e.g. `2` when two fingers are used.\n   * @return {number} The number of pointers.\n   * @api\n   */\n  getPointerCount() {\n    return this.targetPointers.length;\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   * @protected\n   */\n  handleDownEvent(mapBrowserEvent) {\n    return false;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @protected\n   */\n  handleDragEvent(mapBrowserEvent) {}\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may call into\n   * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are\n   * detected.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @api\n   */\n  handleEvent(mapBrowserEvent) {\n    if (!mapBrowserEvent.originalEvent) {\n      return true;\n    }\n\n    let stopEvent = false;\n    this.updateTrackedPointers_(mapBrowserEvent);\n    if (this.handlingDownUpSequence) {\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERDRAG) {\n        this.handleDragEvent(mapBrowserEvent);\n        // prevent page scrolling during dragging\n        mapBrowserEvent.originalEvent.preventDefault();\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {\n        const handledUp = this.handleUpEvent(mapBrowserEvent);\n        this.handlingDownUpSequence =\n          handledUp && this.targetPointers.length > 0;\n      }\n    } else {\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {\n        const handled = this.handleDownEvent(mapBrowserEvent);\n        this.handlingDownUpSequence = handled;\n        stopEvent = this.stopDown(handled);\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE) {\n        this.handleMoveEvent(mapBrowserEvent);\n      }\n    }\n    return !stopEvent;\n  }\n\n  /**\n   * Handle pointer move events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @protected\n   */\n  handleMoveEvent(mapBrowserEvent) {}\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   * @protected\n   */\n  handleUpEvent(mapBrowserEvent) {\n    return false;\n  }\n\n  /**\n   * This function is used to determine if \"down\" events should be propagated\n   * to other interactions or should be stopped.\n   * @param {boolean} handled Was the event handled by the interaction?\n   * @return {boolean} Should the `down` event be stopped?\n   */\n  stopDown(handled) {\n    return handled;\n  }\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @private\n   */\n  updateTrackedPointers_(mapBrowserEvent) {\n    if (mapBrowserEvent.activePointers) {\n      this.targetPointers = mapBrowserEvent.activePointers;\n    }\n  }\n}\n\n/**\n * @param {Array<PointerEvent>} pointerEvents List of events.\n * @return {{clientX: number, clientY: number}} Centroid pixel.\n */\nexport function centroid(pointerEvents) {\n  const length = pointerEvents.length;\n  let clientX = 0;\n  let clientY = 0;\n  for (let i = 0; i < length; i++) {\n    clientX += pointerEvents[i].clientX;\n    clientY += pointerEvents[i].clientY;\n  }\n  return {clientX: clientX / length, clientY: clientY / length};\n}\n\nexport default PointerInteraction;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}