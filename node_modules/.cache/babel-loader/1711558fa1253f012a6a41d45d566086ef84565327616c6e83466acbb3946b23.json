{"ast":null,"code":"import _classCallCheck from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * @module ol/layer/Layer\n */\nimport BaseLayer from './Base.js';\nimport EventType from '../events/EventType.js';\nimport LayerProperty from './Property.js';\nimport RenderEventType from '../render/EventType.js';\nimport View from '../View.js';\nimport { assert } from '../asserts.js';\nimport { intersects } from '../extent.js';\nimport { listen, unlistenByKey } from '../events.js';\n\n/**\n * @typedef {function(import(\"../Map.js\").FrameState):HTMLElement} RenderFunction\n */\n\n/**\n * @typedef {'sourceready'|'change:source'} LayerEventType\n */\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     LayerEventType, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|LayerEventType|\n *     import(\"../render/EventType\").LayerRenderEventTypes, Return>} LayerOnSignature\n */\n\n/**\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {SourceType} [source] Source for this layer.  If not provided to the constructor,\n * the source can be set by calling {@link module:ol/layer/Layer~Layer#setSource layer.setSource(source)} after\n * construction.\n * @property {import(\"../Map.js\").default|null} [map] Map.\n * @property {RenderFunction} [render] Render function. Takes the frame state as input and is expected to return an\n * HTML element. Will overwrite the default rendering for the layer.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @typedef {Object} State\n * @property {import(\"./Layer.js\").default} layer Layer.\n * @property {number} opacity Opacity, the value is rounded to two digits to appear after the decimal point.\n * @property {boolean} visible Visible.\n * @property {boolean} managed Managed.\n * @property {import(\"../extent.js\").Extent} [extent] Extent.\n * @property {number} zIndex ZIndex.\n * @property {number} maxResolution Maximum resolution.\n * @property {number} minResolution Minimum resolution.\n * @property {number} minZoom Minimum zoom.\n * @property {number} maxZoom Maximum zoom.\n */\n\n/**\n * @classdesc\n * Base class from which all layer types are derived. This should only be instantiated\n * in the case where a custom layer is added to the map with a custom `render` function.\n * Such a function can be specified in the `options` object, and is expected to return an HTML element.\n *\n * A visual representation of raster or vector map data.\n * Layers group together those properties that pertain to how the data is to be\n * displayed, irrespective of the source of that data.\n *\n * Layers are usually added to a map with [map.addLayer()]{@link import(\"../Map.js\").default#addLayer}.\n * Components like {@link module:ol/interaction/Draw~Draw} use unmanaged layers\n * internally. These unmanaged layers are associated with the map using\n * [layer.setMap()]{@link module:ol/layer/Layer~Layer#setMap} instead.\n *\n * A generic `change` event is fired when the state of the source changes.\n * A `sourceready` event is fired when the layer's source is ready.\n *\n * @fires import(\"../render/Event.js\").RenderEvent#prerender\n * @fires import(\"../render/Event.js\").RenderEvent#postrender\n * @fires import(\"../events/Event.js\").BaseEvent#sourceready\n *\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\n * @template {import(\"../renderer/Layer.js\").default} [RendererType=import(\"../renderer/Layer.js\").default]\n * @api\n */\nvar Layer = /*#__PURE__*/function (_BaseLayer) {\n  _inherits(Layer, _BaseLayer);\n  var _super = _createSuper(Layer);\n  /**\n   * @param {Options<SourceType>} options Layer options.\n   */\n  function Layer(options) {\n    var _this;\n    _classCallCheck(this, Layer);\n    var baseOptions = Object.assign({}, options);\n    delete baseOptions.source;\n    _this = _super.call(this, baseOptions);\n\n    /***\n     * @type {LayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this.on;\n\n    /***\n     * @type {LayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this.once;\n\n    /***\n     * @type {LayerOnSignature<void>}\n     */\n    _this.un;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    _this.mapPrecomposeKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    _this.mapRenderKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    _this.sourceChangeKey_ = null;\n\n    /**\n     * @private\n     * @type {RendererType}\n     */\n    _this.renderer_ = null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.sourceReady_ = false;\n\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    _this.rendered = false;\n\n    // Overwrite default render method with a custom one\n    if (options.render) {\n      _this.render = options.render;\n    }\n    if (options.map) {\n      _this.setMap(options.map);\n    }\n    _this.addChangeListener(LayerProperty.SOURCE, _this.handleSourcePropertyChange_);\n    var source = options.source ? /** @type {SourceType} */options.source : null;\n    _this.setSource(source);\n    return _this;\n  }\n\n  /**\n   * @param {Array<import(\"./Layer.js\").default>} [array] Array of layers (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   */\n  _createClass(Layer, [{\n    key: \"getLayersArray\",\n    value: function getLayersArray(array) {\n      array = array ? array : [];\n      array.push(this);\n      return array;\n    }\n\n    /**\n     * @param {Array<import(\"./Layer.js\").State>} [states] Optional list of layer states (to be modified in place).\n     * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n     */\n  }, {\n    key: \"getLayerStatesArray\",\n    value: function getLayerStatesArray(states) {\n      states = states ? states : [];\n      states.push(this.getLayerState());\n      return states;\n    }\n\n    /**\n     * Get the layer source.\n     * @return {SourceType|null} The layer source (or `null` if not yet set).\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getSource\",\n    value: function getSource() {\n      return (/** @type {SourceType} */this.get(LayerProperty.SOURCE) || null\n      );\n    }\n\n    /**\n     * @return {SourceType|null} The source being rendered.\n     */\n  }, {\n    key: \"getRenderSource\",\n    value: function getRenderSource() {\n      return this.getSource();\n    }\n\n    /**\n     * @return {import(\"../source/Source.js\").State} Source state.\n     */\n  }, {\n    key: \"getSourceState\",\n    value: function getSourceState() {\n      var source = this.getSource();\n      return !source ? 'undefined' : source.getState();\n    }\n\n    /**\n     * @private\n     */\n  }, {\n    key: \"handleSourceChange_\",\n    value: function handleSourceChange_() {\n      this.changed();\n      if (this.sourceReady_ || this.getSource().getState() !== 'ready') {\n        return;\n      }\n      this.sourceReady_ = true;\n      this.dispatchEvent('sourceready');\n    }\n\n    /**\n     * @private\n     */\n  }, {\n    key: \"handleSourcePropertyChange_\",\n    value: function handleSourcePropertyChange_() {\n      var _this2 = this;\n      if (this.sourceChangeKey_) {\n        unlistenByKey(this.sourceChangeKey_);\n        this.sourceChangeKey_ = null;\n      }\n      this.sourceReady_ = false;\n      var source = this.getSource();\n      if (source) {\n        this.sourceChangeKey_ = listen(source, EventType.CHANGE, this.handleSourceChange_, this);\n        if (source.getState() === 'ready') {\n          this.sourceReady_ = true;\n          setTimeout(function () {\n            _this2.dispatchEvent('sourceready');\n          }, 0);\n        }\n      }\n      this.changed();\n    }\n\n    /**\n     * @param {import(\"../pixel\").Pixel} pixel Pixel.\n     * @return {Promise<Array<import(\"../Feature\").FeatureLike>>} Promise that resolves with\n     * an array of features.\n     */\n  }, {\n    key: \"getFeatures\",\n    value: function getFeatures(pixel) {\n      if (!this.renderer_) {\n        return Promise.resolve([]);\n      }\n      return this.renderer_.getFeatures(pixel);\n    }\n\n    /**\n     * @param {import(\"../pixel\").Pixel} pixel Pixel.\n     * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n     */\n  }, {\n    key: \"getData\",\n    value: function getData(pixel) {\n      if (!this.renderer_ || !this.rendered) {\n        return null;\n      }\n      return this.renderer_.getData(pixel);\n    }\n\n    /**\n     * The layer is visible in the given view, i.e. within its min/max resolution or zoom and\n     * extent, and `getVisible()` is `true`.\n     * @param {View|import(\"../View.js\").ViewStateAndExtent} view View or {@link import(\"../Map.js\").FrameState}.\n     * @return {boolean} The layer is visible in the current view.\n     * @api\n     */\n  }, {\n    key: \"isVisible\",\n    value: function isVisible(view) {\n      var frameState;\n      if (view instanceof View) {\n        frameState = {\n          viewState: view.getState(),\n          extent: view.calculateExtent()\n        };\n      } else {\n        frameState = view;\n      }\n      var layerExtent = this.getExtent();\n      return this.getVisible() && inView(this.getLayerState(), frameState.viewState) && (!layerExtent || intersects(layerExtent, frameState.extent));\n    }\n\n    /**\n     * Get the attributions of the source of this layer for the given view.\n     * @param {View|import(\"../View.js\").ViewStateAndExtent} view View or  {@link import(\"../Map.js\").FrameState}.\n     * @return {Array<string>} Attributions for this layer at the given view.\n     * @api\n     */\n  }, {\n    key: \"getAttributions\",\n    value: function getAttributions(view) {\n      if (!this.isVisible(view)) {\n        return [];\n      }\n      var getAttributions;\n      var source = this.getSource();\n      if (source) {\n        getAttributions = source.getAttributions();\n      }\n      if (!getAttributions) {\n        return [];\n      }\n      var frameState = view instanceof View ? view.getViewStateAndExtent() : view;\n      var attributions = getAttributions(frameState);\n      if (!Array.isArray(attributions)) {\n        attributions = [attributions];\n      }\n      return attributions;\n    }\n\n    /**\n     * In charge to manage the rendering of the layer. One layer type is\n     * bounded with one layer renderer.\n     * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\n     * @param {HTMLElement} target Target which the renderer may (but need not) use\n     * for rendering its content.\n     * @return {HTMLElement} The rendered element.\n     */\n  }, {\n    key: \"render\",\n    value: function render(frameState, target) {\n      var layerRenderer = this.getRenderer();\n      if (layerRenderer.prepareFrame(frameState)) {\n        this.rendered = true;\n        return layerRenderer.renderFrame(frameState, target);\n      }\n    }\n\n    /**\n     * Called when a layer is not visible during a map render.\n     */\n  }, {\n    key: \"unrender\",\n    value: function unrender() {\n      this.rendered = false;\n    }\n\n    /**\n     * For use inside the library only.\n     * @param {import(\"../Map.js\").default|null} map Map.\n     */\n  }, {\n    key: \"setMapInternal\",\n    value: function setMapInternal(map) {\n      if (!map) {\n        this.unrender();\n      }\n      this.set(LayerProperty.MAP, map);\n    }\n\n    /**\n     * For use inside the library only.\n     * @return {import(\"../Map.js\").default|null} Map.\n     */\n  }, {\n    key: \"getMapInternal\",\n    value: function getMapInternal() {\n      return this.get(LayerProperty.MAP);\n    }\n\n    /**\n     * Sets the layer to be rendered on top of other layers on a map. The map will\n     * not manage this layer in its layers collection. This\n     * is useful for temporary layers. To remove an unmanaged layer from the map,\n     * use `#setMap(null)`.\n     *\n     * To add the layer to a map and have it managed by the map, use\n     * {@link module:ol/Map~Map#addLayer} instead.\n     * @param {import(\"../Map.js\").default|null} map Map.\n     * @api\n     */\n  }, {\n    key: \"setMap\",\n    value: function setMap(map) {\n      if (this.mapPrecomposeKey_) {\n        unlistenByKey(this.mapPrecomposeKey_);\n        this.mapPrecomposeKey_ = null;\n      }\n      if (!map) {\n        this.changed();\n      }\n      if (this.mapRenderKey_) {\n        unlistenByKey(this.mapRenderKey_);\n        this.mapRenderKey_ = null;\n      }\n      if (map) {\n        this.mapPrecomposeKey_ = listen(map, RenderEventType.PRECOMPOSE, function (evt) {\n          var renderEvent = /** @type {import(\"../render/Event.js\").default} */evt;\n          var layerStatesArray = renderEvent.frameState.layerStatesArray;\n          var layerState = this.getLayerState(false);\n          // A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both.\n          assert(!layerStatesArray.some(function (arrayLayerState) {\n            return arrayLayerState.layer === layerState.layer;\n          }), 67);\n          layerStatesArray.push(layerState);\n        }, this);\n        this.mapRenderKey_ = listen(this, EventType.CHANGE, map.render, map);\n        this.changed();\n      }\n    }\n\n    /**\n     * Set the layer source.\n     * @param {SourceType|null} source The layer source.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setSource\",\n    value: function setSource(source) {\n      this.set(LayerProperty.SOURCE, source);\n    }\n\n    /**\n     * Get the renderer for this layer.\n     * @return {RendererType|null} The layer renderer.\n     */\n  }, {\n    key: \"getRenderer\",\n    value: function getRenderer() {\n      if (!this.renderer_) {\n        this.renderer_ = this.createRenderer();\n      }\n      return this.renderer_;\n    }\n\n    /**\n     * @return {boolean} The layer has a renderer.\n     */\n  }, {\n    key: \"hasRenderer\",\n    value: function hasRenderer() {\n      return !!this.renderer_;\n    }\n\n    /**\n     * Create a renderer for this layer.\n     * @return {RendererType} A layer renderer.\n     * @protected\n     */\n  }, {\n    key: \"createRenderer\",\n    value: function createRenderer() {\n      return null;\n    }\n\n    /**\n     * Clean up.\n     */\n  }, {\n    key: \"disposeInternal\",\n    value: function disposeInternal() {\n      if (this.renderer_) {\n        this.renderer_.dispose();\n        delete this.renderer_;\n      }\n      this.setSource(null);\n      _get(_getPrototypeOf(Layer.prototype), \"disposeInternal\", this).call(this);\n    }\n  }]);\n  return Layer;\n}(BaseLayer);\n/**\n * Return `true` if the layer is visible and if the provided view state\n * has resolution and zoom levels that are in range of the layer's min/max.\n * @param {State} layerState Layer state.\n * @param {import(\"../View.js\").State} viewState View state.\n * @return {boolean} The layer is visible at the given view state.\n */\nexport function inView(layerState, viewState) {\n  if (!layerState.visible) {\n    return false;\n  }\n  var resolution = viewState.resolution;\n  if (resolution < layerState.minResolution || resolution >= layerState.maxResolution) {\n    return false;\n  }\n  var zoom = viewState.zoom;\n  return zoom > layerState.minZoom && zoom <= layerState.maxZoom;\n}\nexport default Layer;","map":{"version":3,"names":["BaseLayer","EventType","LayerProperty","RenderEventType","View","assert","intersects","listen","unlistenByKey","Layer","_BaseLayer","_inherits","_super","_createSuper","options","_this","_classCallCheck","baseOptions","Object","assign","source","call","on","once","un","mapPrecomposeKey_","mapRenderKey_","sourceChangeKey_","renderer_","sourceReady_","rendered","render","map","setMap","addChangeListener","SOURCE","handleSourcePropertyChange_","setSource","_createClass","key","value","getLayersArray","array","push","getLayerStatesArray","states","getLayerState","getSource","get","getRenderSource","getSourceState","getState","handleSourceChange_","changed","dispatchEvent","_this2","CHANGE","setTimeout","getFeatures","pixel","Promise","resolve","getData","isVisible","view","frameState","viewState","extent","calculateExtent","layerExtent","getExtent","getVisible","inView","getAttributions","getViewStateAndExtent","attributions","Array","isArray","target","layerRenderer","getRenderer","prepareFrame","renderFrame","unrender","setMapInternal","set","MAP","getMapInternal","PRECOMPOSE","evt","renderEvent","layerStatesArray","layerState","some","arrayLayerState","layer","createRenderer","hasRenderer","disposeInternal","dispose","_get","_getPrototypeOf","prototype","visible","resolution","minResolution","maxResolution","zoom","minZoom","maxZoom"],"sources":["/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/ol/layer/Layer.js"],"sourcesContent":["/**\n * @module ol/layer/Layer\n */\nimport BaseLayer from './Base.js';\nimport EventType from '../events/EventType.js';\nimport LayerProperty from './Property.js';\nimport RenderEventType from '../render/EventType.js';\nimport View from '../View.js';\nimport {assert} from '../asserts.js';\nimport {intersects} from '../extent.js';\nimport {listen, unlistenByKey} from '../events.js';\n\n/**\n * @typedef {function(import(\"../Map.js\").FrameState):HTMLElement} RenderFunction\n */\n\n/**\n * @typedef {'sourceready'|'change:source'} LayerEventType\n */\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     LayerEventType, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|LayerEventType|\n *     import(\"../render/EventType\").LayerRenderEventTypes, Return>} LayerOnSignature\n */\n\n/**\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {SourceType} [source] Source for this layer.  If not provided to the constructor,\n * the source can be set by calling {@link module:ol/layer/Layer~Layer#setSource layer.setSource(source)} after\n * construction.\n * @property {import(\"../Map.js\").default|null} [map] Map.\n * @property {RenderFunction} [render] Render function. Takes the frame state as input and is expected to return an\n * HTML element. Will overwrite the default rendering for the layer.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @typedef {Object} State\n * @property {import(\"./Layer.js\").default} layer Layer.\n * @property {number} opacity Opacity, the value is rounded to two digits to appear after the decimal point.\n * @property {boolean} visible Visible.\n * @property {boolean} managed Managed.\n * @property {import(\"../extent.js\").Extent} [extent] Extent.\n * @property {number} zIndex ZIndex.\n * @property {number} maxResolution Maximum resolution.\n * @property {number} minResolution Minimum resolution.\n * @property {number} minZoom Minimum zoom.\n * @property {number} maxZoom Maximum zoom.\n */\n\n/**\n * @classdesc\n * Base class from which all layer types are derived. This should only be instantiated\n * in the case where a custom layer is added to the map with a custom `render` function.\n * Such a function can be specified in the `options` object, and is expected to return an HTML element.\n *\n * A visual representation of raster or vector map data.\n * Layers group together those properties that pertain to how the data is to be\n * displayed, irrespective of the source of that data.\n *\n * Layers are usually added to a map with [map.addLayer()]{@link import(\"../Map.js\").default#addLayer}.\n * Components like {@link module:ol/interaction/Draw~Draw} use unmanaged layers\n * internally. These unmanaged layers are associated with the map using\n * [layer.setMap()]{@link module:ol/layer/Layer~Layer#setMap} instead.\n *\n * A generic `change` event is fired when the state of the source changes.\n * A `sourceready` event is fired when the layer's source is ready.\n *\n * @fires import(\"../render/Event.js\").RenderEvent#prerender\n * @fires import(\"../render/Event.js\").RenderEvent#postrender\n * @fires import(\"../events/Event.js\").BaseEvent#sourceready\n *\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\n * @template {import(\"../renderer/Layer.js\").default} [RendererType=import(\"../renderer/Layer.js\").default]\n * @api\n */\nclass Layer extends BaseLayer {\n  /**\n   * @param {Options<SourceType>} options Layer options.\n   */\n  constructor(options) {\n    const baseOptions = Object.assign({}, options);\n    delete baseOptions.source;\n\n    super(baseOptions);\n\n    /***\n     * @type {LayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {LayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {LayerOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.mapPrecomposeKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.mapRenderKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.sourceChangeKey_ = null;\n\n    /**\n     * @private\n     * @type {RendererType}\n     */\n    this.renderer_ = null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.sourceReady_ = false;\n\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    this.rendered = false;\n\n    // Overwrite default render method with a custom one\n    if (options.render) {\n      this.render = options.render;\n    }\n\n    if (options.map) {\n      this.setMap(options.map);\n    }\n\n    this.addChangeListener(\n      LayerProperty.SOURCE,\n      this.handleSourcePropertyChange_\n    );\n\n    const source = options.source\n      ? /** @type {SourceType} */ (options.source)\n      : null;\n    this.setSource(source);\n  }\n\n  /**\n   * @param {Array<import(\"./Layer.js\").default>} [array] Array of layers (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   */\n  getLayersArray(array) {\n    array = array ? array : [];\n    array.push(this);\n    return array;\n  }\n\n  /**\n   * @param {Array<import(\"./Layer.js\").State>} [states] Optional list of layer states (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n   */\n  getLayerStatesArray(states) {\n    states = states ? states : [];\n    states.push(this.getLayerState());\n    return states;\n  }\n\n  /**\n   * Get the layer source.\n   * @return {SourceType|null} The layer source (or `null` if not yet set).\n   * @observable\n   * @api\n   */\n  getSource() {\n    return /** @type {SourceType} */ (this.get(LayerProperty.SOURCE)) || null;\n  }\n\n  /**\n   * @return {SourceType|null} The source being rendered.\n   */\n  getRenderSource() {\n    return this.getSource();\n  }\n\n  /**\n   * @return {import(\"../source/Source.js\").State} Source state.\n   */\n  getSourceState() {\n    const source = this.getSource();\n    return !source ? 'undefined' : source.getState();\n  }\n\n  /**\n   * @private\n   */\n  handleSourceChange_() {\n    this.changed();\n    if (this.sourceReady_ || this.getSource().getState() !== 'ready') {\n      return;\n    }\n    this.sourceReady_ = true;\n    this.dispatchEvent('sourceready');\n  }\n\n  /**\n   * @private\n   */\n  handleSourcePropertyChange_() {\n    if (this.sourceChangeKey_) {\n      unlistenByKey(this.sourceChangeKey_);\n      this.sourceChangeKey_ = null;\n    }\n    this.sourceReady_ = false;\n    const source = this.getSource();\n    if (source) {\n      this.sourceChangeKey_ = listen(\n        source,\n        EventType.CHANGE,\n        this.handleSourceChange_,\n        this\n      );\n      if (source.getState() === 'ready') {\n        this.sourceReady_ = true;\n        setTimeout(() => {\n          this.dispatchEvent('sourceready');\n        }, 0);\n      }\n    }\n    this.changed();\n  }\n\n  /**\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../Feature\").FeatureLike>>} Promise that resolves with\n   * an array of features.\n   */\n  getFeatures(pixel) {\n    if (!this.renderer_) {\n      return Promise.resolve([]);\n    }\n    return this.renderer_.getFeatures(pixel);\n  }\n\n  /**\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   */\n  getData(pixel) {\n    if (!this.renderer_ || !this.rendered) {\n      return null;\n    }\n    return this.renderer_.getData(pixel);\n  }\n\n  /**\n   * The layer is visible in the given view, i.e. within its min/max resolution or zoom and\n   * extent, and `getVisible()` is `true`.\n   * @param {View|import(\"../View.js\").ViewStateAndExtent} view View or {@link import(\"../Map.js\").FrameState}.\n   * @return {boolean} The layer is visible in the current view.\n   * @api\n   */\n  isVisible(view) {\n    let frameState;\n    if (view instanceof View) {\n      frameState = {\n        viewState: view.getState(),\n        extent: view.calculateExtent(),\n      };\n    } else {\n      frameState = view;\n    }\n    const layerExtent = this.getExtent();\n    return (\n      this.getVisible() &&\n      inView(this.getLayerState(), frameState.viewState) &&\n      (!layerExtent || intersects(layerExtent, frameState.extent))\n    );\n  }\n\n  /**\n   * Get the attributions of the source of this layer for the given view.\n   * @param {View|import(\"../View.js\").ViewStateAndExtent} view View or  {@link import(\"../Map.js\").FrameState}.\n   * @return {Array<string>} Attributions for this layer at the given view.\n   * @api\n   */\n  getAttributions(view) {\n    if (!this.isVisible(view)) {\n      return [];\n    }\n    let getAttributions;\n    const source = this.getSource();\n    if (source) {\n      getAttributions = source.getAttributions();\n    }\n    if (!getAttributions) {\n      return [];\n    }\n    const frameState =\n      view instanceof View ? view.getViewStateAndExtent() : view;\n    let attributions = getAttributions(frameState);\n    if (!Array.isArray(attributions)) {\n      attributions = [attributions];\n    }\n    return attributions;\n  }\n\n  /**\n   * In charge to manage the rendering of the layer. One layer type is\n   * bounded with one layer renderer.\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target which the renderer may (but need not) use\n   * for rendering its content.\n   * @return {HTMLElement} The rendered element.\n   */\n  render(frameState, target) {\n    const layerRenderer = this.getRenderer();\n\n    if (layerRenderer.prepareFrame(frameState)) {\n      this.rendered = true;\n      return layerRenderer.renderFrame(frameState, target);\n    }\n  }\n\n  /**\n   * Called when a layer is not visible during a map render.\n   */\n  unrender() {\n    this.rendered = false;\n  }\n\n  /**\n   * For use inside the library only.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   */\n  setMapInternal(map) {\n    if (!map) {\n      this.unrender();\n    }\n    this.set(LayerProperty.MAP, map);\n  }\n\n  /**\n   * For use inside the library only.\n   * @return {import(\"../Map.js\").default|null} Map.\n   */\n  getMapInternal() {\n    return this.get(LayerProperty.MAP);\n  }\n\n  /**\n   * Sets the layer to be rendered on top of other layers on a map. The map will\n   * not manage this layer in its layers collection. This\n   * is useful for temporary layers. To remove an unmanaged layer from the map,\n   * use `#setMap(null)`.\n   *\n   * To add the layer to a map and have it managed by the map, use\n   * {@link module:ol/Map~Map#addLayer} instead.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   */\n  setMap(map) {\n    if (this.mapPrecomposeKey_) {\n      unlistenByKey(this.mapPrecomposeKey_);\n      this.mapPrecomposeKey_ = null;\n    }\n    if (!map) {\n      this.changed();\n    }\n    if (this.mapRenderKey_) {\n      unlistenByKey(this.mapRenderKey_);\n      this.mapRenderKey_ = null;\n    }\n    if (map) {\n      this.mapPrecomposeKey_ = listen(\n        map,\n        RenderEventType.PRECOMPOSE,\n        function (evt) {\n          const renderEvent =\n            /** @type {import(\"../render/Event.js\").default} */ (evt);\n          const layerStatesArray = renderEvent.frameState.layerStatesArray;\n          const layerState = this.getLayerState(false);\n          // A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both.\n          assert(\n            !layerStatesArray.some(function (arrayLayerState) {\n              return arrayLayerState.layer === layerState.layer;\n            }),\n            67\n          );\n          layerStatesArray.push(layerState);\n        },\n        this\n      );\n      this.mapRenderKey_ = listen(this, EventType.CHANGE, map.render, map);\n      this.changed();\n    }\n  }\n\n  /**\n   * Set the layer source.\n   * @param {SourceType|null} source The layer source.\n   * @observable\n   * @api\n   */\n  setSource(source) {\n    this.set(LayerProperty.SOURCE, source);\n  }\n\n  /**\n   * Get the renderer for this layer.\n   * @return {RendererType|null} The layer renderer.\n   */\n  getRenderer() {\n    if (!this.renderer_) {\n      this.renderer_ = this.createRenderer();\n    }\n    return this.renderer_;\n  }\n\n  /**\n   * @return {boolean} The layer has a renderer.\n   */\n  hasRenderer() {\n    return !!this.renderer_;\n  }\n\n  /**\n   * Create a renderer for this layer.\n   * @return {RendererType} A layer renderer.\n   * @protected\n   */\n  createRenderer() {\n    return null;\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    if (this.renderer_) {\n      this.renderer_.dispose();\n      delete this.renderer_;\n    }\n\n    this.setSource(null);\n    super.disposeInternal();\n  }\n}\n\n/**\n * Return `true` if the layer is visible and if the provided view state\n * has resolution and zoom levels that are in range of the layer's min/max.\n * @param {State} layerState Layer state.\n * @param {import(\"../View.js\").State} viewState View state.\n * @return {boolean} The layer is visible at the given view state.\n */\nexport function inView(layerState, viewState) {\n  if (!layerState.visible) {\n    return false;\n  }\n  const resolution = viewState.resolution;\n  if (\n    resolution < layerState.minResolution ||\n    resolution >= layerState.maxResolution\n  ) {\n    return false;\n  }\n  const zoom = viewState.zoom;\n  return zoom > layerState.minZoom && zoom <= layerState.maxZoom;\n}\n\nexport default Layer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}