{"ast":null,"code":"import _classCallCheck from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * @module ol/View\n */\nimport BaseObject from './Object.js';\nimport ViewHint from './ViewHint.js';\nimport ViewProperty from './ViewProperty.js';\nimport { DEFAULT_TILE_SIZE } from './tilegrid/common.js';\nimport { METERS_PER_UNIT, createProjection, disableCoordinateWarning, fromUserCoordinate, fromUserExtent, getUserProjection, toUserCoordinate, toUserExtent } from './proj.js';\nimport { VOID } from './functions.js';\nimport { add as addCoordinate, equals as coordinatesEqual, equals, rotate as rotateCoordinate } from './coordinate.js';\nimport { assert } from './asserts.js';\nimport { none as centerNone, createExtent } from './centerconstraint.js';\nimport { clamp, modulo } from './math.js';\nimport { createMinMaxResolution, createSnapToPower, createSnapToResolutions } from './resolutionconstraint.js';\nimport { createSnapToN, createSnapToZero, disable, none as rotationNone } from './rotationconstraint.js';\nimport { easeOut, inAndOut } from './easing.js';\nimport { getCenter, getForViewAndSize, getHeight, getWidth, isEmpty } from './extent.js';\nimport { linearFindNearest } from './array.js';\nimport { fromExtent as polygonFromExtent } from './geom/Polygon.js';\n\n/**\n * An animation configuration\n *\n * @typedef {Object} Animation\n * @property {import(\"./coordinate.js\").Coordinate} [sourceCenter] Source center.\n * @property {import(\"./coordinate.js\").Coordinate} [targetCenter] Target center.\n * @property {number} [sourceResolution] Source resolution.\n * @property {number} [targetResolution] Target resolution.\n * @property {number} [sourceRotation] Source rotation.\n * @property {number} [targetRotation] Target rotation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Anchor.\n * @property {number} start Start.\n * @property {number} duration Duration.\n * @property {boolean} complete Complete.\n * @property {function(number):number} easing Easing.\n * @property {function(boolean):void} callback Callback.\n */\n\n/**\n * @typedef {Object} Constraints\n * @property {import(\"./centerconstraint.js\").Type} center Center.\n * @property {import(\"./resolutionconstraint.js\").Type} resolution Resolution.\n * @property {import(\"./rotationconstraint.js\").Type} rotation Rotation.\n */\n\n/**\n * @typedef {Object} FitOptions\n * @property {import(\"./size.js\").Size} [size] The size in pixels of the box to fit\n * the extent into. Default is the current size of the first map in the DOM that\n * uses this view, or `[100, 100]` if no such map is found.\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be\n * cleared inside the view. Values in the array are top, right, bottom and left\n * padding.\n * @property {boolean} [nearest=false] If the view `constrainResolution` option is `true`,\n * get the nearest extent instead of the closest that actually fits the view.\n * @property {number} [minResolution=0] Minimum resolution that we zoom to.\n * @property {number} [maxZoom] Maximum zoom level that we zoom to. If\n * `minResolution` is given, this property is ignored.\n * @property {number} [duration] The duration of the animation in milliseconds.\n * By default, there is no animation to the target extent.\n * @property {function(number):number} [easing] The easing function used during\n * the animation (defaults to {@link module:ol/easing.inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n * @property {function(boolean):void} [callback] Function called when the view is in\n * its final position. The callback will be called with `true` if the animation\n * series completed on its own or `false` if it was cancelled.\n */\n\n/**\n * @typedef {Object} ViewOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The initial center for\n * the view. If a user projection is not set, the coordinate system for the center is\n * specified with the `projection` option. Layer sources will not be fetched if this\n * is not set, but the center can be set later with {@link #setCenter}.\n * @property {boolean|number} [constrainRotation=true] Rotation constraint.\n * `false` means no constraint. `true` means no constraint, but snap to zero\n * near zero. A number constrains the rotation to that number of values. For\n * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.\n * @property {boolean} [enableRotation=true] Enable rotation.\n * If `false`, a rotation constraint that always sets the rotation to zero is\n * used. The `constrainRotation` option has no effect if `enableRotation` is\n * `false`.\n * @property {import(\"./extent.js\").Extent} [extent] The extent that constrains the\n * view, in other words, nothing outside of this extent can be visible on the map.\n * @property {boolean} [constrainOnlyCenter=false] If true, the extent\n * constraint will only apply to the view center and not the whole extent.\n * @property {boolean} [smoothExtentConstraint=true] If true, the extent\n * constraint will be applied smoothly, i.e. allow the view to go slightly outside\n * of the given `extent`.\n * @property {number} [maxResolution] The maximum resolution used to determine\n * the resolution constraint. It is used together with `minResolution` (or\n * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way\n * that the projection's validity extent fits in a 256x256 px tile. If the\n * projection is Spherical Mercator (the default) then `maxResolution` defaults\n * to `40075016.68557849 / 256 = 156543.03392804097`.\n * @property {number} [minResolution] The minimum resolution used to determine\n * the resolution constraint.  It is used together with `maxResolution` (or\n * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29\n * zoom levels (with a factor of 2). If the projection is Spherical Mercator\n * (the default) then `minResolution` defaults to\n * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.\n * @property {number} [maxZoom=28] The maximum zoom level used to determine the\n * resolution constraint. It is used together with `minZoom` (or\n * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also\n * provided, it is given precedence over `maxZoom`.\n * @property {number} [minZoom=0] The minimum zoom level used to determine the\n * resolution constraint. It is used together with `maxZoom` (or\n * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also\n * provided, it is given precedence over `minZoom`.\n * @property {boolean} [multiWorld=false] If `false` the view is constrained so\n * only one world is visible, and you cannot pan off the edge.  If `true` the map\n * may show multiple worlds at low zoom levels.  Only used if the `projection` is\n * global.  Note that if `extent` is also provided it is given precedence.\n * @property {boolean} [constrainResolution=false] If true, the view will always\n * animate to the closest zoom level after an interaction; false means\n * intermediary zoom levels are allowed.\n * @property {boolean} [smoothResolutionConstraint=true] If true, the resolution\n * min/max values will be applied smoothly, i. e. allow the view to exceed slightly\n * the given resolution or zoom bounds.\n * @property {boolean} [showFullExtent=false] Allow the view to be zoomed out to\n * show the full configured extent. By default, when a view is configured with an\n * extent, users will not be able to zoom out so the viewport exceeds the extent in\n * either dimension. This means the full extent may not be visible if the viewport\n * is taller or wider than the aspect ratio of the configured extent. If\n * showFullExtent is true, the user will be able to zoom out so that the viewport\n * exceeds the height or width of the configured extent, but not both, allowing the\n * full extent to be shown.\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857'] The\n * projection. The default is Spherical Mercator.\n * @property {number} [resolution] The initial resolution for the view. The\n * units are `projection` units per pixel (e.g. meters per pixel). An\n * alternative to setting this is to set `zoom`. Layer sources will not be\n * fetched if neither this nor `zoom` are defined, but they can be set later\n * with {@link #setZoom} or {@link #setResolution}.\n * @property {Array<number>} [resolutions] Resolutions that determine the\n * zoom levels if specified. The index in the array corresponds to the zoom level,\n * therefore the resolution values have to be in descending order. It also constrains\n * the resolution by the minimum and maximum value. If set the `maxResolution`,\n * `minResolution`, `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.\n * @property {number} [rotation=0] The initial rotation for the view in radians\n * (positive rotation clockwise, 0 means North).\n * @property {number} [zoom] Only used if `resolution` is not defined. Zoom\n * level used to calculate the initial resolution for the view.\n * @property {number} [zoomFactor=2] The zoom factor used to compute the\n * corresponding resolution.\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in css pixels).\n * If the map viewport is partially covered with other content (overlays) along\n * its edges, this setting allows to shift the center of the viewport away from\n * that content. The order of the values is top, right, bottom, left.\n */\n\n/**\n * @typedef {Object} AnimationOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The center of the view at the end of\n * the animation.\n * @property {number} [zoom] The zoom level of the view at the end of the\n * animation. This takes precedence over `resolution`.\n * @property {number} [resolution] The resolution of the view at the end\n * of the animation.  If `zoom` is also provided, this option will be ignored.\n * @property {number} [rotation] The rotation of the view at the end of\n * the animation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Optional anchor to remain fixed\n * during a rotation or resolution animation.\n * @property {number} [duration=1000] The duration of the animation in milliseconds.\n * @property {function(number):number} [easing] The easing function used\n * during the animation (defaults to {@link module:ol/easing.inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n */\n\n/**\n * @typedef {Object} State\n * @property {import(\"./coordinate.js\").Coordinate} center Center.\n * @property {import(\"./proj/Projection.js\").default} projection Projection.\n * @property {number} resolution Resolution.\n * @property {import(\"./coordinate.js\").Coordinate} [nextCenter] The next center during an animation series.\n * @property {number} [nextResolution] The next resolution during an animation series.\n * @property {number} [nextRotation] The next rotation during an animation series.\n * @property {number} rotation Rotation.\n * @property {number} zoom Zoom.\n */\n\n/**\n * Like {@link import(\"./Map.js\").FrameState}, but just `viewState` and `extent`.\n * @typedef {Object} ViewStateAndExtent\n * @property {State} viewState View state.\n * @property {import(\"./extent.js\").Extent} extent Extent.\n */\n\n/**\n * Default min zoom level for the map view.\n * @type {number}\n */\nvar DEFAULT_MIN_ZOOM = 0;\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:center'|'change:resolution'|'change:rotation'} ViewObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<ViewObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|ViewObjectEventTypes, Return>} ViewOnSignature\n */\n\n/**\n * @classdesc\n * A View object represents a simple 2D view of the map.\n *\n * This is the object to act upon to change the center, resolution,\n * and rotation of the map.\n *\n * A View has a `projection`. The projection determines the\n * coordinate system of the center, and its units determine the units of the\n * resolution (projection units per pixel). The default projection is\n * Web Mercator (EPSG:3857).\n *\n * ### The view states\n *\n * A View is determined by three states: `center`, `resolution`,\n * and `rotation`. Each state has a corresponding getter and setter, e.g.\n * `getCenter` and `setCenter` for the `center` state.\n *\n * The `zoom` state is actually not saved on the view: all computations\n * internally use the `resolution` state. Still, the `setZoom` and `getZoom`\n * methods are available, as well as `getResolutionForZoom` and\n * `getZoomForResolution` to switch from one system to the other.\n *\n * ### The constraints\n *\n * `setCenter`, `setResolution` and `setRotation` can be used to change the\n * states of the view, but any constraint defined in the constructor will\n * be applied along the way.\n *\n * A View object can have a *resolution constraint*, a *rotation constraint*\n * and a *center constraint*.\n *\n * The *resolution constraint* typically restricts min/max values and\n * snaps to specific resolutions. It is determined by the following\n * options: `resolutions`, `maxResolution`, `maxZoom` and `zoomFactor`.\n * If `resolutions` is set, the other three options are ignored. See\n * documentation for each option for more information. By default, the view\n * only has a min/max restriction and allow intermediary zoom levels when\n * pinch-zooming for example.\n *\n * The *rotation constraint* snaps to specific angles. It is determined\n * by the following options: `enableRotation` and `constrainRotation`.\n * By default rotation is allowed and its value is snapped to zero when approaching the\n * horizontal.\n *\n * The *center constraint* is determined by the `extent` option. By\n * default the view center is not constrained at all.\n *\n * ### Changing the view state\n *\n * It is important to note that `setZoom`, `setResolution`, `setCenter` and\n * `setRotation` are subject to the above mentioned constraints. As such, it\n * may sometimes not be possible to know in advance the resulting state of the\n * View. For example, calling `setResolution(10)` does not guarantee that\n * `getResolution()` will return `10`.\n *\n * A consequence of this is that, when applying a delta on the view state, one\n * should use `adjustCenter`, `adjustRotation`, `adjustZoom` and `adjustResolution`\n * rather than the corresponding setters. This will let view do its internal\n * computations. Besides, the `adjust*` methods also take an `anchor`\n * argument which allows specifying an origin for the transformation.\n *\n * ### Interacting with the view\n *\n * View constraints are usually only applied when the view is *at rest*, meaning that\n * no interaction or animation is ongoing. As such, if the user puts the view in a\n * state that is not equivalent to a constrained one (e.g. rotating the view when\n * the snap angle is 0), an animation will be triggered at the interaction end to\n * put back the view to a stable state;\n *\n * @api\n */\nvar View = /*#__PURE__*/function (_BaseObject) {\n  _inherits(View, _BaseObject);\n  var _super = _createSuper(View);\n  /**\n   * @param {ViewOptions} [options] View options.\n   */\n  function View(options) {\n    var _this;\n    _classCallCheck(this, View);\n    _this = _super.call(this);\n\n    /***\n     * @type {ViewOnSignature<import(\"./events\").EventsKey>}\n     */\n    _this.on;\n\n    /***\n     * @type {ViewOnSignature<import(\"./events\").EventsKey>}\n     */\n    _this.once;\n\n    /***\n     * @type {ViewOnSignature<void>}\n     */\n    _this.un;\n    options = Object.assign({}, options);\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    _this.hints_ = [0, 0];\n\n    /**\n     * @private\n     * @type {Array<Array<Animation>>}\n     */\n    _this.animations_ = [];\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    _this.updateAnimationKey_;\n\n    /**\n     * @private\n     * @const\n     * @type {import(\"./proj/Projection.js\").default}\n     */\n    _this.projection_ = createProjection(options.projection, 'EPSG:3857');\n\n    /**\n     * @private\n     * @type {import(\"./size.js\").Size}\n     */\n    _this.viewportSize_ = [100, 100];\n\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate|undefined}\n     */\n    _this.targetCenter_ = null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    _this.targetResolution_;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    _this.targetRotation_;\n\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate}\n     */\n    _this.nextCenter_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.nextResolution_;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.nextRotation_;\n\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate|undefined}\n     */\n    _this.cancelAnchor_ = undefined;\n    if (options.projection) {\n      disableCoordinateWarning();\n    }\n    if (options.center) {\n      options.center = fromUserCoordinate(options.center, _this.projection_);\n    }\n    if (options.extent) {\n      options.extent = fromUserExtent(options.extent, _this.projection_);\n    }\n    _this.applyOptions_(options);\n    return _this;\n  }\n\n  /**\n   * Set up the view with the given options.\n   * @param {ViewOptions} options View options.\n   */\n  _createClass(View, [{\n    key: \"applyOptions_\",\n    value: function applyOptions_(options) {\n      var properties = Object.assign({}, options);\n      for (var key in ViewProperty) {\n        delete properties[key];\n      }\n      this.setProperties(properties, true);\n      var resolutionConstraintInfo = createResolutionConstraint(options);\n\n      /**\n       * @private\n       * @type {number}\n       */\n      this.maxResolution_ = resolutionConstraintInfo.maxResolution;\n\n      /**\n       * @private\n       * @type {number}\n       */\n      this.minResolution_ = resolutionConstraintInfo.minResolution;\n\n      /**\n       * @private\n       * @type {number}\n       */\n      this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;\n\n      /**\n       * @private\n       * @type {Array<number>|undefined}\n       */\n      this.resolutions_ = options.resolutions;\n\n      /**\n       * @type {Array<number>|undefined}\n       * @private\n       */\n      this.padding_ = options.padding;\n\n      /**\n       * @private\n       * @type {number}\n       */\n      this.minZoom_ = resolutionConstraintInfo.minZoom;\n      var centerConstraint = createCenterConstraint(options);\n      var resolutionConstraint = resolutionConstraintInfo.constraint;\n      var rotationConstraint = createRotationConstraint(options);\n\n      /**\n       * @private\n       * @type {Constraints}\n       */\n      this.constraints_ = {\n        center: centerConstraint,\n        resolution: resolutionConstraint,\n        rotation: rotationConstraint\n      };\n      this.setRotation(options.rotation !== undefined ? options.rotation : 0);\n      this.setCenterInternal(options.center !== undefined ? options.center : null);\n      if (options.resolution !== undefined) {\n        this.setResolution(options.resolution);\n      } else if (options.zoom !== undefined) {\n        this.setZoom(options.zoom);\n      }\n    }\n\n    /**\n     * Padding (in css pixels).\n     * If the map viewport is partially covered with other content (overlays) along\n     * its edges, this setting allows to shift the center of the viewport away from that\n     * content. The order of the values in the array is top, right, bottom, left.\n     * The default is no padding, which is equivalent to `[0, 0, 0, 0]`.\n     * @type {Array<number>|undefined}\n     * @api\n     */\n  }, {\n    key: \"padding\",\n    get: function get() {\n      return this.padding_;\n    },\n    set: function set(padding) {\n      var oldPadding = this.padding_;\n      this.padding_ = padding;\n      var center = this.getCenterInternal();\n      if (center) {\n        var newPadding = padding || [0, 0, 0, 0];\n        oldPadding = oldPadding || [0, 0, 0, 0];\n        var resolution = this.getResolution();\n        var offsetX = resolution / 2 * (newPadding[3] - oldPadding[3] + oldPadding[1] - newPadding[1]);\n        var offsetY = resolution / 2 * (newPadding[0] - oldPadding[0] + oldPadding[2] - newPadding[2]);\n        this.setCenterInternal([center[0] + offsetX, center[1] - offsetY]);\n      }\n    }\n\n    /**\n     * Get an updated version of the view options used to construct the view.  The\n     * current resolution (or zoom), center, and rotation are applied to any stored\n     * options.  The provided options can be used to apply new min/max zoom or\n     * resolution limits.\n     * @param {ViewOptions} newOptions New options to be applied.\n     * @return {ViewOptions} New options updated with the current view state.\n     */\n  }, {\n    key: \"getUpdatedOptions_\",\n    value: function getUpdatedOptions_(newOptions) {\n      var options = this.getProperties();\n\n      // preserve resolution (or zoom)\n      if (options.resolution !== undefined) {\n        options.resolution = this.getResolution();\n      } else {\n        options.zoom = this.getZoom();\n      }\n\n      // preserve center\n      options.center = this.getCenterInternal();\n\n      // preserve rotation\n      options.rotation = this.getRotation();\n      return Object.assign({}, options, newOptions);\n    }\n\n    /**\n     * Animate the view.  The view's center, zoom (or resolution), and rotation\n     * can be animated for smooth transitions between view states.  For example,\n     * to animate the view to a new zoom level:\n     *\n     *     view.animate({zoom: view.getZoom() + 1});\n     *\n     * By default, the animation lasts one second and uses in-and-out easing.  You\n     * can customize this behavior by including `duration` (in milliseconds) and\n     * `easing` options (see {@link module:ol/easing}).\n     *\n     * To chain together multiple animations, call the method with multiple\n     * animation objects.  For example, to first zoom and then pan:\n     *\n     *     view.animate({zoom: 10}, {center: [0, 0]});\n     *\n     * If you provide a function as the last argument to the animate method, it\n     * will get called at the end of an animation series.  The callback will be\n     * called with `true` if the animation series completed on its own or `false`\n     * if it was cancelled.\n     *\n     * Animations are cancelled by user interactions (e.g. dragging the map) or by\n     * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`\n     * (or another method that calls one of these).\n     *\n     * @param {...(AnimationOptions|function(boolean): void)} var_args Animation\n     *     options.  Multiple animations can be run in series by passing multiple\n     *     options objects.  To run multiple animations in parallel, call the method\n     *     multiple times.  An optional callback can be provided as a final\n     *     argument.  The callback will be called with a boolean indicating whether\n     *     the animation completed without being cancelled.\n     * @api\n     */\n  }, {\n    key: \"animate\",\n    value: function animate(var_args) {\n      if (this.isDef() && !this.getAnimating()) {\n        this.resolveConstraints(0);\n      }\n      var args = new Array(arguments.length);\n      for (var i = 0; i < args.length; ++i) {\n        var options = arguments[i];\n        if (options.center) {\n          options = Object.assign({}, options);\n          options.center = fromUserCoordinate(options.center, this.getProjection());\n        }\n        if (options.anchor) {\n          options = Object.assign({}, options);\n          options.anchor = fromUserCoordinate(options.anchor, this.getProjection());\n        }\n        args[i] = options;\n      }\n      this.animateInternal.apply(this, args);\n    }\n\n    /**\n     * @param {...(AnimationOptions|function(boolean): void)} var_args Animation options.\n     */\n  }, {\n    key: \"animateInternal\",\n    value: function animateInternal(var_args) {\n      var animationCount = arguments.length;\n      var callback;\n      if (animationCount > 1 && typeof arguments[animationCount - 1] === 'function') {\n        callback = arguments[animationCount - 1];\n        --animationCount;\n      }\n      var i = 0;\n      for (; i < animationCount && !this.isDef(); ++i) {\n        // if view properties are not yet set, shortcut to the final state\n        var state = arguments[i];\n        if (state.center) {\n          this.setCenterInternal(state.center);\n        }\n        if (state.zoom !== undefined) {\n          this.setZoom(state.zoom);\n        } else if (state.resolution) {\n          this.setResolution(state.resolution);\n        }\n        if (state.rotation !== undefined) {\n          this.setRotation(state.rotation);\n        }\n      }\n      if (i === animationCount) {\n        if (callback) {\n          animationCallback(callback, true);\n        }\n        return;\n      }\n      var start = Date.now();\n      var center = this.targetCenter_.slice();\n      var resolution = this.targetResolution_;\n      var rotation = this.targetRotation_;\n      var series = [];\n      for (; i < animationCount; ++i) {\n        var options = /** @type {AnimationOptions} */arguments[i];\n        var animation = {\n          start: start,\n          complete: false,\n          anchor: options.anchor,\n          duration: options.duration !== undefined ? options.duration : 1000,\n          easing: options.easing || inAndOut,\n          callback: callback\n        };\n        if (options.center) {\n          animation.sourceCenter = center;\n          animation.targetCenter = options.center.slice();\n          center = animation.targetCenter;\n        }\n        if (options.zoom !== undefined) {\n          animation.sourceResolution = resolution;\n          animation.targetResolution = this.getResolutionForZoom(options.zoom);\n          resolution = animation.targetResolution;\n        } else if (options.resolution) {\n          animation.sourceResolution = resolution;\n          animation.targetResolution = options.resolution;\n          resolution = animation.targetResolution;\n        }\n        if (options.rotation !== undefined) {\n          animation.sourceRotation = rotation;\n          var delta = modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;\n          animation.targetRotation = rotation + delta;\n          rotation = animation.targetRotation;\n        }\n\n        // check if animation is a no-op\n        if (isNoopAnimation(animation)) {\n          animation.complete = true;\n          // we still push it onto the series for callback handling\n        } else {\n          start += animation.duration;\n        }\n        series.push(animation);\n      }\n      this.animations_.push(series);\n      this.setHint(ViewHint.ANIMATING, 1);\n      this.updateAnimations_();\n    }\n\n    /**\n     * Determine if the view is being animated.\n     * @return {boolean} The view is being animated.\n     * @api\n     */\n  }, {\n    key: \"getAnimating\",\n    value: function getAnimating() {\n      return this.hints_[ViewHint.ANIMATING] > 0;\n    }\n\n    /**\n     * Determine if the user is interacting with the view, such as panning or zooming.\n     * @return {boolean} The view is being interacted with.\n     * @api\n     */\n  }, {\n    key: \"getInteracting\",\n    value: function getInteracting() {\n      return this.hints_[ViewHint.INTERACTING] > 0;\n    }\n\n    /**\n     * Cancel any ongoing animations.\n     * @api\n     */\n  }, {\n    key: \"cancelAnimations\",\n    value: function cancelAnimations() {\n      this.setHint(ViewHint.ANIMATING, -this.hints_[ViewHint.ANIMATING]);\n      var anchor;\n      for (var i = 0, ii = this.animations_.length; i < ii; ++i) {\n        var series = this.animations_[i];\n        if (series[0].callback) {\n          animationCallback(series[0].callback, false);\n        }\n        if (!anchor) {\n          for (var j = 0, jj = series.length; j < jj; ++j) {\n            var animation = series[j];\n            if (!animation.complete) {\n              anchor = animation.anchor;\n              break;\n            }\n          }\n        }\n      }\n      this.animations_.length = 0;\n      this.cancelAnchor_ = anchor;\n      this.nextCenter_ = null;\n      this.nextResolution_ = NaN;\n      this.nextRotation_ = NaN;\n    }\n\n    /**\n     * Update all animations.\n     */\n  }, {\n    key: \"updateAnimations_\",\n    value: function updateAnimations_() {\n      if (this.updateAnimationKey_ !== undefined) {\n        cancelAnimationFrame(this.updateAnimationKey_);\n        this.updateAnimationKey_ = undefined;\n      }\n      if (!this.getAnimating()) {\n        return;\n      }\n      var now = Date.now();\n      var more = false;\n      for (var i = this.animations_.length - 1; i >= 0; --i) {\n        var series = this.animations_[i];\n        var seriesComplete = true;\n        for (var j = 0, jj = series.length; j < jj; ++j) {\n          var animation = series[j];\n          if (animation.complete) {\n            continue;\n          }\n          var elapsed = now - animation.start;\n          var fraction = animation.duration > 0 ? elapsed / animation.duration : 1;\n          if (fraction >= 1) {\n            animation.complete = true;\n            fraction = 1;\n          } else {\n            seriesComplete = false;\n          }\n          var progress = animation.easing(fraction);\n          if (animation.sourceCenter) {\n            var x0 = animation.sourceCenter[0];\n            var y0 = animation.sourceCenter[1];\n            var x1 = animation.targetCenter[0];\n            var y1 = animation.targetCenter[1];\n            this.nextCenter_ = animation.targetCenter;\n            var x = x0 + progress * (x1 - x0);\n            var y = y0 + progress * (y1 - y0);\n            this.targetCenter_ = [x, y];\n          }\n          if (animation.sourceResolution && animation.targetResolution) {\n            var resolution = progress === 1 ? animation.targetResolution : animation.sourceResolution + progress * (animation.targetResolution - animation.sourceResolution);\n            if (animation.anchor) {\n              var size = this.getViewportSize_(this.getRotation());\n              var constrainedResolution = this.constraints_.resolution(resolution, 0, size, true);\n              this.targetCenter_ = this.calculateCenterZoom(constrainedResolution, animation.anchor);\n            }\n            this.nextResolution_ = animation.targetResolution;\n            this.targetResolution_ = resolution;\n            this.applyTargetState_(true);\n          }\n          if (animation.sourceRotation !== undefined && animation.targetRotation !== undefined) {\n            var rotation = progress === 1 ? modulo(animation.targetRotation + Math.PI, 2 * Math.PI) - Math.PI : animation.sourceRotation + progress * (animation.targetRotation - animation.sourceRotation);\n            if (animation.anchor) {\n              var constrainedRotation = this.constraints_.rotation(rotation, true);\n              this.targetCenter_ = this.calculateCenterRotate(constrainedRotation, animation.anchor);\n            }\n            this.nextRotation_ = animation.targetRotation;\n            this.targetRotation_ = rotation;\n          }\n          this.applyTargetState_(true);\n          more = true;\n          if (!animation.complete) {\n            break;\n          }\n        }\n        if (seriesComplete) {\n          this.animations_[i] = null;\n          this.setHint(ViewHint.ANIMATING, -1);\n          this.nextCenter_ = null;\n          this.nextResolution_ = NaN;\n          this.nextRotation_ = NaN;\n          var callback = series[0].callback;\n          if (callback) {\n            animationCallback(callback, true);\n          }\n        }\n      }\n      // prune completed series\n      this.animations_ = this.animations_.filter(Boolean);\n      if (more && this.updateAnimationKey_ === undefined) {\n        this.updateAnimationKey_ = requestAnimationFrame(this.updateAnimations_.bind(this));\n      }\n    }\n\n    /**\n     * @param {number} rotation Target rotation.\n     * @param {import(\"./coordinate.js\").Coordinate} anchor Rotation anchor.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for rotation and anchor.\n     */\n  }, {\n    key: \"calculateCenterRotate\",\n    value: function calculateCenterRotate(rotation, anchor) {\n      var center;\n      var currentCenter = this.getCenterInternal();\n      if (currentCenter !== undefined) {\n        center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];\n        rotateCoordinate(center, rotation - this.getRotation());\n        addCoordinate(center, anchor);\n      }\n      return center;\n    }\n\n    /**\n     * @param {number} resolution Target resolution.\n     * @param {import(\"./coordinate.js\").Coordinate} anchor Zoom anchor.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for resolution and anchor.\n     */\n  }, {\n    key: \"calculateCenterZoom\",\n    value: function calculateCenterZoom(resolution, anchor) {\n      var center;\n      var currentCenter = this.getCenterInternal();\n      var currentResolution = this.getResolution();\n      if (currentCenter !== undefined && currentResolution !== undefined) {\n        var x = anchor[0] - resolution * (anchor[0] - currentCenter[0]) / currentResolution;\n        var y = anchor[1] - resolution * (anchor[1] - currentCenter[1]) / currentResolution;\n        center = [x, y];\n      }\n      return center;\n    }\n\n    /**\n     * Returns the current viewport size.\n     * @private\n     * @param {number} [rotation] Take into account the rotation of the viewport when giving the size\n     * @return {import(\"./size.js\").Size} Viewport size or `[100, 100]` when no viewport is found.\n     */\n  }, {\n    key: \"getViewportSize_\",\n    value: function getViewportSize_(rotation) {\n      var size = this.viewportSize_;\n      if (rotation) {\n        var w = size[0];\n        var h = size[1];\n        return [Math.abs(w * Math.cos(rotation)) + Math.abs(h * Math.sin(rotation)), Math.abs(w * Math.sin(rotation)) + Math.abs(h * Math.cos(rotation))];\n      }\n      return size;\n    }\n\n    /**\n     * Stores the viewport size on the view. The viewport size is not read every time from the DOM\n     * to avoid performance hit and layout reflow.\n     * This should be done on map size change.\n     * Note: the constraints are not resolved during an animation to avoid stopping it\n     * @param {import(\"./size.js\").Size} [size] Viewport size; if undefined, [100, 100] is assumed\n     */\n  }, {\n    key: \"setViewportSize\",\n    value: function setViewportSize(size) {\n      this.viewportSize_ = Array.isArray(size) ? size.slice() : [100, 100];\n      if (!this.getAnimating()) {\n        this.resolveConstraints(0);\n      }\n    }\n\n    /**\n     * Get the view center.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getCenter\",\n    value: function getCenter() {\n      var center = this.getCenterInternal();\n      if (!center) {\n        return center;\n      }\n      return toUserCoordinate(center, this.getProjection());\n    }\n\n    /**\n     * Get the view center without transforming to user projection.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n     */\n  }, {\n    key: \"getCenterInternal\",\n    value: function getCenterInternal() {\n      return (/** @type {import(\"./coordinate.js\").Coordinate|undefined} */\n        this.get(ViewProperty.CENTER)\n      );\n    }\n\n    /**\n     * @return {Constraints} Constraints.\n     */\n  }, {\n    key: \"getConstraints\",\n    value: function getConstraints() {\n      return this.constraints_;\n    }\n\n    /**\n     * @return {boolean} Resolution constraint is set\n     */\n  }, {\n    key: \"getConstrainResolution\",\n    value: function getConstrainResolution() {\n      return this.get('constrainResolution');\n    }\n\n    /**\n     * @param {Array<number>} [hints] Destination array.\n     * @return {Array<number>} Hint.\n     */\n  }, {\n    key: \"getHints\",\n    value: function getHints(hints) {\n      if (hints !== undefined) {\n        hints[0] = this.hints_[0];\n        hints[1] = this.hints_[1];\n        return hints;\n      }\n      return this.hints_.slice();\n    }\n\n    /**\n     * Calculate the extent for the current view state and the passed size.\n     * The size is the pixel dimensions of the box into which the calculated extent\n     * should fit. In most cases you want to get the extent of the entire map,\n     * that is `map.getSize()`.\n     * @param {import(\"./size.js\").Size} [size] Box pixel size. If not provided, the size\n     * of the map that uses this view will be used.\n     * @return {import(\"./extent.js\").Extent} Extent.\n     * @api\n     */\n  }, {\n    key: \"calculateExtent\",\n    value: function calculateExtent(size) {\n      var extent = this.calculateExtentInternal(size);\n      return toUserExtent(extent, this.getProjection());\n    }\n\n    /**\n     * @param {import(\"./size.js\").Size} [size] Box pixel size. If not provided,\n     * the map's last known viewport size will be used.\n     * @return {import(\"./extent.js\").Extent} Extent.\n     */\n  }, {\n    key: \"calculateExtentInternal\",\n    value: function calculateExtentInternal(size) {\n      size = size || this.getViewportSizeMinusPadding_();\n      var center = /** @type {!import(\"./coordinate.js\").Coordinate} */\n      this.getCenterInternal();\n      assert(center, 1); // The view center is not defined\n      var resolution = /** @type {!number} */this.getResolution();\n      assert(resolution !== undefined, 2); // The view resolution is not defined\n      var rotation = /** @type {!number} */this.getRotation();\n      assert(rotation !== undefined, 3); // The view rotation is not defined\n\n      return getForViewAndSize(center, resolution, rotation, size);\n    }\n\n    /**\n     * Get the maximum resolution of the view.\n     * @return {number} The maximum resolution of the view.\n     * @api\n     */\n  }, {\n    key: \"getMaxResolution\",\n    value: function getMaxResolution() {\n      return this.maxResolution_;\n    }\n\n    /**\n     * Get the minimum resolution of the view.\n     * @return {number} The minimum resolution of the view.\n     * @api\n     */\n  }, {\n    key: \"getMinResolution\",\n    value: function getMinResolution() {\n      return this.minResolution_;\n    }\n\n    /**\n     * Get the maximum zoom level for the view.\n     * @return {number} The maximum zoom level.\n     * @api\n     */\n  }, {\n    key: \"getMaxZoom\",\n    value: function getMaxZoom() {\n      return (/** @type {number} */\n        this.getZoomForResolution(this.minResolution_)\n      );\n    }\n\n    /**\n     * Set a new maximum zoom level for the view.\n     * @param {number} zoom The maximum zoom level.\n     * @api\n     */\n  }, {\n    key: \"setMaxZoom\",\n    value: function setMaxZoom(zoom) {\n      this.applyOptions_(this.getUpdatedOptions_({\n        maxZoom: zoom\n      }));\n    }\n\n    /**\n     * Get the minimum zoom level for the view.\n     * @return {number} The minimum zoom level.\n     * @api\n     */\n  }, {\n    key: \"getMinZoom\",\n    value: function getMinZoom() {\n      return (/** @type {number} */\n        this.getZoomForResolution(this.maxResolution_)\n      );\n    }\n\n    /**\n     * Set a new minimum zoom level for the view.\n     * @param {number} zoom The minimum zoom level.\n     * @api\n     */\n  }, {\n    key: \"setMinZoom\",\n    value: function setMinZoom(zoom) {\n      this.applyOptions_(this.getUpdatedOptions_({\n        minZoom: zoom\n      }));\n    }\n\n    /**\n     * Set whether the view should allow intermediary zoom levels.\n     * @param {boolean} enabled Whether the resolution is constrained.\n     * @api\n     */\n  }, {\n    key: \"setConstrainResolution\",\n    value: function setConstrainResolution(enabled) {\n      this.applyOptions_(this.getUpdatedOptions_({\n        constrainResolution: enabled\n      }));\n    }\n\n    /**\n     * Get the view projection.\n     * @return {import(\"./proj/Projection.js\").default} The projection of the view.\n     * @api\n     */\n  }, {\n    key: \"getProjection\",\n    value: function getProjection() {\n      return this.projection_;\n    }\n\n    /**\n     * Get the view resolution.\n     * @return {number|undefined} The resolution of the view.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getResolution\",\n    value: function getResolution() {\n      return (/** @type {number|undefined} */this.get(ViewProperty.RESOLUTION)\n      );\n    }\n\n    /**\n     * Get the resolutions for the view. This returns the array of resolutions\n     * passed to the constructor of the View, or undefined if none were given.\n     * @return {Array<number>|undefined} The resolutions of the view.\n     * @api\n     */\n  }, {\n    key: \"getResolutions\",\n    value: function getResolutions() {\n      return this.resolutions_;\n    }\n\n    /**\n     * Get the resolution for a provided extent (in map units) and size (in pixels).\n     * @param {import(\"./extent.js\").Extent} extent Extent.\n     * @param {import(\"./size.js\").Size} [size] Box pixel size.\n     * @return {number} The resolution at which the provided extent will render at\n     *     the given size.\n     * @api\n     */\n  }, {\n    key: \"getResolutionForExtent\",\n    value: function getResolutionForExtent(extent, size) {\n      return this.getResolutionForExtentInternal(fromUserExtent(extent, this.getProjection()), size);\n    }\n\n    /**\n     * Get the resolution for a provided extent (in map units) and size (in pixels).\n     * @param {import(\"./extent.js\").Extent} extent Extent.\n     * @param {import(\"./size.js\").Size} [size] Box pixel size.\n     * @return {number} The resolution at which the provided extent will render at\n     *     the given size.\n     */\n  }, {\n    key: \"getResolutionForExtentInternal\",\n    value: function getResolutionForExtentInternal(extent, size) {\n      size = size || this.getViewportSizeMinusPadding_();\n      var xResolution = getWidth(extent) / size[0];\n      var yResolution = getHeight(extent) / size[1];\n      return Math.max(xResolution, yResolution);\n    }\n\n    /**\n     * Return a function that returns a value between 0 and 1 for a\n     * resolution. Exponential scaling is assumed.\n     * @param {number} [power] Power.\n     * @return {function(number): number} Resolution for value function.\n     */\n  }, {\n    key: \"getResolutionForValueFunction\",\n    value: function getResolutionForValueFunction(power) {\n      power = power || 2;\n      var maxResolution = this.getConstrainedResolution(this.maxResolution_);\n      var minResolution = this.minResolution_;\n      var max = Math.log(maxResolution / minResolution) / Math.log(power);\n      return (\n        /**\n         * @param {number} value Value.\n         * @return {number} Resolution.\n         */\n        function (value) {\n          var resolution = maxResolution / Math.pow(power, value * max);\n          return resolution;\n        }\n      );\n    }\n\n    /**\n     * Get the view rotation.\n     * @return {number} The rotation of the view in radians.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getRotation\",\n    value: function getRotation() {\n      return (/** @type {number} */this.get(ViewProperty.ROTATION)\n      );\n    }\n\n    /**\n     * Return a function that returns a resolution for a value between\n     * 0 and 1. Exponential scaling is assumed.\n     * @param {number} [power] Power.\n     * @return {function(number): number} Value for resolution function.\n     */\n  }, {\n    key: \"getValueForResolutionFunction\",\n    value: function getValueForResolutionFunction(power) {\n      var logPower = Math.log(power || 2);\n      var maxResolution = this.getConstrainedResolution(this.maxResolution_);\n      var minResolution = this.minResolution_;\n      var max = Math.log(maxResolution / minResolution) / logPower;\n      return (\n        /**\n         * @param {number} resolution Resolution.\n         * @return {number} Value.\n         */\n        function (resolution) {\n          var value = Math.log(maxResolution / resolution) / logPower / max;\n          return value;\n        }\n      );\n    }\n\n    /**\n     * Returns the size of the viewport minus padding.\n     * @private\n     * @param {number} [rotation] Take into account the rotation of the viewport when giving the size\n     * @return {import(\"./size.js\").Size} Viewport size reduced by the padding.\n     */\n  }, {\n    key: \"getViewportSizeMinusPadding_\",\n    value: function getViewportSizeMinusPadding_(rotation) {\n      var size = this.getViewportSize_(rotation);\n      var padding = this.padding_;\n      if (padding) {\n        size = [size[0] - padding[1] - padding[3], size[1] - padding[0] - padding[2]];\n      }\n      return size;\n    }\n\n    /**\n     * @return {State} View state.\n     */\n  }, {\n    key: \"getState\",\n    value: function getState() {\n      var projection = this.getProjection();\n      var resolution = this.getResolution();\n      var rotation = this.getRotation();\n      var center = /** @type {import(\"./coordinate.js\").Coordinate} */\n      this.getCenterInternal();\n      var padding = this.padding_;\n      if (padding) {\n        var reducedSize = this.getViewportSizeMinusPadding_();\n        center = calculateCenterOn(center, this.getViewportSize_(), [reducedSize[0] / 2 + padding[3], reducedSize[1] / 2 + padding[0]], resolution, rotation);\n      }\n      return {\n        center: center.slice(0),\n        projection: projection !== undefined ? projection : null,\n        resolution: resolution,\n        nextCenter: this.nextCenter_,\n        nextResolution: this.nextResolution_,\n        nextRotation: this.nextRotation_,\n        rotation: rotation,\n        zoom: this.getZoom()\n      };\n    }\n\n    /**\n     * @return {ViewStateAndExtent} Like `FrameState`, but just `viewState` and `extent`.\n     */\n  }, {\n    key: \"getViewStateAndExtent\",\n    value: function getViewStateAndExtent() {\n      return {\n        viewState: this.getState(),\n        extent: this.calculateExtent()\n      };\n    }\n\n    /**\n     * Get the current zoom level. This method may return non-integer zoom levels\n     * if the view does not constrain the resolution, or if an interaction or\n     * animation is underway.\n     * @return {number|undefined} Zoom.\n     * @api\n     */\n  }, {\n    key: \"getZoom\",\n    value: function getZoom() {\n      var zoom;\n      var resolution = this.getResolution();\n      if (resolution !== undefined) {\n        zoom = this.getZoomForResolution(resolution);\n      }\n      return zoom;\n    }\n\n    /**\n     * Get the zoom level for a resolution.\n     * @param {number} resolution The resolution.\n     * @return {number|undefined} The zoom level for the provided resolution.\n     * @api\n     */\n  }, {\n    key: \"getZoomForResolution\",\n    value: function getZoomForResolution(resolution) {\n      var offset = this.minZoom_ || 0;\n      var max, zoomFactor;\n      if (this.resolutions_) {\n        var nearest = linearFindNearest(this.resolutions_, resolution, 1);\n        offset = nearest;\n        max = this.resolutions_[nearest];\n        if (nearest == this.resolutions_.length - 1) {\n          zoomFactor = 2;\n        } else {\n          zoomFactor = max / this.resolutions_[nearest + 1];\n        }\n      } else {\n        max = this.maxResolution_;\n        zoomFactor = this.zoomFactor_;\n      }\n      return offset + Math.log(max / resolution) / Math.log(zoomFactor);\n    }\n\n    /**\n     * Get the resolution for a zoom level.\n     * @param {number} zoom Zoom level.\n     * @return {number} The view resolution for the provided zoom level.\n     * @api\n     */\n  }, {\n    key: \"getResolutionForZoom\",\n    value: function getResolutionForZoom(zoom) {\n      if (this.resolutions_) {\n        if (this.resolutions_.length <= 1) {\n          return 0;\n        }\n        var baseLevel = clamp(Math.floor(zoom), 0, this.resolutions_.length - 2);\n        var zoomFactor = this.resolutions_[baseLevel] / this.resolutions_[baseLevel + 1];\n        return this.resolutions_[baseLevel] / Math.pow(zoomFactor, clamp(zoom - baseLevel, 0, 1));\n      }\n      return this.maxResolution_ / Math.pow(this.zoomFactor_, zoom - this.minZoom_);\n    }\n\n    /**\n     * Fit the given geometry or extent based on the given map size and border.\n     * The size is pixel dimensions of the box to fit the extent into.\n     * In most cases you will want to use the map size, that is `map.getSize()`.\n     * Takes care of the map angle.\n     * @param {import(\"./geom/SimpleGeometry.js\").default|import(\"./extent.js\").Extent} geometryOrExtent The geometry or\n     *     extent to fit the view to.\n     * @param {FitOptions} [options] Options.\n     * @api\n     */\n  }, {\n    key: \"fit\",\n    value: function fit(geometryOrExtent, options) {\n      /** @type {import(\"./geom/SimpleGeometry.js\").default} */\n      var geometry;\n      assert(Array.isArray(geometryOrExtent) || typeof /** @type {?} */geometryOrExtent.getSimplifiedGeometry === 'function', 24); // Invalid extent or geometry provided as `geometry`\n      if (Array.isArray(geometryOrExtent)) {\n        assert(!isEmpty(geometryOrExtent), 25); // Cannot fit empty extent provided as `geometry`\n        var extent = fromUserExtent(geometryOrExtent, this.getProjection());\n        geometry = polygonFromExtent(extent);\n      } else if (geometryOrExtent.getType() === 'Circle') {\n        var _extent = fromUserExtent(geometryOrExtent.getExtent(), this.getProjection());\n        geometry = polygonFromExtent(_extent);\n        geometry.rotate(this.getRotation(), getCenter(_extent));\n      } else {\n        var userProjection = getUserProjection();\n        if (userProjection) {\n          geometry = /** @type {import(\"./geom/SimpleGeometry.js\").default} */\n          geometryOrExtent.clone().transform(userProjection, this.getProjection());\n        } else {\n          geometry = geometryOrExtent;\n        }\n      }\n      this.fitInternal(geometry, options);\n    }\n\n    /**\n     * Calculate rotated extent\n     * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\n     * @return {import(\"./extent\").Extent} The rotated extent for the geometry.\n     */\n  }, {\n    key: \"rotatedExtentForGeometry\",\n    value: function rotatedExtentForGeometry(geometry) {\n      var rotation = this.getRotation();\n      var cosAngle = Math.cos(rotation);\n      var sinAngle = Math.sin(-rotation);\n      var coords = geometry.getFlatCoordinates();\n      var stride = geometry.getStride();\n      var minRotX = +Infinity;\n      var minRotY = +Infinity;\n      var maxRotX = -Infinity;\n      var maxRotY = -Infinity;\n      for (var i = 0, ii = coords.length; i < ii; i += stride) {\n        var rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;\n        var rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;\n        minRotX = Math.min(minRotX, rotX);\n        minRotY = Math.min(minRotY, rotY);\n        maxRotX = Math.max(maxRotX, rotX);\n        maxRotY = Math.max(maxRotY, rotY);\n      }\n      return [minRotX, minRotY, maxRotX, maxRotY];\n    }\n\n    /**\n     * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\n     * @param {FitOptions} [options] Options.\n     */\n  }, {\n    key: \"fitInternal\",\n    value: function fitInternal(geometry, options) {\n      options = options || {};\n      var size = options.size;\n      if (!size) {\n        size = this.getViewportSizeMinusPadding_();\n      }\n      var padding = options.padding !== undefined ? options.padding : [0, 0, 0, 0];\n      var nearest = options.nearest !== undefined ? options.nearest : false;\n      var minResolution;\n      if (options.minResolution !== undefined) {\n        minResolution = options.minResolution;\n      } else if (options.maxZoom !== undefined) {\n        minResolution = this.getResolutionForZoom(options.maxZoom);\n      } else {\n        minResolution = 0;\n      }\n      var rotatedExtent = this.rotatedExtentForGeometry(geometry);\n\n      // calculate resolution\n      var resolution = this.getResolutionForExtentInternal(rotatedExtent, [size[0] - padding[1] - padding[3], size[1] - padding[0] - padding[2]]);\n      resolution = isNaN(resolution) ? minResolution : Math.max(resolution, minResolution);\n      resolution = this.getConstrainedResolution(resolution, nearest ? 0 : 1);\n\n      // calculate center\n      var rotation = this.getRotation();\n      var sinAngle = Math.sin(rotation);\n      var cosAngle = Math.cos(rotation);\n      var centerRot = getCenter(rotatedExtent);\n      centerRot[0] += (padding[1] - padding[3]) / 2 * resolution;\n      centerRot[1] += (padding[0] - padding[2]) / 2 * resolution;\n      var centerX = centerRot[0] * cosAngle - centerRot[1] * sinAngle;\n      var centerY = centerRot[1] * cosAngle + centerRot[0] * sinAngle;\n      var center = this.getConstrainedCenter([centerX, centerY], resolution);\n      var callback = options.callback ? options.callback : VOID;\n      if (options.duration !== undefined) {\n        this.animateInternal({\n          resolution: resolution,\n          center: center,\n          duration: options.duration,\n          easing: options.easing\n        }, callback);\n      } else {\n        this.targetResolution_ = resolution;\n        this.targetCenter_ = center;\n        this.applyTargetState_(false, true);\n        animationCallback(callback, true);\n      }\n    }\n\n    /**\n     * Center on coordinate and view position.\n     * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {import(\"./size.js\").Size} size Box pixel size.\n     * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n     * @api\n     */\n  }, {\n    key: \"centerOn\",\n    value: function centerOn(coordinate, size, position) {\n      this.centerOnInternal(fromUserCoordinate(coordinate, this.getProjection()), size, position);\n    }\n\n    /**\n     * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {import(\"./size.js\").Size} size Box pixel size.\n     * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n     */\n  }, {\n    key: \"centerOnInternal\",\n    value: function centerOnInternal(coordinate, size, position) {\n      this.setCenterInternal(calculateCenterOn(coordinate, size, position, this.getResolution(), this.getRotation()));\n    }\n\n    /**\n     * Calculates the shift between map and viewport center.\n     * @param {import(\"./coordinate.js\").Coordinate} center Center.\n     * @param {number} resolution Resolution.\n     * @param {number} rotation Rotation.\n     * @param {import(\"./size.js\").Size} size Size.\n     * @return {Array<number>|undefined} Center shift.\n     */\n  }, {\n    key: \"calculateCenterShift\",\n    value: function calculateCenterShift(center, resolution, rotation, size) {\n      var centerShift;\n      var padding = this.padding_;\n      if (padding && center) {\n        var reducedSize = this.getViewportSizeMinusPadding_(-rotation);\n        var shiftedCenter = calculateCenterOn(center, size, [reducedSize[0] / 2 + padding[3], reducedSize[1] / 2 + padding[0]], resolution, rotation);\n        centerShift = [center[0] - shiftedCenter[0], center[1] - shiftedCenter[1]];\n      }\n      return centerShift;\n    }\n\n    /**\n     * @return {boolean} Is defined.\n     */\n  }, {\n    key: \"isDef\",\n    value: function isDef() {\n      return !!this.getCenterInternal() && this.getResolution() !== undefined;\n    }\n\n    /**\n     * Adds relative coordinates to the center of the view. Any extent constraint will apply.\n     * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\n     * @api\n     */\n  }, {\n    key: \"adjustCenter\",\n    value: function adjustCenter(deltaCoordinates) {\n      var center = toUserCoordinate(this.targetCenter_, this.getProjection());\n      this.setCenter([center[0] + deltaCoordinates[0], center[1] + deltaCoordinates[1]]);\n    }\n\n    /**\n     * Adds relative coordinates to the center of the view. Any extent constraint will apply.\n     * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\n     */\n  }, {\n    key: \"adjustCenterInternal\",\n    value: function adjustCenterInternal(deltaCoordinates) {\n      var center = this.targetCenter_;\n      this.setCenterInternal([center[0] + deltaCoordinates[0], center[1] + deltaCoordinates[1]]);\n    }\n\n    /**\n     * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\n     * constraint will apply.\n     * @param {number} ratio The ratio to apply on the view resolution.\n     * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n     * @api\n     */\n  }, {\n    key: \"adjustResolution\",\n    value: function adjustResolution(ratio, anchor) {\n      anchor = anchor && fromUserCoordinate(anchor, this.getProjection());\n      this.adjustResolutionInternal(ratio, anchor);\n    }\n\n    /**\n     * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\n     * constraint will apply.\n     * @param {number} ratio The ratio to apply on the view resolution.\n     * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n     */\n  }, {\n    key: \"adjustResolutionInternal\",\n    value: function adjustResolutionInternal(ratio, anchor) {\n      var isMoving = this.getAnimating() || this.getInteracting();\n      var size = this.getViewportSize_(this.getRotation());\n      var newResolution = this.constraints_.resolution(this.targetResolution_ * ratio, 0, size, isMoving);\n      if (anchor) {\n        this.targetCenter_ = this.calculateCenterZoom(newResolution, anchor);\n      }\n      this.targetResolution_ *= ratio;\n      this.applyTargetState_();\n    }\n\n    /**\n     * Adds a value to the view zoom level, optionally using an anchor. Any resolution\n     * constraint will apply.\n     * @param {number} delta Relative value to add to the zoom level.\n     * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n     * @api\n     */\n  }, {\n    key: \"adjustZoom\",\n    value: function adjustZoom(delta, anchor) {\n      this.adjustResolution(Math.pow(this.zoomFactor_, -delta), anchor);\n    }\n\n    /**\n     * Adds a value to the view rotation, optionally using an anchor. Any rotation\n     * constraint will apply.\n     * @param {number} delta Relative value to add to the zoom rotation, in radians.\n     * @param {import(\"./coordinate.js\").Coordinate} [anchor] The rotation center.\n     * @api\n     */\n  }, {\n    key: \"adjustRotation\",\n    value: function adjustRotation(delta, anchor) {\n      if (anchor) {\n        anchor = fromUserCoordinate(anchor, this.getProjection());\n      }\n      this.adjustRotationInternal(delta, anchor);\n    }\n\n    /**\n     * @param {number} delta Relative value to add to the zoom rotation, in radians.\n     * @param {import(\"./coordinate.js\").Coordinate} [anchor] The rotation center.\n     */\n  }, {\n    key: \"adjustRotationInternal\",\n    value: function adjustRotationInternal(delta, anchor) {\n      var isMoving = this.getAnimating() || this.getInteracting();\n      var newRotation = this.constraints_.rotation(this.targetRotation_ + delta, isMoving);\n      if (anchor) {\n        this.targetCenter_ = this.calculateCenterRotate(newRotation, anchor);\n      }\n      this.targetRotation_ += delta;\n      this.applyTargetState_();\n    }\n\n    /**\n     * Set the center of the current view. Any extent constraint will apply.\n     * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setCenter\",\n    value: function setCenter(center) {\n      this.setCenterInternal(center ? fromUserCoordinate(center, this.getProjection()) : center);\n    }\n\n    /**\n     * Set the center using the view projection (not the user projection).\n     * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n     */\n  }, {\n    key: \"setCenterInternal\",\n    value: function setCenterInternal(center) {\n      this.targetCenter_ = center;\n      this.applyTargetState_();\n    }\n\n    /**\n     * @param {import(\"./ViewHint.js\").default} hint Hint.\n     * @param {number} delta Delta.\n     * @return {number} New value.\n     */\n  }, {\n    key: \"setHint\",\n    value: function setHint(hint, delta) {\n      this.hints_[hint] += delta;\n      this.changed();\n      return this.hints_[hint];\n    }\n\n    /**\n     * Set the resolution for this view. Any resolution constraint will apply.\n     * @param {number|undefined} resolution The resolution of the view.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setResolution\",\n    value: function setResolution(resolution) {\n      this.targetResolution_ = resolution;\n      this.applyTargetState_();\n    }\n\n    /**\n     * Set the rotation for this view. Any rotation constraint will apply.\n     * @param {number} rotation The rotation of the view in radians.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setRotation\",\n    value: function setRotation(rotation) {\n      this.targetRotation_ = rotation;\n      this.applyTargetState_();\n    }\n\n    /**\n     * Zoom to a specific zoom level. Any resolution constrain will apply.\n     * @param {number} zoom Zoom level.\n     * @api\n     */\n  }, {\n    key: \"setZoom\",\n    value: function setZoom(zoom) {\n      this.setResolution(this.getResolutionForZoom(zoom));\n    }\n\n    /**\n     * Recompute rotation/resolution/center based on target values.\n     * Note: we have to compute rotation first, then resolution and center considering that\n     * parameters can influence one another in case a view extent constraint is present.\n     * @param {boolean} [doNotCancelAnims] Do not cancel animations.\n     * @param {boolean} [forceMoving] Apply constraints as if the view is moving.\n     * @private\n     */\n  }, {\n    key: \"applyTargetState_\",\n    value: function applyTargetState_(doNotCancelAnims, forceMoving) {\n      var isMoving = this.getAnimating() || this.getInteracting() || forceMoving;\n\n      // compute rotation\n      var newRotation = this.constraints_.rotation(this.targetRotation_, isMoving);\n      var size = this.getViewportSize_(newRotation);\n      var newResolution = this.constraints_.resolution(this.targetResolution_, 0, size, isMoving);\n      var newCenter = this.constraints_.center(this.targetCenter_, newResolution, size, isMoving, this.calculateCenterShift(this.targetCenter_, newResolution, newRotation, size));\n      if (this.get(ViewProperty.ROTATION) !== newRotation) {\n        this.set(ViewProperty.ROTATION, newRotation);\n      }\n      if (this.get(ViewProperty.RESOLUTION) !== newResolution) {\n        this.set(ViewProperty.RESOLUTION, newResolution);\n        this.set('zoom', this.getZoom(), true);\n      }\n      if (!newCenter || !this.get(ViewProperty.CENTER) || !equals(this.get(ViewProperty.CENTER), newCenter)) {\n        this.set(ViewProperty.CENTER, newCenter);\n      }\n      if (this.getAnimating() && !doNotCancelAnims) {\n        this.cancelAnimations();\n      }\n      this.cancelAnchor_ = undefined;\n    }\n\n    /**\n     * If any constraints need to be applied, an animation will be triggered.\n     * This is typically done on interaction end.\n     * Note: calling this with a duration of 0 will apply the constrained values straight away,\n     * without animation.\n     * @param {number} [duration] The animation duration in ms.\n     * @param {number} [resolutionDirection] Which direction to zoom.\n     * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n     */\n  }, {\n    key: \"resolveConstraints\",\n    value: function resolveConstraints(duration, resolutionDirection, anchor) {\n      duration = duration !== undefined ? duration : 200;\n      var direction = resolutionDirection || 0;\n      var newRotation = this.constraints_.rotation(this.targetRotation_);\n      var size = this.getViewportSize_(newRotation);\n      var newResolution = this.constraints_.resolution(this.targetResolution_, direction, size);\n      var newCenter = this.constraints_.center(this.targetCenter_, newResolution, size, false, this.calculateCenterShift(this.targetCenter_, newResolution, newRotation, size));\n      if (duration === 0 && !this.cancelAnchor_) {\n        this.targetResolution_ = newResolution;\n        this.targetRotation_ = newRotation;\n        this.targetCenter_ = newCenter;\n        this.applyTargetState_();\n        return;\n      }\n      anchor = anchor || (duration === 0 ? this.cancelAnchor_ : undefined);\n      this.cancelAnchor_ = undefined;\n      if (this.getResolution() !== newResolution || this.getRotation() !== newRotation || !this.getCenterInternal() || !equals(this.getCenterInternal(), newCenter)) {\n        if (this.getAnimating()) {\n          this.cancelAnimations();\n        }\n        this.animateInternal({\n          rotation: newRotation,\n          center: newCenter,\n          resolution: newResolution,\n          duration: duration,\n          easing: easeOut,\n          anchor: anchor\n        });\n      }\n    }\n\n    /**\n     * Notify the View that an interaction has started.\n     * The view state will be resolved to a stable one if needed\n     * (depending on its constraints).\n     * @api\n     */\n  }, {\n    key: \"beginInteraction\",\n    value: function beginInteraction() {\n      this.resolveConstraints(0);\n      this.setHint(ViewHint.INTERACTING, 1);\n    }\n\n    /**\n     * Notify the View that an interaction has ended. The view state will be resolved\n     * to a stable one if needed (depending on its constraints).\n     * @param {number} [duration] Animation duration in ms.\n     * @param {number} [resolutionDirection] Which direction to zoom.\n     * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n     * @api\n     */\n  }, {\n    key: \"endInteraction\",\n    value: function endInteraction(duration, resolutionDirection, anchor) {\n      anchor = anchor && fromUserCoordinate(anchor, this.getProjection());\n      this.endInteractionInternal(duration, resolutionDirection, anchor);\n    }\n\n    /**\n     * Notify the View that an interaction has ended. The view state will be resolved\n     * to a stable one if needed (depending on its constraints).\n     * @param {number} [duration] Animation duration in ms.\n     * @param {number} [resolutionDirection] Which direction to zoom.\n     * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n     */\n  }, {\n    key: \"endInteractionInternal\",\n    value: function endInteractionInternal(duration, resolutionDirection, anchor) {\n      if (!this.getInteracting()) {\n        return;\n      }\n      this.setHint(ViewHint.INTERACTING, -1);\n      this.resolveConstraints(duration, resolutionDirection, anchor);\n    }\n\n    /**\n     * Get a valid position for the view center according to the current constraints.\n     * @param {import(\"./coordinate.js\").Coordinate|undefined} targetCenter Target center position.\n     * @param {number} [targetResolution] Target resolution. If not supplied, the current one will be used.\n     * This is useful to guess a valid center position at a different zoom level.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} Valid center position.\n     */\n  }, {\n    key: \"getConstrainedCenter\",\n    value: function getConstrainedCenter(targetCenter, targetResolution) {\n      var size = this.getViewportSize_(this.getRotation());\n      return this.constraints_.center(targetCenter, targetResolution || this.getResolution(), size);\n    }\n\n    /**\n     * Get a valid zoom level according to the current view constraints.\n     * @param {number|undefined} targetZoom Target zoom.\n     * @param {number} [direction=0] Indicate which resolution should be used\n     * by a renderer if the view resolution does not match any resolution of the tile source.\n     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n     * will be used. If -1, the nearest higher resolution will be used.\n     * @return {number|undefined} Valid zoom level.\n     */\n  }, {\n    key: \"getConstrainedZoom\",\n    value: function getConstrainedZoom(targetZoom, direction) {\n      var targetRes = this.getResolutionForZoom(targetZoom);\n      return this.getZoomForResolution(this.getConstrainedResolution(targetRes, direction));\n    }\n\n    /**\n     * Get a valid resolution according to the current view constraints.\n     * @param {number|undefined} targetResolution Target resolution.\n     * @param {number} [direction=0] Indicate which resolution should be used\n     * by a renderer if the view resolution does not match any resolution of the tile source.\n     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n     * will be used. If -1, the nearest higher resolution will be used.\n     * @return {number|undefined} Valid resolution.\n     */\n  }, {\n    key: \"getConstrainedResolution\",\n    value: function getConstrainedResolution(targetResolution, direction) {\n      direction = direction || 0;\n      var size = this.getViewportSize_(this.getRotation());\n      return this.constraints_.resolution(targetResolution, direction, size);\n    }\n  }]);\n  return View;\n}(BaseObject);\n/**\n * @param {Function} callback Callback.\n * @param {*} returnValue Return value.\n */\nfunction animationCallback(callback, returnValue) {\n  setTimeout(function () {\n    callback(returnValue);\n  }, 0);\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./centerconstraint.js\").Type} The constraint.\n */\nexport function createCenterConstraint(options) {\n  if (options.extent !== undefined) {\n    var smooth = options.smoothExtentConstraint !== undefined ? options.smoothExtentConstraint : true;\n    return createExtent(options.extent, options.constrainOnlyCenter, smooth);\n  }\n  var projection = createProjection(options.projection, 'EPSG:3857');\n  if (options.multiWorld !== true && projection.isGlobal()) {\n    var extent = projection.getExtent().slice();\n    extent[0] = -Infinity;\n    extent[2] = Infinity;\n    return createExtent(extent, false, false);\n  }\n  return centerNone;\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {{constraint: import(\"./resolutionconstraint.js\").Type, maxResolution: number,\n *     minResolution: number, minZoom: number, zoomFactor: number}} The constraint.\n */\nexport function createResolutionConstraint(options) {\n  var resolutionConstraint;\n  var maxResolution;\n  var minResolution;\n\n  // TODO: move these to be ol constants\n  // see https://github.com/openlayers/openlayers/issues/2076\n  var defaultMaxZoom = 28;\n  var defaultZoomFactor = 2;\n  var minZoom = options.minZoom !== undefined ? options.minZoom : DEFAULT_MIN_ZOOM;\n  var maxZoom = options.maxZoom !== undefined ? options.maxZoom : defaultMaxZoom;\n  var zoomFactor = options.zoomFactor !== undefined ? options.zoomFactor : defaultZoomFactor;\n  var multiWorld = options.multiWorld !== undefined ? options.multiWorld : false;\n  var smooth = options.smoothResolutionConstraint !== undefined ? options.smoothResolutionConstraint : true;\n  var showFullExtent = options.showFullExtent !== undefined ? options.showFullExtent : false;\n  var projection = createProjection(options.projection, 'EPSG:3857');\n  var projExtent = projection.getExtent();\n  var constrainOnlyCenter = options.constrainOnlyCenter;\n  var extent = options.extent;\n  if (!multiWorld && !extent && projection.isGlobal()) {\n    constrainOnlyCenter = false;\n    extent = projExtent;\n  }\n  if (options.resolutions !== undefined) {\n    var resolutions = options.resolutions;\n    maxResolution = resolutions[minZoom];\n    minResolution = resolutions[maxZoom] !== undefined ? resolutions[maxZoom] : resolutions[resolutions.length - 1];\n    if (options.constrainResolution) {\n      resolutionConstraint = createSnapToResolutions(resolutions, smooth, !constrainOnlyCenter && extent, showFullExtent);\n    } else {\n      resolutionConstraint = createMinMaxResolution(maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);\n    }\n  } else {\n    // calculate the default min and max resolution\n    var size = !projExtent ?\n    // use an extent that can fit the whole world if need be\n    360 * METERS_PER_UNIT.degrees / projection.getMetersPerUnit() : Math.max(getWidth(projExtent), getHeight(projExtent));\n    var defaultMaxResolution = size / DEFAULT_TILE_SIZE / Math.pow(defaultZoomFactor, DEFAULT_MIN_ZOOM);\n    var defaultMinResolution = defaultMaxResolution / Math.pow(defaultZoomFactor, defaultMaxZoom - DEFAULT_MIN_ZOOM);\n\n    // user provided maxResolution takes precedence\n    maxResolution = options.maxResolution;\n    if (maxResolution !== undefined) {\n      minZoom = 0;\n    } else {\n      maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);\n    }\n\n    // user provided minResolution takes precedence\n    minResolution = options.minResolution;\n    if (minResolution === undefined) {\n      if (options.maxZoom !== undefined) {\n        if (options.maxResolution !== undefined) {\n          minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);\n        } else {\n          minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);\n        }\n      } else {\n        minResolution = defaultMinResolution;\n      }\n    }\n\n    // given discrete zoom levels, minResolution may be different than provided\n    maxZoom = minZoom + Math.floor(Math.log(maxResolution / minResolution) / Math.log(zoomFactor));\n    minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);\n    if (options.constrainResolution) {\n      resolutionConstraint = createSnapToPower(zoomFactor, maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);\n    } else {\n      resolutionConstraint = createMinMaxResolution(maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);\n    }\n  }\n  return {\n    constraint: resolutionConstraint,\n    maxResolution: maxResolution,\n    minResolution: minResolution,\n    minZoom: minZoom,\n    zoomFactor: zoomFactor\n  };\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./rotationconstraint.js\").Type} Rotation constraint.\n */\nexport function createRotationConstraint(options) {\n  var enableRotation = options.enableRotation !== undefined ? options.enableRotation : true;\n  if (enableRotation) {\n    var constrainRotation = options.constrainRotation;\n    if (constrainRotation === undefined || constrainRotation === true) {\n      return createSnapToZero();\n    } else if (constrainRotation === false) {\n      return rotationNone;\n    } else if (typeof constrainRotation === 'number') {\n      return createSnapToN(constrainRotation);\n    }\n    return rotationNone;\n  }\n  return disable;\n}\n\n/**\n * Determine if an animation involves no view change.\n * @param {Animation} animation The animation.\n * @return {boolean} The animation involves no view change.\n */\nexport function isNoopAnimation(animation) {\n  if (animation.sourceCenter && animation.targetCenter) {\n    if (!coordinatesEqual(animation.sourceCenter, animation.targetCenter)) {\n      return false;\n    }\n  }\n  if (animation.sourceResolution !== animation.targetResolution) {\n    return false;\n  }\n  if (animation.sourceRotation !== animation.targetRotation) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {import(\"./size.js\").Size} size Box pixel size.\n * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @return {import(\"./coordinate.js\").Coordinate} Shifted center.\n */\nfunction calculateCenterOn(coordinate, size, position, resolution, rotation) {\n  // calculate rotated position\n  var cosAngle = Math.cos(-rotation);\n  var sinAngle = Math.sin(-rotation);\n  var rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n  var rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n  rotX += (size[0] / 2 - position[0]) * resolution;\n  rotY += (position[1] - size[1] / 2) * resolution;\n\n  // go back to original angle\n  sinAngle = -sinAngle; // go back to original rotation\n  var centerX = rotX * cosAngle - rotY * sinAngle;\n  var centerY = rotY * cosAngle + rotX * sinAngle;\n  return [centerX, centerY];\n}\nexport default View;","map":{"version":3,"names":["BaseObject","ViewHint","ViewProperty","DEFAULT_TILE_SIZE","METERS_PER_UNIT","createProjection","disableCoordinateWarning","fromUserCoordinate","fromUserExtent","getUserProjection","toUserCoordinate","toUserExtent","VOID","add","addCoordinate","equals","coordinatesEqual","rotate","rotateCoordinate","assert","none","centerNone","createExtent","clamp","modulo","createMinMaxResolution","createSnapToPower","createSnapToResolutions","createSnapToN","createSnapToZero","disable","rotationNone","easeOut","inAndOut","getCenter","getForViewAndSize","getHeight","getWidth","isEmpty","linearFindNearest","fromExtent","polygonFromExtent","DEFAULT_MIN_ZOOM","View","_BaseObject","_inherits","_super","_createSuper","options","_this","_classCallCheck","call","on","once","un","Object","assign","hints_","animations_","updateAnimationKey_","projection_","projection","viewportSize_","targetCenter_","targetResolution_","targetRotation_","nextCenter_","nextResolution_","nextRotation_","cancelAnchor_","undefined","center","extent","applyOptions_","_createClass","key","value","properties","setProperties","resolutionConstraintInfo","createResolutionConstraint","maxResolution_","maxResolution","minResolution_","minResolution","zoomFactor_","zoomFactor","resolutions_","resolutions","padding_","padding","minZoom_","minZoom","centerConstraint","createCenterConstraint","resolutionConstraint","constraint","rotationConstraint","createRotationConstraint","constraints_","resolution","rotation","setRotation","setCenterInternal","setResolution","zoom","setZoom","get","set","oldPadding","getCenterInternal","newPadding","getResolution","offsetX","offsetY","getUpdatedOptions_","newOptions","getProperties","getZoom","getRotation","animate","var_args","isDef","getAnimating","resolveConstraints","args","Array","arguments","length","i","getProjection","anchor","animateInternal","apply","animationCount","callback","state","animationCallback","start","Date","now","slice","series","animation","complete","duration","easing","sourceCenter","targetCenter","sourceResolution","targetResolution","getResolutionForZoom","sourceRotation","delta","Math","PI","targetRotation","isNoopAnimation","push","setHint","ANIMATING","updateAnimations_","getInteracting","INTERACTING","cancelAnimations","ii","j","jj","NaN","cancelAnimationFrame","more","seriesComplete","elapsed","fraction","progress","x0","y0","x1","y1","x","y","size","getViewportSize_","constrainedResolution","calculateCenterZoom","applyTargetState_","constrainedRotation","calculateCenterRotate","filter","Boolean","requestAnimationFrame","bind","currentCenter","currentResolution","w","h","abs","cos","sin","setViewportSize","isArray","CENTER","getConstraints","getConstrainResolution","getHints","hints","calculateExtent","calculateExtentInternal","getViewportSizeMinusPadding_","getMaxResolution","getMinResolution","getMaxZoom","getZoomForResolution","setMaxZoom","maxZoom","getMinZoom","setMinZoom","setConstrainResolution","enabled","constrainResolution","RESOLUTION","getResolutions","getResolutionForExtent","getResolutionForExtentInternal","xResolution","yResolution","max","getResolutionForValueFunction","power","getConstrainedResolution","log","pow","ROTATION","getValueForResolutionFunction","logPower","getState","reducedSize","calculateCenterOn","nextCenter","nextResolution","nextRotation","getViewStateAndExtent","viewState","offset","nearest","baseLevel","floor","fit","geometryOrExtent","geometry","getSimplifiedGeometry","getType","getExtent","userProjection","clone","transform","fitInternal","rotatedExtentForGeometry","cosAngle","sinAngle","coords","getFlatCoordinates","stride","getStride","minRotX","Infinity","minRotY","maxRotX","maxRotY","rotX","rotY","min","rotatedExtent","isNaN","centerRot","centerX","centerY","getConstrainedCenter","centerOn","coordinate","position","centerOnInternal","calculateCenterShift","centerShift","shiftedCenter","adjustCenter","deltaCoordinates","setCenter","adjustCenterInternal","adjustResolution","ratio","adjustResolutionInternal","isMoving","newResolution","adjustZoom","adjustRotation","adjustRotationInternal","newRotation","hint","changed","doNotCancelAnims","forceMoving","newCenter","resolutionDirection","direction","beginInteraction","endInteraction","endInteractionInternal","getConstrainedZoom","targetZoom","targetRes","returnValue","setTimeout","smooth","smoothExtentConstraint","constrainOnlyCenter","multiWorld","isGlobal","defaultMaxZoom","defaultZoomFactor","smoothResolutionConstraint","showFullExtent","projExtent","degrees","getMetersPerUnit","defaultMaxResolution","defaultMinResolution","enableRotation","constrainRotation"],"sources":["/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/ol/View.js"],"sourcesContent":["/**\n * @module ol/View\n */\nimport BaseObject from './Object.js';\nimport ViewHint from './ViewHint.js';\nimport ViewProperty from './ViewProperty.js';\nimport {DEFAULT_TILE_SIZE} from './tilegrid/common.js';\nimport {\n  METERS_PER_UNIT,\n  createProjection,\n  disableCoordinateWarning,\n  fromUserCoordinate,\n  fromUserExtent,\n  getUserProjection,\n  toUserCoordinate,\n  toUserExtent,\n} from './proj.js';\nimport {VOID} from './functions.js';\nimport {\n  add as addCoordinate,\n  equals as coordinatesEqual,\n  equals,\n  rotate as rotateCoordinate,\n} from './coordinate.js';\nimport {assert} from './asserts.js';\nimport {none as centerNone, createExtent} from './centerconstraint.js';\nimport {clamp, modulo} from './math.js';\nimport {\n  createMinMaxResolution,\n  createSnapToPower,\n  createSnapToResolutions,\n} from './resolutionconstraint.js';\nimport {\n  createSnapToN,\n  createSnapToZero,\n  disable,\n  none as rotationNone,\n} from './rotationconstraint.js';\nimport {easeOut, inAndOut} from './easing.js';\nimport {\n  getCenter,\n  getForViewAndSize,\n  getHeight,\n  getWidth,\n  isEmpty,\n} from './extent.js';\nimport {linearFindNearest} from './array.js';\nimport {fromExtent as polygonFromExtent} from './geom/Polygon.js';\n\n/**\n * An animation configuration\n *\n * @typedef {Object} Animation\n * @property {import(\"./coordinate.js\").Coordinate} [sourceCenter] Source center.\n * @property {import(\"./coordinate.js\").Coordinate} [targetCenter] Target center.\n * @property {number} [sourceResolution] Source resolution.\n * @property {number} [targetResolution] Target resolution.\n * @property {number} [sourceRotation] Source rotation.\n * @property {number} [targetRotation] Target rotation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Anchor.\n * @property {number} start Start.\n * @property {number} duration Duration.\n * @property {boolean} complete Complete.\n * @property {function(number):number} easing Easing.\n * @property {function(boolean):void} callback Callback.\n */\n\n/**\n * @typedef {Object} Constraints\n * @property {import(\"./centerconstraint.js\").Type} center Center.\n * @property {import(\"./resolutionconstraint.js\").Type} resolution Resolution.\n * @property {import(\"./rotationconstraint.js\").Type} rotation Rotation.\n */\n\n/**\n * @typedef {Object} FitOptions\n * @property {import(\"./size.js\").Size} [size] The size in pixels of the box to fit\n * the extent into. Default is the current size of the first map in the DOM that\n * uses this view, or `[100, 100]` if no such map is found.\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be\n * cleared inside the view. Values in the array are top, right, bottom and left\n * padding.\n * @property {boolean} [nearest=false] If the view `constrainResolution` option is `true`,\n * get the nearest extent instead of the closest that actually fits the view.\n * @property {number} [minResolution=0] Minimum resolution that we zoom to.\n * @property {number} [maxZoom] Maximum zoom level that we zoom to. If\n * `minResolution` is given, this property is ignored.\n * @property {number} [duration] The duration of the animation in milliseconds.\n * By default, there is no animation to the target extent.\n * @property {function(number):number} [easing] The easing function used during\n * the animation (defaults to {@link module:ol/easing.inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n * @property {function(boolean):void} [callback] Function called when the view is in\n * its final position. The callback will be called with `true` if the animation\n * series completed on its own or `false` if it was cancelled.\n */\n\n/**\n * @typedef {Object} ViewOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The initial center for\n * the view. If a user projection is not set, the coordinate system for the center is\n * specified with the `projection` option. Layer sources will not be fetched if this\n * is not set, but the center can be set later with {@link #setCenter}.\n * @property {boolean|number} [constrainRotation=true] Rotation constraint.\n * `false` means no constraint. `true` means no constraint, but snap to zero\n * near zero. A number constrains the rotation to that number of values. For\n * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.\n * @property {boolean} [enableRotation=true] Enable rotation.\n * If `false`, a rotation constraint that always sets the rotation to zero is\n * used. The `constrainRotation` option has no effect if `enableRotation` is\n * `false`.\n * @property {import(\"./extent.js\").Extent} [extent] The extent that constrains the\n * view, in other words, nothing outside of this extent can be visible on the map.\n * @property {boolean} [constrainOnlyCenter=false] If true, the extent\n * constraint will only apply to the view center and not the whole extent.\n * @property {boolean} [smoothExtentConstraint=true] If true, the extent\n * constraint will be applied smoothly, i.e. allow the view to go slightly outside\n * of the given `extent`.\n * @property {number} [maxResolution] The maximum resolution used to determine\n * the resolution constraint. It is used together with `minResolution` (or\n * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way\n * that the projection's validity extent fits in a 256x256 px tile. If the\n * projection is Spherical Mercator (the default) then `maxResolution` defaults\n * to `40075016.68557849 / 256 = 156543.03392804097`.\n * @property {number} [minResolution] The minimum resolution used to determine\n * the resolution constraint.  It is used together with `maxResolution` (or\n * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29\n * zoom levels (with a factor of 2). If the projection is Spherical Mercator\n * (the default) then `minResolution` defaults to\n * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.\n * @property {number} [maxZoom=28] The maximum zoom level used to determine the\n * resolution constraint. It is used together with `minZoom` (or\n * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also\n * provided, it is given precedence over `maxZoom`.\n * @property {number} [minZoom=0] The minimum zoom level used to determine the\n * resolution constraint. It is used together with `maxZoom` (or\n * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also\n * provided, it is given precedence over `minZoom`.\n * @property {boolean} [multiWorld=false] If `false` the view is constrained so\n * only one world is visible, and you cannot pan off the edge.  If `true` the map\n * may show multiple worlds at low zoom levels.  Only used if the `projection` is\n * global.  Note that if `extent` is also provided it is given precedence.\n * @property {boolean} [constrainResolution=false] If true, the view will always\n * animate to the closest zoom level after an interaction; false means\n * intermediary zoom levels are allowed.\n * @property {boolean} [smoothResolutionConstraint=true] If true, the resolution\n * min/max values will be applied smoothly, i. e. allow the view to exceed slightly\n * the given resolution or zoom bounds.\n * @property {boolean} [showFullExtent=false] Allow the view to be zoomed out to\n * show the full configured extent. By default, when a view is configured with an\n * extent, users will not be able to zoom out so the viewport exceeds the extent in\n * either dimension. This means the full extent may not be visible if the viewport\n * is taller or wider than the aspect ratio of the configured extent. If\n * showFullExtent is true, the user will be able to zoom out so that the viewport\n * exceeds the height or width of the configured extent, but not both, allowing the\n * full extent to be shown.\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857'] The\n * projection. The default is Spherical Mercator.\n * @property {number} [resolution] The initial resolution for the view. The\n * units are `projection` units per pixel (e.g. meters per pixel). An\n * alternative to setting this is to set `zoom`. Layer sources will not be\n * fetched if neither this nor `zoom` are defined, but they can be set later\n * with {@link #setZoom} or {@link #setResolution}.\n * @property {Array<number>} [resolutions] Resolutions that determine the\n * zoom levels if specified. The index in the array corresponds to the zoom level,\n * therefore the resolution values have to be in descending order. It also constrains\n * the resolution by the minimum and maximum value. If set the `maxResolution`,\n * `minResolution`, `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.\n * @property {number} [rotation=0] The initial rotation for the view in radians\n * (positive rotation clockwise, 0 means North).\n * @property {number} [zoom] Only used if `resolution` is not defined. Zoom\n * level used to calculate the initial resolution for the view.\n * @property {number} [zoomFactor=2] The zoom factor used to compute the\n * corresponding resolution.\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in css pixels).\n * If the map viewport is partially covered with other content (overlays) along\n * its edges, this setting allows to shift the center of the viewport away from\n * that content. The order of the values is top, right, bottom, left.\n */\n\n/**\n * @typedef {Object} AnimationOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The center of the view at the end of\n * the animation.\n * @property {number} [zoom] The zoom level of the view at the end of the\n * animation. This takes precedence over `resolution`.\n * @property {number} [resolution] The resolution of the view at the end\n * of the animation.  If `zoom` is also provided, this option will be ignored.\n * @property {number} [rotation] The rotation of the view at the end of\n * the animation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Optional anchor to remain fixed\n * during a rotation or resolution animation.\n * @property {number} [duration=1000] The duration of the animation in milliseconds.\n * @property {function(number):number} [easing] The easing function used\n * during the animation (defaults to {@link module:ol/easing.inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n */\n\n/**\n * @typedef {Object} State\n * @property {import(\"./coordinate.js\").Coordinate} center Center.\n * @property {import(\"./proj/Projection.js\").default} projection Projection.\n * @property {number} resolution Resolution.\n * @property {import(\"./coordinate.js\").Coordinate} [nextCenter] The next center during an animation series.\n * @property {number} [nextResolution] The next resolution during an animation series.\n * @property {number} [nextRotation] The next rotation during an animation series.\n * @property {number} rotation Rotation.\n * @property {number} zoom Zoom.\n */\n\n/**\n * Like {@link import(\"./Map.js\").FrameState}, but just `viewState` and `extent`.\n * @typedef {Object} ViewStateAndExtent\n * @property {State} viewState View state.\n * @property {import(\"./extent.js\").Extent} extent Extent.\n */\n\n/**\n * Default min zoom level for the map view.\n * @type {number}\n */\nconst DEFAULT_MIN_ZOOM = 0;\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:center'|'change:resolution'|'change:rotation'} ViewObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<ViewObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|ViewObjectEventTypes, Return>} ViewOnSignature\n */\n\n/**\n * @classdesc\n * A View object represents a simple 2D view of the map.\n *\n * This is the object to act upon to change the center, resolution,\n * and rotation of the map.\n *\n * A View has a `projection`. The projection determines the\n * coordinate system of the center, and its units determine the units of the\n * resolution (projection units per pixel). The default projection is\n * Web Mercator (EPSG:3857).\n *\n * ### The view states\n *\n * A View is determined by three states: `center`, `resolution`,\n * and `rotation`. Each state has a corresponding getter and setter, e.g.\n * `getCenter` and `setCenter` for the `center` state.\n *\n * The `zoom` state is actually not saved on the view: all computations\n * internally use the `resolution` state. Still, the `setZoom` and `getZoom`\n * methods are available, as well as `getResolutionForZoom` and\n * `getZoomForResolution` to switch from one system to the other.\n *\n * ### The constraints\n *\n * `setCenter`, `setResolution` and `setRotation` can be used to change the\n * states of the view, but any constraint defined in the constructor will\n * be applied along the way.\n *\n * A View object can have a *resolution constraint*, a *rotation constraint*\n * and a *center constraint*.\n *\n * The *resolution constraint* typically restricts min/max values and\n * snaps to specific resolutions. It is determined by the following\n * options: `resolutions`, `maxResolution`, `maxZoom` and `zoomFactor`.\n * If `resolutions` is set, the other three options are ignored. See\n * documentation for each option for more information. By default, the view\n * only has a min/max restriction and allow intermediary zoom levels when\n * pinch-zooming for example.\n *\n * The *rotation constraint* snaps to specific angles. It is determined\n * by the following options: `enableRotation` and `constrainRotation`.\n * By default rotation is allowed and its value is snapped to zero when approaching the\n * horizontal.\n *\n * The *center constraint* is determined by the `extent` option. By\n * default the view center is not constrained at all.\n *\n * ### Changing the view state\n *\n * It is important to note that `setZoom`, `setResolution`, `setCenter` and\n * `setRotation` are subject to the above mentioned constraints. As such, it\n * may sometimes not be possible to know in advance the resulting state of the\n * View. For example, calling `setResolution(10)` does not guarantee that\n * `getResolution()` will return `10`.\n *\n * A consequence of this is that, when applying a delta on the view state, one\n * should use `adjustCenter`, `adjustRotation`, `adjustZoom` and `adjustResolution`\n * rather than the corresponding setters. This will let view do its internal\n * computations. Besides, the `adjust*` methods also take an `anchor`\n * argument which allows specifying an origin for the transformation.\n *\n * ### Interacting with the view\n *\n * View constraints are usually only applied when the view is *at rest*, meaning that\n * no interaction or animation is ongoing. As such, if the user puts the view in a\n * state that is not equivalent to a constrained one (e.g. rotating the view when\n * the snap angle is 0), an animation will be triggered at the interaction end to\n * put back the view to a stable state;\n *\n * @api\n */\nclass View extends BaseObject {\n  /**\n   * @param {ViewOptions} [options] View options.\n   */\n  constructor(options) {\n    super();\n\n    /***\n     * @type {ViewOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ViewOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ViewOnSignature<void>}\n     */\n    this.un;\n\n    options = Object.assign({}, options);\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.hints_ = [0, 0];\n\n    /**\n     * @private\n     * @type {Array<Array<Animation>>}\n     */\n    this.animations_ = [];\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.updateAnimationKey_;\n\n    /**\n     * @private\n     * @const\n     * @type {import(\"./proj/Projection.js\").default}\n     */\n    this.projection_ = createProjection(options.projection, 'EPSG:3857');\n\n    /**\n     * @private\n     * @type {import(\"./size.js\").Size}\n     */\n    this.viewportSize_ = [100, 100];\n\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate|undefined}\n     */\n    this.targetCenter_ = null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.targetResolution_;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.targetRotation_;\n\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate}\n     */\n    this.nextCenter_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.nextResolution_;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.nextRotation_;\n\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate|undefined}\n     */\n    this.cancelAnchor_ = undefined;\n\n    if (options.projection) {\n      disableCoordinateWarning();\n    }\n    if (options.center) {\n      options.center = fromUserCoordinate(options.center, this.projection_);\n    }\n    if (options.extent) {\n      options.extent = fromUserExtent(options.extent, this.projection_);\n    }\n\n    this.applyOptions_(options);\n  }\n\n  /**\n   * Set up the view with the given options.\n   * @param {ViewOptions} options View options.\n   */\n  applyOptions_(options) {\n    const properties = Object.assign({}, options);\n    for (const key in ViewProperty) {\n      delete properties[key];\n    }\n    this.setProperties(properties, true);\n\n    const resolutionConstraintInfo = createResolutionConstraint(options);\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxResolution_ = resolutionConstraintInfo.maxResolution;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minResolution_ = resolutionConstraintInfo.minResolution;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;\n\n    /**\n     * @private\n     * @type {Array<number>|undefined}\n     */\n    this.resolutions_ = options.resolutions;\n\n    /**\n     * @type {Array<number>|undefined}\n     * @private\n     */\n    this.padding_ = options.padding;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minZoom_ = resolutionConstraintInfo.minZoom;\n\n    const centerConstraint = createCenterConstraint(options);\n    const resolutionConstraint = resolutionConstraintInfo.constraint;\n    const rotationConstraint = createRotationConstraint(options);\n\n    /**\n     * @private\n     * @type {Constraints}\n     */\n    this.constraints_ = {\n      center: centerConstraint,\n      resolution: resolutionConstraint,\n      rotation: rotationConstraint,\n    };\n\n    this.setRotation(options.rotation !== undefined ? options.rotation : 0);\n    this.setCenterInternal(\n      options.center !== undefined ? options.center : null\n    );\n    if (options.resolution !== undefined) {\n      this.setResolution(options.resolution);\n    } else if (options.zoom !== undefined) {\n      this.setZoom(options.zoom);\n    }\n  }\n\n  /**\n   * Padding (in css pixels).\n   * If the map viewport is partially covered with other content (overlays) along\n   * its edges, this setting allows to shift the center of the viewport away from that\n   * content. The order of the values in the array is top, right, bottom, left.\n   * The default is no padding, which is equivalent to `[0, 0, 0, 0]`.\n   * @type {Array<number>|undefined}\n   * @api\n   */\n  get padding() {\n    return this.padding_;\n  }\n  set padding(padding) {\n    let oldPadding = this.padding_;\n    this.padding_ = padding;\n    const center = this.getCenterInternal();\n    if (center) {\n      const newPadding = padding || [0, 0, 0, 0];\n      oldPadding = oldPadding || [0, 0, 0, 0];\n      const resolution = this.getResolution();\n      const offsetX =\n        (resolution / 2) *\n        (newPadding[3] - oldPadding[3] + oldPadding[1] - newPadding[1]);\n      const offsetY =\n        (resolution / 2) *\n        (newPadding[0] - oldPadding[0] + oldPadding[2] - newPadding[2]);\n      this.setCenterInternal([center[0] + offsetX, center[1] - offsetY]);\n    }\n  }\n\n  /**\n   * Get an updated version of the view options used to construct the view.  The\n   * current resolution (or zoom), center, and rotation are applied to any stored\n   * options.  The provided options can be used to apply new min/max zoom or\n   * resolution limits.\n   * @param {ViewOptions} newOptions New options to be applied.\n   * @return {ViewOptions} New options updated with the current view state.\n   */\n  getUpdatedOptions_(newOptions) {\n    const options = this.getProperties();\n\n    // preserve resolution (or zoom)\n    if (options.resolution !== undefined) {\n      options.resolution = this.getResolution();\n    } else {\n      options.zoom = this.getZoom();\n    }\n\n    // preserve center\n    options.center = this.getCenterInternal();\n\n    // preserve rotation\n    options.rotation = this.getRotation();\n\n    return Object.assign({}, options, newOptions);\n  }\n\n  /**\n   * Animate the view.  The view's center, zoom (or resolution), and rotation\n   * can be animated for smooth transitions between view states.  For example,\n   * to animate the view to a new zoom level:\n   *\n   *     view.animate({zoom: view.getZoom() + 1});\n   *\n   * By default, the animation lasts one second and uses in-and-out easing.  You\n   * can customize this behavior by including `duration` (in milliseconds) and\n   * `easing` options (see {@link module:ol/easing}).\n   *\n   * To chain together multiple animations, call the method with multiple\n   * animation objects.  For example, to first zoom and then pan:\n   *\n   *     view.animate({zoom: 10}, {center: [0, 0]});\n   *\n   * If you provide a function as the last argument to the animate method, it\n   * will get called at the end of an animation series.  The callback will be\n   * called with `true` if the animation series completed on its own or `false`\n   * if it was cancelled.\n   *\n   * Animations are cancelled by user interactions (e.g. dragging the map) or by\n   * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`\n   * (or another method that calls one of these).\n   *\n   * @param {...(AnimationOptions|function(boolean): void)} var_args Animation\n   *     options.  Multiple animations can be run in series by passing multiple\n   *     options objects.  To run multiple animations in parallel, call the method\n   *     multiple times.  An optional callback can be provided as a final\n   *     argument.  The callback will be called with a boolean indicating whether\n   *     the animation completed without being cancelled.\n   * @api\n   */\n  animate(var_args) {\n    if (this.isDef() && !this.getAnimating()) {\n      this.resolveConstraints(0);\n    }\n    const args = new Array(arguments.length);\n    for (let i = 0; i < args.length; ++i) {\n      let options = arguments[i];\n      if (options.center) {\n        options = Object.assign({}, options);\n        options.center = fromUserCoordinate(\n          options.center,\n          this.getProjection()\n        );\n      }\n      if (options.anchor) {\n        options = Object.assign({}, options);\n        options.anchor = fromUserCoordinate(\n          options.anchor,\n          this.getProjection()\n        );\n      }\n      args[i] = options;\n    }\n    this.animateInternal.apply(this, args);\n  }\n\n  /**\n   * @param {...(AnimationOptions|function(boolean): void)} var_args Animation options.\n   */\n  animateInternal(var_args) {\n    let animationCount = arguments.length;\n    let callback;\n    if (\n      animationCount > 1 &&\n      typeof arguments[animationCount - 1] === 'function'\n    ) {\n      callback = arguments[animationCount - 1];\n      --animationCount;\n    }\n\n    let i = 0;\n    for (; i < animationCount && !this.isDef(); ++i) {\n      // if view properties are not yet set, shortcut to the final state\n      const state = arguments[i];\n      if (state.center) {\n        this.setCenterInternal(state.center);\n      }\n      if (state.zoom !== undefined) {\n        this.setZoom(state.zoom);\n      } else if (state.resolution) {\n        this.setResolution(state.resolution);\n      }\n      if (state.rotation !== undefined) {\n        this.setRotation(state.rotation);\n      }\n    }\n    if (i === animationCount) {\n      if (callback) {\n        animationCallback(callback, true);\n      }\n      return;\n    }\n\n    let start = Date.now();\n    let center = this.targetCenter_.slice();\n    let resolution = this.targetResolution_;\n    let rotation = this.targetRotation_;\n    const series = [];\n    for (; i < animationCount; ++i) {\n      const options = /** @type {AnimationOptions} */ (arguments[i]);\n\n      const animation = {\n        start: start,\n        complete: false,\n        anchor: options.anchor,\n        duration: options.duration !== undefined ? options.duration : 1000,\n        easing: options.easing || inAndOut,\n        callback: callback,\n      };\n\n      if (options.center) {\n        animation.sourceCenter = center;\n        animation.targetCenter = options.center.slice();\n        center = animation.targetCenter;\n      }\n\n      if (options.zoom !== undefined) {\n        animation.sourceResolution = resolution;\n        animation.targetResolution = this.getResolutionForZoom(options.zoom);\n        resolution = animation.targetResolution;\n      } else if (options.resolution) {\n        animation.sourceResolution = resolution;\n        animation.targetResolution = options.resolution;\n        resolution = animation.targetResolution;\n      }\n\n      if (options.rotation !== undefined) {\n        animation.sourceRotation = rotation;\n        const delta =\n          modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;\n        animation.targetRotation = rotation + delta;\n        rotation = animation.targetRotation;\n      }\n\n      // check if animation is a no-op\n      if (isNoopAnimation(animation)) {\n        animation.complete = true;\n        // we still push it onto the series for callback handling\n      } else {\n        start += animation.duration;\n      }\n      series.push(animation);\n    }\n    this.animations_.push(series);\n    this.setHint(ViewHint.ANIMATING, 1);\n    this.updateAnimations_();\n  }\n\n  /**\n   * Determine if the view is being animated.\n   * @return {boolean} The view is being animated.\n   * @api\n   */\n  getAnimating() {\n    return this.hints_[ViewHint.ANIMATING] > 0;\n  }\n\n  /**\n   * Determine if the user is interacting with the view, such as panning or zooming.\n   * @return {boolean} The view is being interacted with.\n   * @api\n   */\n  getInteracting() {\n    return this.hints_[ViewHint.INTERACTING] > 0;\n  }\n\n  /**\n   * Cancel any ongoing animations.\n   * @api\n   */\n  cancelAnimations() {\n    this.setHint(ViewHint.ANIMATING, -this.hints_[ViewHint.ANIMATING]);\n    let anchor;\n    for (let i = 0, ii = this.animations_.length; i < ii; ++i) {\n      const series = this.animations_[i];\n      if (series[0].callback) {\n        animationCallback(series[0].callback, false);\n      }\n      if (!anchor) {\n        for (let j = 0, jj = series.length; j < jj; ++j) {\n          const animation = series[j];\n          if (!animation.complete) {\n            anchor = animation.anchor;\n            break;\n          }\n        }\n      }\n    }\n    this.animations_.length = 0;\n    this.cancelAnchor_ = anchor;\n    this.nextCenter_ = null;\n    this.nextResolution_ = NaN;\n    this.nextRotation_ = NaN;\n  }\n\n  /**\n   * Update all animations.\n   */\n  updateAnimations_() {\n    if (this.updateAnimationKey_ !== undefined) {\n      cancelAnimationFrame(this.updateAnimationKey_);\n      this.updateAnimationKey_ = undefined;\n    }\n    if (!this.getAnimating()) {\n      return;\n    }\n    const now = Date.now();\n    let more = false;\n    for (let i = this.animations_.length - 1; i >= 0; --i) {\n      const series = this.animations_[i];\n      let seriesComplete = true;\n      for (let j = 0, jj = series.length; j < jj; ++j) {\n        const animation = series[j];\n        if (animation.complete) {\n          continue;\n        }\n        const elapsed = now - animation.start;\n        let fraction =\n          animation.duration > 0 ? elapsed / animation.duration : 1;\n        if (fraction >= 1) {\n          animation.complete = true;\n          fraction = 1;\n        } else {\n          seriesComplete = false;\n        }\n        const progress = animation.easing(fraction);\n        if (animation.sourceCenter) {\n          const x0 = animation.sourceCenter[0];\n          const y0 = animation.sourceCenter[1];\n          const x1 = animation.targetCenter[0];\n          const y1 = animation.targetCenter[1];\n          this.nextCenter_ = animation.targetCenter;\n          const x = x0 + progress * (x1 - x0);\n          const y = y0 + progress * (y1 - y0);\n          this.targetCenter_ = [x, y];\n        }\n        if (animation.sourceResolution && animation.targetResolution) {\n          const resolution =\n            progress === 1\n              ? animation.targetResolution\n              : animation.sourceResolution +\n                progress *\n                  (animation.targetResolution - animation.sourceResolution);\n          if (animation.anchor) {\n            const size = this.getViewportSize_(this.getRotation());\n            const constrainedResolution = this.constraints_.resolution(\n              resolution,\n              0,\n              size,\n              true\n            );\n            this.targetCenter_ = this.calculateCenterZoom(\n              constrainedResolution,\n              animation.anchor\n            );\n          }\n          this.nextResolution_ = animation.targetResolution;\n          this.targetResolution_ = resolution;\n          this.applyTargetState_(true);\n        }\n        if (\n          animation.sourceRotation !== undefined &&\n          animation.targetRotation !== undefined\n        ) {\n          const rotation =\n            progress === 1\n              ? modulo(animation.targetRotation + Math.PI, 2 * Math.PI) -\n                Math.PI\n              : animation.sourceRotation +\n                progress *\n                  (animation.targetRotation - animation.sourceRotation);\n          if (animation.anchor) {\n            const constrainedRotation = this.constraints_.rotation(\n              rotation,\n              true\n            );\n            this.targetCenter_ = this.calculateCenterRotate(\n              constrainedRotation,\n              animation.anchor\n            );\n          }\n          this.nextRotation_ = animation.targetRotation;\n          this.targetRotation_ = rotation;\n        }\n        this.applyTargetState_(true);\n        more = true;\n        if (!animation.complete) {\n          break;\n        }\n      }\n      if (seriesComplete) {\n        this.animations_[i] = null;\n        this.setHint(ViewHint.ANIMATING, -1);\n        this.nextCenter_ = null;\n        this.nextResolution_ = NaN;\n        this.nextRotation_ = NaN;\n        const callback = series[0].callback;\n        if (callback) {\n          animationCallback(callback, true);\n        }\n      }\n    }\n    // prune completed series\n    this.animations_ = this.animations_.filter(Boolean);\n    if (more && this.updateAnimationKey_ === undefined) {\n      this.updateAnimationKey_ = requestAnimationFrame(\n        this.updateAnimations_.bind(this)\n      );\n    }\n  }\n\n  /**\n   * @param {number} rotation Target rotation.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Rotation anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for rotation and anchor.\n   */\n  calculateCenterRotate(rotation, anchor) {\n    let center;\n    const currentCenter = this.getCenterInternal();\n    if (currentCenter !== undefined) {\n      center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];\n      rotateCoordinate(center, rotation - this.getRotation());\n      addCoordinate(center, anchor);\n    }\n    return center;\n  }\n\n  /**\n   * @param {number} resolution Target resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Zoom anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for resolution and anchor.\n   */\n  calculateCenterZoom(resolution, anchor) {\n    let center;\n    const currentCenter = this.getCenterInternal();\n    const currentResolution = this.getResolution();\n    if (currentCenter !== undefined && currentResolution !== undefined) {\n      const x =\n        anchor[0] -\n        (resolution * (anchor[0] - currentCenter[0])) / currentResolution;\n      const y =\n        anchor[1] -\n        (resolution * (anchor[1] - currentCenter[1])) / currentResolution;\n      center = [x, y];\n    }\n    return center;\n  }\n\n  /**\n   * Returns the current viewport size.\n   * @private\n   * @param {number} [rotation] Take into account the rotation of the viewport when giving the size\n   * @return {import(\"./size.js\").Size} Viewport size or `[100, 100]` when no viewport is found.\n   */\n  getViewportSize_(rotation) {\n    const size = this.viewportSize_;\n    if (rotation) {\n      const w = size[0];\n      const h = size[1];\n      return [\n        Math.abs(w * Math.cos(rotation)) + Math.abs(h * Math.sin(rotation)),\n        Math.abs(w * Math.sin(rotation)) + Math.abs(h * Math.cos(rotation)),\n      ];\n    }\n    return size;\n  }\n\n  /**\n   * Stores the viewport size on the view. The viewport size is not read every time from the DOM\n   * to avoid performance hit and layout reflow.\n   * This should be done on map size change.\n   * Note: the constraints are not resolved during an animation to avoid stopping it\n   * @param {import(\"./size.js\").Size} [size] Viewport size; if undefined, [100, 100] is assumed\n   */\n  setViewportSize(size) {\n    this.viewportSize_ = Array.isArray(size) ? size.slice() : [100, 100];\n    if (!this.getAnimating()) {\n      this.resolveConstraints(0);\n    }\n  }\n\n  /**\n   * Get the view center.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n   * @observable\n   * @api\n   */\n  getCenter() {\n    const center = this.getCenterInternal();\n    if (!center) {\n      return center;\n    }\n    return toUserCoordinate(center, this.getProjection());\n  }\n\n  /**\n   * Get the view center without transforming to user projection.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n   */\n  getCenterInternal() {\n    return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (\n      this.get(ViewProperty.CENTER)\n    );\n  }\n\n  /**\n   * @return {Constraints} Constraints.\n   */\n  getConstraints() {\n    return this.constraints_;\n  }\n\n  /**\n   * @return {boolean} Resolution constraint is set\n   */\n  getConstrainResolution() {\n    return this.get('constrainResolution');\n  }\n\n  /**\n   * @param {Array<number>} [hints] Destination array.\n   * @return {Array<number>} Hint.\n   */\n  getHints(hints) {\n    if (hints !== undefined) {\n      hints[0] = this.hints_[0];\n      hints[1] = this.hints_[1];\n      return hints;\n    }\n    return this.hints_.slice();\n  }\n\n  /**\n   * Calculate the extent for the current view state and the passed size.\n   * The size is the pixel dimensions of the box into which the calculated extent\n   * should fit. In most cases you want to get the extent of the entire map,\n   * that is `map.getSize()`.\n   * @param {import(\"./size.js\").Size} [size] Box pixel size. If not provided, the size\n   * of the map that uses this view will be used.\n   * @return {import(\"./extent.js\").Extent} Extent.\n   * @api\n   */\n  calculateExtent(size) {\n    const extent = this.calculateExtentInternal(size);\n    return toUserExtent(extent, this.getProjection());\n  }\n\n  /**\n   * @param {import(\"./size.js\").Size} [size] Box pixel size. If not provided,\n   * the map's last known viewport size will be used.\n   * @return {import(\"./extent.js\").Extent} Extent.\n   */\n  calculateExtentInternal(size) {\n    size = size || this.getViewportSizeMinusPadding_();\n    const center = /** @type {!import(\"./coordinate.js\").Coordinate} */ (\n      this.getCenterInternal()\n    );\n    assert(center, 1); // The view center is not defined\n    const resolution = /** @type {!number} */ (this.getResolution());\n    assert(resolution !== undefined, 2); // The view resolution is not defined\n    const rotation = /** @type {!number} */ (this.getRotation());\n    assert(rotation !== undefined, 3); // The view rotation is not defined\n\n    return getForViewAndSize(center, resolution, rotation, size);\n  }\n\n  /**\n   * Get the maximum resolution of the view.\n   * @return {number} The maximum resolution of the view.\n   * @api\n   */\n  getMaxResolution() {\n    return this.maxResolution_;\n  }\n\n  /**\n   * Get the minimum resolution of the view.\n   * @return {number} The minimum resolution of the view.\n   * @api\n   */\n  getMinResolution() {\n    return this.minResolution_;\n  }\n\n  /**\n   * Get the maximum zoom level for the view.\n   * @return {number} The maximum zoom level.\n   * @api\n   */\n  getMaxZoom() {\n    return /** @type {number} */ (\n      this.getZoomForResolution(this.minResolution_)\n    );\n  }\n\n  /**\n   * Set a new maximum zoom level for the view.\n   * @param {number} zoom The maximum zoom level.\n   * @api\n   */\n  setMaxZoom(zoom) {\n    this.applyOptions_(this.getUpdatedOptions_({maxZoom: zoom}));\n  }\n\n  /**\n   * Get the minimum zoom level for the view.\n   * @return {number} The minimum zoom level.\n   * @api\n   */\n  getMinZoom() {\n    return /** @type {number} */ (\n      this.getZoomForResolution(this.maxResolution_)\n    );\n  }\n\n  /**\n   * Set a new minimum zoom level for the view.\n   * @param {number} zoom The minimum zoom level.\n   * @api\n   */\n  setMinZoom(zoom) {\n    this.applyOptions_(this.getUpdatedOptions_({minZoom: zoom}));\n  }\n\n  /**\n   * Set whether the view should allow intermediary zoom levels.\n   * @param {boolean} enabled Whether the resolution is constrained.\n   * @api\n   */\n  setConstrainResolution(enabled) {\n    this.applyOptions_(this.getUpdatedOptions_({constrainResolution: enabled}));\n  }\n\n  /**\n   * Get the view projection.\n   * @return {import(\"./proj/Projection.js\").default} The projection of the view.\n   * @api\n   */\n  getProjection() {\n    return this.projection_;\n  }\n\n  /**\n   * Get the view resolution.\n   * @return {number|undefined} The resolution of the view.\n   * @observable\n   * @api\n   */\n  getResolution() {\n    return /** @type {number|undefined} */ (this.get(ViewProperty.RESOLUTION));\n  }\n\n  /**\n   * Get the resolutions for the view. This returns the array of resolutions\n   * passed to the constructor of the View, or undefined if none were given.\n   * @return {Array<number>|undefined} The resolutions of the view.\n   * @api\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {import(\"./size.js\").Size} [size] Box pixel size.\n   * @return {number} The resolution at which the provided extent will render at\n   *     the given size.\n   * @api\n   */\n  getResolutionForExtent(extent, size) {\n    return this.getResolutionForExtentInternal(\n      fromUserExtent(extent, this.getProjection()),\n      size\n    );\n  }\n\n  /**\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {import(\"./size.js\").Size} [size] Box pixel size.\n   * @return {number} The resolution at which the provided extent will render at\n   *     the given size.\n   */\n  getResolutionForExtentInternal(extent, size) {\n    size = size || this.getViewportSizeMinusPadding_();\n    const xResolution = getWidth(extent) / size[0];\n    const yResolution = getHeight(extent) / size[1];\n    return Math.max(xResolution, yResolution);\n  }\n\n  /**\n   * Return a function that returns a value between 0 and 1 for a\n   * resolution. Exponential scaling is assumed.\n   * @param {number} [power] Power.\n   * @return {function(number): number} Resolution for value function.\n   */\n  getResolutionForValueFunction(power) {\n    power = power || 2;\n    const maxResolution = this.getConstrainedResolution(this.maxResolution_);\n    const minResolution = this.minResolution_;\n    const max = Math.log(maxResolution / minResolution) / Math.log(power);\n    return (\n      /**\n       * @param {number} value Value.\n       * @return {number} Resolution.\n       */\n      function (value) {\n        const resolution = maxResolution / Math.pow(power, value * max);\n        return resolution;\n      }\n    );\n  }\n\n  /**\n   * Get the view rotation.\n   * @return {number} The rotation of the view in radians.\n   * @observable\n   * @api\n   */\n  getRotation() {\n    return /** @type {number} */ (this.get(ViewProperty.ROTATION));\n  }\n\n  /**\n   * Return a function that returns a resolution for a value between\n   * 0 and 1. Exponential scaling is assumed.\n   * @param {number} [power] Power.\n   * @return {function(number): number} Value for resolution function.\n   */\n  getValueForResolutionFunction(power) {\n    const logPower = Math.log(power || 2);\n    const maxResolution = this.getConstrainedResolution(this.maxResolution_);\n    const minResolution = this.minResolution_;\n    const max = Math.log(maxResolution / minResolution) / logPower;\n    return (\n      /**\n       * @param {number} resolution Resolution.\n       * @return {number} Value.\n       */\n      function (resolution) {\n        const value = Math.log(maxResolution / resolution) / logPower / max;\n        return value;\n      }\n    );\n  }\n\n  /**\n   * Returns the size of the viewport minus padding.\n   * @private\n   * @param {number} [rotation] Take into account the rotation of the viewport when giving the size\n   * @return {import(\"./size.js\").Size} Viewport size reduced by the padding.\n   */\n  getViewportSizeMinusPadding_(rotation) {\n    let size = this.getViewportSize_(rotation);\n    const padding = this.padding_;\n    if (padding) {\n      size = [\n        size[0] - padding[1] - padding[3],\n        size[1] - padding[0] - padding[2],\n      ];\n    }\n    return size;\n  }\n\n  /**\n   * @return {State} View state.\n   */\n  getState() {\n    const projection = this.getProjection();\n    const resolution = this.getResolution();\n    const rotation = this.getRotation();\n    let center = /** @type {import(\"./coordinate.js\").Coordinate} */ (\n      this.getCenterInternal()\n    );\n    const padding = this.padding_;\n    if (padding) {\n      const reducedSize = this.getViewportSizeMinusPadding_();\n      center = calculateCenterOn(\n        center,\n        this.getViewportSize_(),\n        [reducedSize[0] / 2 + padding[3], reducedSize[1] / 2 + padding[0]],\n        resolution,\n        rotation\n      );\n    }\n    return {\n      center: center.slice(0),\n      projection: projection !== undefined ? projection : null,\n      resolution: resolution,\n      nextCenter: this.nextCenter_,\n      nextResolution: this.nextResolution_,\n      nextRotation: this.nextRotation_,\n      rotation: rotation,\n      zoom: this.getZoom(),\n    };\n  }\n\n  /**\n   * @return {ViewStateAndExtent} Like `FrameState`, but just `viewState` and `extent`.\n   */\n  getViewStateAndExtent() {\n    return {\n      viewState: this.getState(),\n      extent: this.calculateExtent(),\n    };\n  }\n\n  /**\n   * Get the current zoom level. This method may return non-integer zoom levels\n   * if the view does not constrain the resolution, or if an interaction or\n   * animation is underway.\n   * @return {number|undefined} Zoom.\n   * @api\n   */\n  getZoom() {\n    let zoom;\n    const resolution = this.getResolution();\n    if (resolution !== undefined) {\n      zoom = this.getZoomForResolution(resolution);\n    }\n    return zoom;\n  }\n\n  /**\n   * Get the zoom level for a resolution.\n   * @param {number} resolution The resolution.\n   * @return {number|undefined} The zoom level for the provided resolution.\n   * @api\n   */\n  getZoomForResolution(resolution) {\n    let offset = this.minZoom_ || 0;\n    let max, zoomFactor;\n    if (this.resolutions_) {\n      const nearest = linearFindNearest(this.resolutions_, resolution, 1);\n      offset = nearest;\n      max = this.resolutions_[nearest];\n      if (nearest == this.resolutions_.length - 1) {\n        zoomFactor = 2;\n      } else {\n        zoomFactor = max / this.resolutions_[nearest + 1];\n      }\n    } else {\n      max = this.maxResolution_;\n      zoomFactor = this.zoomFactor_;\n    }\n    return offset + Math.log(max / resolution) / Math.log(zoomFactor);\n  }\n\n  /**\n   * Get the resolution for a zoom level.\n   * @param {number} zoom Zoom level.\n   * @return {number} The view resolution for the provided zoom level.\n   * @api\n   */\n  getResolutionForZoom(zoom) {\n    if (this.resolutions_) {\n      if (this.resolutions_.length <= 1) {\n        return 0;\n      }\n      const baseLevel = clamp(\n        Math.floor(zoom),\n        0,\n        this.resolutions_.length - 2\n      );\n      const zoomFactor =\n        this.resolutions_[baseLevel] / this.resolutions_[baseLevel + 1];\n      return (\n        this.resolutions_[baseLevel] /\n        Math.pow(zoomFactor, clamp(zoom - baseLevel, 0, 1))\n      );\n    }\n    return (\n      this.maxResolution_ / Math.pow(this.zoomFactor_, zoom - this.minZoom_)\n    );\n  }\n\n  /**\n   * Fit the given geometry or extent based on the given map size and border.\n   * The size is pixel dimensions of the box to fit the extent into.\n   * In most cases you will want to use the map size, that is `map.getSize()`.\n   * Takes care of the map angle.\n   * @param {import(\"./geom/SimpleGeometry.js\").default|import(\"./extent.js\").Extent} geometryOrExtent The geometry or\n   *     extent to fit the view to.\n   * @param {FitOptions} [options] Options.\n   * @api\n   */\n  fit(geometryOrExtent, options) {\n    /** @type {import(\"./geom/SimpleGeometry.js\").default} */\n    let geometry;\n    assert(\n      Array.isArray(geometryOrExtent) ||\n        typeof (/** @type {?} */ (geometryOrExtent).getSimplifiedGeometry) ===\n          'function',\n      24\n    ); // Invalid extent or geometry provided as `geometry`\n    if (Array.isArray(geometryOrExtent)) {\n      assert(!isEmpty(geometryOrExtent), 25); // Cannot fit empty extent provided as `geometry`\n      const extent = fromUserExtent(geometryOrExtent, this.getProjection());\n      geometry = polygonFromExtent(extent);\n    } else if (geometryOrExtent.getType() === 'Circle') {\n      const extent = fromUserExtent(\n        geometryOrExtent.getExtent(),\n        this.getProjection()\n      );\n      geometry = polygonFromExtent(extent);\n      geometry.rotate(this.getRotation(), getCenter(extent));\n    } else {\n      const userProjection = getUserProjection();\n      if (userProjection) {\n        geometry = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\n          geometryOrExtent\n            .clone()\n            .transform(userProjection, this.getProjection())\n        );\n      } else {\n        geometry = geometryOrExtent;\n      }\n    }\n\n    this.fitInternal(geometry, options);\n  }\n\n  /**\n   * Calculate rotated extent\n   * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\n   * @return {import(\"./extent\").Extent} The rotated extent for the geometry.\n   */\n  rotatedExtentForGeometry(geometry) {\n    const rotation = this.getRotation();\n    const cosAngle = Math.cos(rotation);\n    const sinAngle = Math.sin(-rotation);\n    const coords = geometry.getFlatCoordinates();\n    const stride = geometry.getStride();\n    let minRotX = +Infinity;\n    let minRotY = +Infinity;\n    let maxRotX = -Infinity;\n    let maxRotY = -Infinity;\n    for (let i = 0, ii = coords.length; i < ii; i += stride) {\n      const rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;\n      const rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;\n      minRotX = Math.min(minRotX, rotX);\n      minRotY = Math.min(minRotY, rotY);\n      maxRotX = Math.max(maxRotX, rotX);\n      maxRotY = Math.max(maxRotY, rotY);\n    }\n    return [minRotX, minRotY, maxRotX, maxRotY];\n  }\n\n  /**\n   * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\n   * @param {FitOptions} [options] Options.\n   */\n  fitInternal(geometry, options) {\n    options = options || {};\n    let size = options.size;\n    if (!size) {\n      size = this.getViewportSizeMinusPadding_();\n    }\n    const padding =\n      options.padding !== undefined ? options.padding : [0, 0, 0, 0];\n    const nearest = options.nearest !== undefined ? options.nearest : false;\n    let minResolution;\n    if (options.minResolution !== undefined) {\n      minResolution = options.minResolution;\n    } else if (options.maxZoom !== undefined) {\n      minResolution = this.getResolutionForZoom(options.maxZoom);\n    } else {\n      minResolution = 0;\n    }\n\n    const rotatedExtent = this.rotatedExtentForGeometry(geometry);\n\n    // calculate resolution\n    let resolution = this.getResolutionForExtentInternal(rotatedExtent, [\n      size[0] - padding[1] - padding[3],\n      size[1] - padding[0] - padding[2],\n    ]);\n    resolution = isNaN(resolution)\n      ? minResolution\n      : Math.max(resolution, minResolution);\n    resolution = this.getConstrainedResolution(resolution, nearest ? 0 : 1);\n\n    // calculate center\n    const rotation = this.getRotation();\n    const sinAngle = Math.sin(rotation);\n    const cosAngle = Math.cos(rotation);\n    const centerRot = getCenter(rotatedExtent);\n    centerRot[0] += ((padding[1] - padding[3]) / 2) * resolution;\n    centerRot[1] += ((padding[0] - padding[2]) / 2) * resolution;\n    const centerX = centerRot[0] * cosAngle - centerRot[1] * sinAngle;\n    const centerY = centerRot[1] * cosAngle + centerRot[0] * sinAngle;\n    const center = this.getConstrainedCenter([centerX, centerY], resolution);\n    const callback = options.callback ? options.callback : VOID;\n\n    if (options.duration !== undefined) {\n      this.animateInternal(\n        {\n          resolution: resolution,\n          center: center,\n          duration: options.duration,\n          easing: options.easing,\n        },\n        callback\n      );\n    } else {\n      this.targetResolution_ = resolution;\n      this.targetCenter_ = center;\n      this.applyTargetState_(false, true);\n      animationCallback(callback, true);\n    }\n  }\n\n  /**\n   * Center on coordinate and view position.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"./size.js\").Size} size Box pixel size.\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n   * @api\n   */\n  centerOn(coordinate, size, position) {\n    this.centerOnInternal(\n      fromUserCoordinate(coordinate, this.getProjection()),\n      size,\n      position\n    );\n  }\n\n  /**\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"./size.js\").Size} size Box pixel size.\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n   */\n  centerOnInternal(coordinate, size, position) {\n    this.setCenterInternal(\n      calculateCenterOn(\n        coordinate,\n        size,\n        position,\n        this.getResolution(),\n        this.getRotation()\n      )\n    );\n  }\n\n  /**\n   * Calculates the shift between map and viewport center.\n   * @param {import(\"./coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {import(\"./size.js\").Size} size Size.\n   * @return {Array<number>|undefined} Center shift.\n   */\n  calculateCenterShift(center, resolution, rotation, size) {\n    let centerShift;\n    const padding = this.padding_;\n    if (padding && center) {\n      const reducedSize = this.getViewportSizeMinusPadding_(-rotation);\n      const shiftedCenter = calculateCenterOn(\n        center,\n        size,\n        [reducedSize[0] / 2 + padding[3], reducedSize[1] / 2 + padding[0]],\n        resolution,\n        rotation\n      );\n      centerShift = [\n        center[0] - shiftedCenter[0],\n        center[1] - shiftedCenter[1],\n      ];\n    }\n    return centerShift;\n  }\n\n  /**\n   * @return {boolean} Is defined.\n   */\n  isDef() {\n    return !!this.getCenterInternal() && this.getResolution() !== undefined;\n  }\n\n  /**\n   * Adds relative coordinates to the center of the view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\n   * @api\n   */\n  adjustCenter(deltaCoordinates) {\n    const center = toUserCoordinate(this.targetCenter_, this.getProjection());\n    this.setCenter([\n      center[0] + deltaCoordinates[0],\n      center[1] + deltaCoordinates[1],\n    ]);\n  }\n\n  /**\n   * Adds relative coordinates to the center of the view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\n   */\n  adjustCenterInternal(deltaCoordinates) {\n    const center = this.targetCenter_;\n    this.setCenterInternal([\n      center[0] + deltaCoordinates[0],\n      center[1] + deltaCoordinates[1],\n    ]);\n  }\n\n  /**\n   * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} ratio The ratio to apply on the view resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   * @api\n   */\n  adjustResolution(ratio, anchor) {\n    anchor = anchor && fromUserCoordinate(anchor, this.getProjection());\n    this.adjustResolutionInternal(ratio, anchor);\n  }\n\n  /**\n   * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} ratio The ratio to apply on the view resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   */\n  adjustResolutionInternal(ratio, anchor) {\n    const isMoving = this.getAnimating() || this.getInteracting();\n    const size = this.getViewportSize_(this.getRotation());\n    const newResolution = this.constraints_.resolution(\n      this.targetResolution_ * ratio,\n      0,\n      size,\n      isMoving\n    );\n\n    if (anchor) {\n      this.targetCenter_ = this.calculateCenterZoom(newResolution, anchor);\n    }\n\n    this.targetResolution_ *= ratio;\n    this.applyTargetState_();\n  }\n\n  /**\n   * Adds a value to the view zoom level, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} delta Relative value to add to the zoom level.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   * @api\n   */\n  adjustZoom(delta, anchor) {\n    this.adjustResolution(Math.pow(this.zoomFactor_, -delta), anchor);\n  }\n\n  /**\n   * Adds a value to the view rotation, optionally using an anchor. Any rotation\n   * constraint will apply.\n   * @param {number} delta Relative value to add to the zoom rotation, in radians.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The rotation center.\n   * @api\n   */\n  adjustRotation(delta, anchor) {\n    if (anchor) {\n      anchor = fromUserCoordinate(anchor, this.getProjection());\n    }\n    this.adjustRotationInternal(delta, anchor);\n  }\n\n  /**\n   * @param {number} delta Relative value to add to the zoom rotation, in radians.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The rotation center.\n   */\n  adjustRotationInternal(delta, anchor) {\n    const isMoving = this.getAnimating() || this.getInteracting();\n    const newRotation = this.constraints_.rotation(\n      this.targetRotation_ + delta,\n      isMoving\n    );\n    if (anchor) {\n      this.targetCenter_ = this.calculateCenterRotate(newRotation, anchor);\n    }\n    this.targetRotation_ += delta;\n    this.applyTargetState_();\n  }\n\n  /**\n   * Set the center of the current view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n   * @observable\n   * @api\n   */\n  setCenter(center) {\n    this.setCenterInternal(\n      center ? fromUserCoordinate(center, this.getProjection()) : center\n    );\n  }\n\n  /**\n   * Set the center using the view projection (not the user projection).\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n   */\n  setCenterInternal(center) {\n    this.targetCenter_ = center;\n    this.applyTargetState_();\n  }\n\n  /**\n   * @param {import(\"./ViewHint.js\").default} hint Hint.\n   * @param {number} delta Delta.\n   * @return {number} New value.\n   */\n  setHint(hint, delta) {\n    this.hints_[hint] += delta;\n    this.changed();\n    return this.hints_[hint];\n  }\n\n  /**\n   * Set the resolution for this view. Any resolution constraint will apply.\n   * @param {number|undefined} resolution The resolution of the view.\n   * @observable\n   * @api\n   */\n  setResolution(resolution) {\n    this.targetResolution_ = resolution;\n    this.applyTargetState_();\n  }\n\n  /**\n   * Set the rotation for this view. Any rotation constraint will apply.\n   * @param {number} rotation The rotation of the view in radians.\n   * @observable\n   * @api\n   */\n  setRotation(rotation) {\n    this.targetRotation_ = rotation;\n    this.applyTargetState_();\n  }\n\n  /**\n   * Zoom to a specific zoom level. Any resolution constrain will apply.\n   * @param {number} zoom Zoom level.\n   * @api\n   */\n  setZoom(zoom) {\n    this.setResolution(this.getResolutionForZoom(zoom));\n  }\n\n  /**\n   * Recompute rotation/resolution/center based on target values.\n   * Note: we have to compute rotation first, then resolution and center considering that\n   * parameters can influence one another in case a view extent constraint is present.\n   * @param {boolean} [doNotCancelAnims] Do not cancel animations.\n   * @param {boolean} [forceMoving] Apply constraints as if the view is moving.\n   * @private\n   */\n  applyTargetState_(doNotCancelAnims, forceMoving) {\n    const isMoving =\n      this.getAnimating() || this.getInteracting() || forceMoving;\n\n    // compute rotation\n    const newRotation = this.constraints_.rotation(\n      this.targetRotation_,\n      isMoving\n    );\n    const size = this.getViewportSize_(newRotation);\n    const newResolution = this.constraints_.resolution(\n      this.targetResolution_,\n      0,\n      size,\n      isMoving\n    );\n    const newCenter = this.constraints_.center(\n      this.targetCenter_,\n      newResolution,\n      size,\n      isMoving,\n      this.calculateCenterShift(\n        this.targetCenter_,\n        newResolution,\n        newRotation,\n        size\n      )\n    );\n\n    if (this.get(ViewProperty.ROTATION) !== newRotation) {\n      this.set(ViewProperty.ROTATION, newRotation);\n    }\n    if (this.get(ViewProperty.RESOLUTION) !== newResolution) {\n      this.set(ViewProperty.RESOLUTION, newResolution);\n      this.set('zoom', this.getZoom(), true);\n    }\n    if (\n      !newCenter ||\n      !this.get(ViewProperty.CENTER) ||\n      !equals(this.get(ViewProperty.CENTER), newCenter)\n    ) {\n      this.set(ViewProperty.CENTER, newCenter);\n    }\n\n    if (this.getAnimating() && !doNotCancelAnims) {\n      this.cancelAnimations();\n    }\n    this.cancelAnchor_ = undefined;\n  }\n\n  /**\n   * If any constraints need to be applied, an animation will be triggered.\n   * This is typically done on interaction end.\n   * Note: calling this with a duration of 0 will apply the constrained values straight away,\n   * without animation.\n   * @param {number} [duration] The animation duration in ms.\n   * @param {number} [resolutionDirection] Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   */\n  resolveConstraints(duration, resolutionDirection, anchor) {\n    duration = duration !== undefined ? duration : 200;\n    const direction = resolutionDirection || 0;\n\n    const newRotation = this.constraints_.rotation(this.targetRotation_);\n    const size = this.getViewportSize_(newRotation);\n    const newResolution = this.constraints_.resolution(\n      this.targetResolution_,\n      direction,\n      size\n    );\n    const newCenter = this.constraints_.center(\n      this.targetCenter_,\n      newResolution,\n      size,\n      false,\n      this.calculateCenterShift(\n        this.targetCenter_,\n        newResolution,\n        newRotation,\n        size\n      )\n    );\n\n    if (duration === 0 && !this.cancelAnchor_) {\n      this.targetResolution_ = newResolution;\n      this.targetRotation_ = newRotation;\n      this.targetCenter_ = newCenter;\n      this.applyTargetState_();\n      return;\n    }\n\n    anchor = anchor || (duration === 0 ? this.cancelAnchor_ : undefined);\n    this.cancelAnchor_ = undefined;\n\n    if (\n      this.getResolution() !== newResolution ||\n      this.getRotation() !== newRotation ||\n      !this.getCenterInternal() ||\n      !equals(this.getCenterInternal(), newCenter)\n    ) {\n      if (this.getAnimating()) {\n        this.cancelAnimations();\n      }\n\n      this.animateInternal({\n        rotation: newRotation,\n        center: newCenter,\n        resolution: newResolution,\n        duration: duration,\n        easing: easeOut,\n        anchor: anchor,\n      });\n    }\n  }\n\n  /**\n   * Notify the View that an interaction has started.\n   * The view state will be resolved to a stable one if needed\n   * (depending on its constraints).\n   * @api\n   */\n  beginInteraction() {\n    this.resolveConstraints(0);\n\n    this.setHint(ViewHint.INTERACTING, 1);\n  }\n\n  /**\n   * Notify the View that an interaction has ended. The view state will be resolved\n   * to a stable one if needed (depending on its constraints).\n   * @param {number} [duration] Animation duration in ms.\n   * @param {number} [resolutionDirection] Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   * @api\n   */\n  endInteraction(duration, resolutionDirection, anchor) {\n    anchor = anchor && fromUserCoordinate(anchor, this.getProjection());\n    this.endInteractionInternal(duration, resolutionDirection, anchor);\n  }\n\n  /**\n   * Notify the View that an interaction has ended. The view state will be resolved\n   * to a stable one if needed (depending on its constraints).\n   * @param {number} [duration] Animation duration in ms.\n   * @param {number} [resolutionDirection] Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   */\n  endInteractionInternal(duration, resolutionDirection, anchor) {\n    if (!this.getInteracting()) {\n      return;\n    }\n    this.setHint(ViewHint.INTERACTING, -1);\n    this.resolveConstraints(duration, resolutionDirection, anchor);\n  }\n\n  /**\n   * Get a valid position for the view center according to the current constraints.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} targetCenter Target center position.\n   * @param {number} [targetResolution] Target resolution. If not supplied, the current one will be used.\n   * This is useful to guess a valid center position at a different zoom level.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Valid center position.\n   */\n  getConstrainedCenter(targetCenter, targetResolution) {\n    const size = this.getViewportSize_(this.getRotation());\n    return this.constraints_.center(\n      targetCenter,\n      targetResolution || this.getResolution(),\n      size\n    );\n  }\n\n  /**\n   * Get a valid zoom level according to the current view constraints.\n   * @param {number|undefined} targetZoom Target zoom.\n   * @param {number} [direction=0] Indicate which resolution should be used\n   * by a renderer if the view resolution does not match any resolution of the tile source.\n   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n   * will be used. If -1, the nearest higher resolution will be used.\n   * @return {number|undefined} Valid zoom level.\n   */\n  getConstrainedZoom(targetZoom, direction) {\n    const targetRes = this.getResolutionForZoom(targetZoom);\n    return this.getZoomForResolution(\n      this.getConstrainedResolution(targetRes, direction)\n    );\n  }\n\n  /**\n   * Get a valid resolution according to the current view constraints.\n   * @param {number|undefined} targetResolution Target resolution.\n   * @param {number} [direction=0] Indicate which resolution should be used\n   * by a renderer if the view resolution does not match any resolution of the tile source.\n   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n   * will be used. If -1, the nearest higher resolution will be used.\n   * @return {number|undefined} Valid resolution.\n   */\n  getConstrainedResolution(targetResolution, direction) {\n    direction = direction || 0;\n    const size = this.getViewportSize_(this.getRotation());\n\n    return this.constraints_.resolution(targetResolution, direction, size);\n  }\n}\n\n/**\n * @param {Function} callback Callback.\n * @param {*} returnValue Return value.\n */\nfunction animationCallback(callback, returnValue) {\n  setTimeout(function () {\n    callback(returnValue);\n  }, 0);\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./centerconstraint.js\").Type} The constraint.\n */\nexport function createCenterConstraint(options) {\n  if (options.extent !== undefined) {\n    const smooth =\n      options.smoothExtentConstraint !== undefined\n        ? options.smoothExtentConstraint\n        : true;\n    return createExtent(options.extent, options.constrainOnlyCenter, smooth);\n  }\n\n  const projection = createProjection(options.projection, 'EPSG:3857');\n  if (options.multiWorld !== true && projection.isGlobal()) {\n    const extent = projection.getExtent().slice();\n    extent[0] = -Infinity;\n    extent[2] = Infinity;\n    return createExtent(extent, false, false);\n  }\n\n  return centerNone;\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {{constraint: import(\"./resolutionconstraint.js\").Type, maxResolution: number,\n *     minResolution: number, minZoom: number, zoomFactor: number}} The constraint.\n */\nexport function createResolutionConstraint(options) {\n  let resolutionConstraint;\n  let maxResolution;\n  let minResolution;\n\n  // TODO: move these to be ol constants\n  // see https://github.com/openlayers/openlayers/issues/2076\n  const defaultMaxZoom = 28;\n  const defaultZoomFactor = 2;\n\n  let minZoom =\n    options.minZoom !== undefined ? options.minZoom : DEFAULT_MIN_ZOOM;\n\n  let maxZoom =\n    options.maxZoom !== undefined ? options.maxZoom : defaultMaxZoom;\n\n  const zoomFactor =\n    options.zoomFactor !== undefined ? options.zoomFactor : defaultZoomFactor;\n\n  const multiWorld =\n    options.multiWorld !== undefined ? options.multiWorld : false;\n\n  const smooth =\n    options.smoothResolutionConstraint !== undefined\n      ? options.smoothResolutionConstraint\n      : true;\n\n  const showFullExtent =\n    options.showFullExtent !== undefined ? options.showFullExtent : false;\n\n  const projection = createProjection(options.projection, 'EPSG:3857');\n  const projExtent = projection.getExtent();\n  let constrainOnlyCenter = options.constrainOnlyCenter;\n  let extent = options.extent;\n  if (!multiWorld && !extent && projection.isGlobal()) {\n    constrainOnlyCenter = false;\n    extent = projExtent;\n  }\n\n  if (options.resolutions !== undefined) {\n    const resolutions = options.resolutions;\n    maxResolution = resolutions[minZoom];\n    minResolution =\n      resolutions[maxZoom] !== undefined\n        ? resolutions[maxZoom]\n        : resolutions[resolutions.length - 1];\n\n    if (options.constrainResolution) {\n      resolutionConstraint = createSnapToResolutions(\n        resolutions,\n        smooth,\n        !constrainOnlyCenter && extent,\n        showFullExtent\n      );\n    } else {\n      resolutionConstraint = createMinMaxResolution(\n        maxResolution,\n        minResolution,\n        smooth,\n        !constrainOnlyCenter && extent,\n        showFullExtent\n      );\n    }\n  } else {\n    // calculate the default min and max resolution\n    const size = !projExtent\n      ? // use an extent that can fit the whole world if need be\n        (360 * METERS_PER_UNIT.degrees) / projection.getMetersPerUnit()\n      : Math.max(getWidth(projExtent), getHeight(projExtent));\n\n    const defaultMaxResolution =\n      size / DEFAULT_TILE_SIZE / Math.pow(defaultZoomFactor, DEFAULT_MIN_ZOOM);\n\n    const defaultMinResolution =\n      defaultMaxResolution /\n      Math.pow(defaultZoomFactor, defaultMaxZoom - DEFAULT_MIN_ZOOM);\n\n    // user provided maxResolution takes precedence\n    maxResolution = options.maxResolution;\n    if (maxResolution !== undefined) {\n      minZoom = 0;\n    } else {\n      maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);\n    }\n\n    // user provided minResolution takes precedence\n    minResolution = options.minResolution;\n    if (minResolution === undefined) {\n      if (options.maxZoom !== undefined) {\n        if (options.maxResolution !== undefined) {\n          minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);\n        } else {\n          minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);\n        }\n      } else {\n        minResolution = defaultMinResolution;\n      }\n    }\n\n    // given discrete zoom levels, minResolution may be different than provided\n    maxZoom =\n      minZoom +\n      Math.floor(\n        Math.log(maxResolution / minResolution) / Math.log(zoomFactor)\n      );\n    minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);\n\n    if (options.constrainResolution) {\n      resolutionConstraint = createSnapToPower(\n        zoomFactor,\n        maxResolution,\n        minResolution,\n        smooth,\n        !constrainOnlyCenter && extent,\n        showFullExtent\n      );\n    } else {\n      resolutionConstraint = createMinMaxResolution(\n        maxResolution,\n        minResolution,\n        smooth,\n        !constrainOnlyCenter && extent,\n        showFullExtent\n      );\n    }\n  }\n  return {\n    constraint: resolutionConstraint,\n    maxResolution: maxResolution,\n    minResolution: minResolution,\n    minZoom: minZoom,\n    zoomFactor: zoomFactor,\n  };\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./rotationconstraint.js\").Type} Rotation constraint.\n */\nexport function createRotationConstraint(options) {\n  const enableRotation =\n    options.enableRotation !== undefined ? options.enableRotation : true;\n  if (enableRotation) {\n    const constrainRotation = options.constrainRotation;\n    if (constrainRotation === undefined || constrainRotation === true) {\n      return createSnapToZero();\n    } else if (constrainRotation === false) {\n      return rotationNone;\n    } else if (typeof constrainRotation === 'number') {\n      return createSnapToN(constrainRotation);\n    }\n    return rotationNone;\n  }\n  return disable;\n}\n\n/**\n * Determine if an animation involves no view change.\n * @param {Animation} animation The animation.\n * @return {boolean} The animation involves no view change.\n */\nexport function isNoopAnimation(animation) {\n  if (animation.sourceCenter && animation.targetCenter) {\n    if (!coordinatesEqual(animation.sourceCenter, animation.targetCenter)) {\n      return false;\n    }\n  }\n  if (animation.sourceResolution !== animation.targetResolution) {\n    return false;\n  }\n  if (animation.sourceRotation !== animation.targetRotation) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {import(\"./size.js\").Size} size Box pixel size.\n * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @return {import(\"./coordinate.js\").Coordinate} Shifted center.\n */\nfunction calculateCenterOn(coordinate, size, position, resolution, rotation) {\n  // calculate rotated position\n  const cosAngle = Math.cos(-rotation);\n  let sinAngle = Math.sin(-rotation);\n  let rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n  let rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n  rotX += (size[0] / 2 - position[0]) * resolution;\n  rotY += (position[1] - size[1] / 2) * resolution;\n\n  // go back to original angle\n  sinAngle = -sinAngle; // go back to original rotation\n  const centerX = rotX * cosAngle - rotY * sinAngle;\n  const centerY = rotY * cosAngle + rotX * sinAngle;\n\n  return [centerX, centerY];\n}\n\nexport default View;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}