{"ast":null,"code":"import _classCallCheck from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * @module ol/source/Source\n */\nimport BaseObject from '../Object.js';\nimport { get as getProjection } from '../proj.js';\n\n/**\n * @typedef {'undefined' | 'loading' | 'ready' | 'error'} State\n * State of the source, one of 'undefined', 'loading', 'ready' or 'error'.\n */\n\n/**\n * A function that takes a {@link import(\"../View.js\").ViewStateAndExtent} and returns a string or\n * an array of strings representing source attributions.\n *\n * @typedef {function(import(\"../View.js\").ViewStateAndExtent): (string|Array<string>)} Attribution\n */\n\n/**\n * A type that can be used to provide attribution information for data sources.\n *\n * It represents either\n * * a simple string (e.g. `'© Acme Inc.'`)\n * * an array of simple strings (e.g. `['© Acme Inc.', '© Bacme Inc.']`)\n * * a function that returns a string or array of strings ({@link module:ol/source/Source~Attribution})\n *\n * @typedef {string|Array<string>|Attribution} AttributionLike\n */\n\n/**\n * @typedef {Object} Options\n * @property {AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {import(\"./Source.js\").State} [state='ready'] State.\n * @property {boolean} [wrapX=false] WrapX.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for {@link module:ol/layer/Layer~Layer} sources.\n *\n * A generic `change` event is triggered when the state of the source changes.\n * @abstract\n * @api\n */\nvar Source = /*#__PURE__*/function (_BaseObject) {\n  _inherits(Source, _BaseObject);\n  var _super = _createSuper(Source);\n  /**\n   * @param {Options} options Source options.\n   */\n  function Source(options) {\n    var _this;\n    _classCallCheck(this, Source);\n    _this = _super.call(this);\n\n    /**\n     * @protected\n     * @type {import(\"../proj/Projection.js\").default|null}\n     */\n    _this.projection = getProjection(options.projection);\n\n    /**\n     * @private\n     * @type {?Attribution}\n     */\n    _this.attributions_ = adaptAttributions(options.attributions);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.attributionsCollapsible_ = options.attributionsCollapsible !== undefined ? options.attributionsCollapsible : true;\n\n    /**\n     * This source is currently loading data. Sources that defer loading to the\n     * map's tile queue never set this to `true`.\n     * @type {boolean}\n     */\n    _this.loading = false;\n\n    /**\n     * @private\n     * @type {import(\"./Source.js\").State}\n     */\n    _this.state_ = options.state !== undefined ? options.state : 'ready';\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.interpolate_ = !!options.interpolate;\n\n    /**\n     * @protected\n     * @type {function(import(\"../View.js\").ViewOptions):void}\n     */\n    _this.viewResolver = null;\n\n    /**\n     * @protected\n     * @type {function(Error):void}\n     */\n    _this.viewRejector = null;\n    var self = _assertThisInitialized(_this);\n    /**\n     * @private\n     * @type {Promise<import(\"../View.js\").ViewOptions>}\n     */\n    _this.viewPromise_ = new Promise(function (resolve, reject) {\n      self.viewResolver = resolve;\n      self.viewRejector = reject;\n    });\n    return _this;\n  }\n\n  /**\n   * Get the attribution function for the source.\n   * @return {?Attribution} Attribution function.\n   * @api\n   */\n  _createClass(Source, [{\n    key: \"getAttributions\",\n    value: function getAttributions() {\n      return this.attributions_;\n    }\n\n    /**\n     * @return {boolean} Attributions are collapsible.\n     * @api\n     */\n  }, {\n    key: \"getAttributionsCollapsible\",\n    value: function getAttributionsCollapsible() {\n      return this.attributionsCollapsible_;\n    }\n\n    /**\n     * Get the projection of the source.\n     * @return {import(\"../proj/Projection.js\").default|null} Projection.\n     * @api\n     */\n  }, {\n    key: \"getProjection\",\n    value: function getProjection() {\n      return this.projection;\n    }\n\n    /**\n     * @param {import(\"../proj/Projection\").default} [projection] Projection.\n     * @return {Array<number>|null} Resolutions.\n     */\n  }, {\n    key: \"getResolutions\",\n    value: function getResolutions(projection) {\n      return null;\n    }\n\n    /**\n     * @return {Promise<import(\"../View.js\").ViewOptions>} A promise for view-related properties.\n     */\n  }, {\n    key: \"getView\",\n    value: function getView() {\n      return this.viewPromise_;\n    }\n\n    /**\n     * Get the state of the source, see {@link import(\"./Source.js\").State} for possible states.\n     * @return {import(\"./Source.js\").State} State.\n     * @api\n     */\n  }, {\n    key: \"getState\",\n    value: function getState() {\n      return this.state_;\n    }\n\n    /**\n     * @return {boolean|undefined} Wrap X.\n     */\n  }, {\n    key: \"getWrapX\",\n    value: function getWrapX() {\n      return this.wrapX_;\n    }\n\n    /**\n     * @return {boolean} Use linear interpolation when resampling.\n     */\n  }, {\n    key: \"getInterpolate\",\n    value: function getInterpolate() {\n      return this.interpolate_;\n    }\n\n    /**\n     * Refreshes the source. The source will be cleared, and data from the server will be reloaded.\n     * @api\n     */\n  }, {\n    key: \"refresh\",\n    value: function refresh() {\n      this.changed();\n    }\n\n    /**\n     * Set the attributions of the source.\n     * @param {AttributionLike|undefined} attributions Attributions.\n     *     Can be passed as `string`, `Array<string>`, {@link module:ol/source/Source~Attribution},\n     *     or `undefined`.\n     * @api\n     */\n  }, {\n    key: \"setAttributions\",\n    value: function setAttributions(attributions) {\n      this.attributions_ = adaptAttributions(attributions);\n      this.changed();\n    }\n\n    /**\n     * Set the state of the source.\n     * @param {import(\"./Source.js\").State} state State.\n     */\n  }, {\n    key: \"setState\",\n    value: function setState(state) {\n      this.state_ = state;\n      this.changed();\n    }\n  }]);\n  return Source;\n}(BaseObject);\n/**\n * Turns the attributions option into an attributions function.\n * @param {AttributionLike|undefined} attributionLike The attribution option.\n * @return {Attribution|null} An attribution function (or null).\n */\nfunction adaptAttributions(attributionLike) {\n  if (!attributionLike) {\n    return null;\n  }\n  if (Array.isArray(attributionLike)) {\n    return function (frameState) {\n      return attributionLike;\n    };\n  }\n  if (typeof attributionLike === 'function') {\n    return attributionLike;\n  }\n  return function (frameState) {\n    return [attributionLike];\n  };\n}\nexport default Source;","map":{"version":3,"names":["BaseObject","get","getProjection","Source","_BaseObject","_inherits","_super","_createSuper","options","_this","_classCallCheck","call","projection","attributions_","adaptAttributions","attributions","attributionsCollapsible_","attributionsCollapsible","undefined","loading","state_","state","wrapX_","wrapX","interpolate_","interpolate","viewResolver","viewRejector","self","_assertThisInitialized","viewPromise_","Promise","resolve","reject","_createClass","key","value","getAttributions","getAttributionsCollapsible","getResolutions","getView","getState","getWrapX","getInterpolate","refresh","changed","setAttributions","setState","attributionLike","Array","isArray","frameState"],"sources":["/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/ol/source/Source.js"],"sourcesContent":["/**\n * @module ol/source/Source\n */\nimport BaseObject from '../Object.js';\nimport {get as getProjection} from '../proj.js';\n\n/**\n * @typedef {'undefined' | 'loading' | 'ready' | 'error'} State\n * State of the source, one of 'undefined', 'loading', 'ready' or 'error'.\n */\n\n/**\n * A function that takes a {@link import(\"../View.js\").ViewStateAndExtent} and returns a string or\n * an array of strings representing source attributions.\n *\n * @typedef {function(import(\"../View.js\").ViewStateAndExtent): (string|Array<string>)} Attribution\n */\n\n/**\n * A type that can be used to provide attribution information for data sources.\n *\n * It represents either\n * * a simple string (e.g. `'© Acme Inc.'`)\n * * an array of simple strings (e.g. `['© Acme Inc.', '© Bacme Inc.']`)\n * * a function that returns a string or array of strings ({@link module:ol/source/Source~Attribution})\n *\n * @typedef {string|Array<string>|Attribution} AttributionLike\n */\n\n/**\n * @typedef {Object} Options\n * @property {AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {import(\"./Source.js\").State} [state='ready'] State.\n * @property {boolean} [wrapX=false] WrapX.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for {@link module:ol/layer/Layer~Layer} sources.\n *\n * A generic `change` event is triggered when the state of the source changes.\n * @abstract\n * @api\n */\nclass Source extends BaseObject {\n  /**\n   * @param {Options} options Source options.\n   */\n  constructor(options) {\n    super();\n\n    /**\n     * @protected\n     * @type {import(\"../proj/Projection.js\").default|null}\n     */\n    this.projection = getProjection(options.projection);\n\n    /**\n     * @private\n     * @type {?Attribution}\n     */\n    this.attributions_ = adaptAttributions(options.attributions);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.attributionsCollapsible_ =\n      options.attributionsCollapsible !== undefined\n        ? options.attributionsCollapsible\n        : true;\n\n    /**\n     * This source is currently loading data. Sources that defer loading to the\n     * map's tile queue never set this to `true`.\n     * @type {boolean}\n     */\n    this.loading = false;\n\n    /**\n     * @private\n     * @type {import(\"./Source.js\").State}\n     */\n    this.state_ = options.state !== undefined ? options.state : 'ready';\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.interpolate_ = !!options.interpolate;\n\n    /**\n     * @protected\n     * @type {function(import(\"../View.js\").ViewOptions):void}\n     */\n    this.viewResolver = null;\n\n    /**\n     * @protected\n     * @type {function(Error):void}\n     */\n    this.viewRejector = null;\n\n    const self = this;\n    /**\n     * @private\n     * @type {Promise<import(\"../View.js\").ViewOptions>}\n     */\n    this.viewPromise_ = new Promise(function (resolve, reject) {\n      self.viewResolver = resolve;\n      self.viewRejector = reject;\n    });\n  }\n\n  /**\n   * Get the attribution function for the source.\n   * @return {?Attribution} Attribution function.\n   * @api\n   */\n  getAttributions() {\n    return this.attributions_;\n  }\n\n  /**\n   * @return {boolean} Attributions are collapsible.\n   * @api\n   */\n  getAttributionsCollapsible() {\n    return this.attributionsCollapsible_;\n  }\n\n  /**\n   * Get the projection of the source.\n   * @return {import(\"../proj/Projection.js\").default|null} Projection.\n   * @api\n   */\n  getProjection() {\n    return this.projection;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection\").default} [projection] Projection.\n   * @return {Array<number>|null} Resolutions.\n   */\n  getResolutions(projection) {\n    return null;\n  }\n\n  /**\n   * @return {Promise<import(\"../View.js\").ViewOptions>} A promise for view-related properties.\n   */\n  getView() {\n    return this.viewPromise_;\n  }\n\n  /**\n   * Get the state of the source, see {@link import(\"./Source.js\").State} for possible states.\n   * @return {import(\"./Source.js\").State} State.\n   * @api\n   */\n  getState() {\n    return this.state_;\n  }\n\n  /**\n   * @return {boolean|undefined} Wrap X.\n   */\n  getWrapX() {\n    return this.wrapX_;\n  }\n\n  /**\n   * @return {boolean} Use linear interpolation when resampling.\n   */\n  getInterpolate() {\n    return this.interpolate_;\n  }\n\n  /**\n   * Refreshes the source. The source will be cleared, and data from the server will be reloaded.\n   * @api\n   */\n  refresh() {\n    this.changed();\n  }\n\n  /**\n   * Set the attributions of the source.\n   * @param {AttributionLike|undefined} attributions Attributions.\n   *     Can be passed as `string`, `Array<string>`, {@link module:ol/source/Source~Attribution},\n   *     or `undefined`.\n   * @api\n   */\n  setAttributions(attributions) {\n    this.attributions_ = adaptAttributions(attributions);\n    this.changed();\n  }\n\n  /**\n   * Set the state of the source.\n   * @param {import(\"./Source.js\").State} state State.\n   */\n  setState(state) {\n    this.state_ = state;\n    this.changed();\n  }\n}\n\n/**\n * Turns the attributions option into an attributions function.\n * @param {AttributionLike|undefined} attributionLike The attribution option.\n * @return {Attribution|null} An attribution function (or null).\n */\nfunction adaptAttributions(attributionLike) {\n  if (!attributionLike) {\n    return null;\n  }\n  if (Array.isArray(attributionLike)) {\n    return function (frameState) {\n      return attributionLike;\n    };\n  }\n\n  if (typeof attributionLike === 'function') {\n    return attributionLike;\n  }\n\n  return function (frameState) {\n    return [attributionLike];\n  };\n}\n\nexport default Source;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}