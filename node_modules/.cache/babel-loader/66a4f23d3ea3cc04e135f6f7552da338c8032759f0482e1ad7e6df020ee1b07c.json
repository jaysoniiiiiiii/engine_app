{"ast":null,"code":"import _classCallCheck from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * @module ol/renderer/canvas/Layer\n */\nimport LayerRenderer from '../Layer.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport { apply as applyTransform, compose as composeTransform, create as createTransform } from '../../transform.js';\nimport { asArray } from '../../color.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { equals } from '../../array.js';\nimport { getBottomLeft, getBottomRight, getTopLeft, getTopRight } from '../../extent.js';\n\n/**\n * @type {Array<HTMLCanvasElement>}\n */\nexport var canvasPool = [];\n\n/**\n * @type {CanvasRenderingContext2D}\n */\nvar pixelContext = null;\nfunction createPixelContext() {\n  pixelContext = createCanvasContext2D(1, 1, undefined, {\n    willReadFrequently: true\n  });\n}\n\n/**\n * @abstract\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */\nvar CanvasLayerRenderer = /*#__PURE__*/function (_LayerRenderer) {\n  _inherits(CanvasLayerRenderer, _LayerRenderer);\n  var _super = _createSuper(CanvasLayerRenderer);\n  /**\n   * @param {LayerType} layer Layer.\n   */\n  function CanvasLayerRenderer(layer) {\n    var _this;\n    _classCallCheck(this, CanvasLayerRenderer);\n    _this = _super.call(this, layer);\n\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    _this.container = null;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    _this.renderedResolution;\n\n    /**\n     * A temporary transform.  The values in this transform should only be used in a\n     * function that sets the values.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    _this.tempTransform = createTransform();\n\n    /**\n     * The transform for rendered pixels to viewport CSS pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    _this.pixelTransform = createTransform();\n\n    /**\n     * The transform for viewport CSS pixels to rendered pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    _this.inversePixelTransform = createTransform();\n\n    /**\n     * @type {CanvasRenderingContext2D}\n     */\n    _this.context = null;\n\n    /**\n     * @type {boolean}\n     */\n    _this.containerReused = false;\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    _this.pixelContext_ = null;\n\n    /**\n     * @protected\n     * @type {import(\"../../Map.js\").FrameState|null}\n     */\n    _this.frameState = null;\n    return _this;\n  }\n\n  /**\n   * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n   * @param {number} col The column index.\n   * @param {number} row The row index.\n   * @return {Uint8ClampedArray|null} The image data.\n   */\n  _createClass(CanvasLayerRenderer, [{\n    key: \"getImageData\",\n    value: function getImageData(image, col, row) {\n      if (!pixelContext) {\n        createPixelContext();\n      }\n      pixelContext.clearRect(0, 0, 1, 1);\n      var data;\n      try {\n        pixelContext.drawImage(image, col, row, 1, 1, 0, 0, 1, 1);\n        data = pixelContext.getImageData(0, 0, 1, 1).data;\n      } catch (err) {\n        pixelContext = null;\n        return null;\n      }\n      return data;\n    }\n\n    /**\n     * @param {import('../../Map.js').FrameState} frameState Frame state.\n     * @return {string} Background color.\n     */\n  }, {\n    key: \"getBackground\",\n    value: function getBackground(frameState) {\n      var layer = this.getLayer();\n      var background = layer.getBackground();\n      if (typeof background === 'function') {\n        background = background(frameState.viewState.resolution);\n      }\n      return background || undefined;\n    }\n\n    /**\n     * Get a rendering container from an existing target, if compatible.\n     * @param {HTMLElement} target Potential render target.\n     * @param {string} transform CSS Transform.\n     * @param {string} [backgroundColor] Background color.\n     */\n  }, {\n    key: \"useContainer\",\n    value: function useContainer(target, transform, backgroundColor) {\n      var layerClassName = this.getLayer().getClassName();\n      var container, context;\n      if (target && target.className === layerClassName && (!backgroundColor || target && target.style.backgroundColor && equals(asArray(target.style.backgroundColor), asArray(backgroundColor)))) {\n        var canvas = target.firstElementChild;\n        if (canvas instanceof HTMLCanvasElement) {\n          context = canvas.getContext('2d');\n        }\n      }\n      if (context && context.canvas.style.transform === transform) {\n        // Container of the previous layer renderer can be used.\n        this.container = target;\n        this.context = context;\n        this.containerReused = true;\n      } else if (this.containerReused) {\n        // Previously reused container cannot be used any more.\n        this.container = null;\n        this.context = null;\n        this.containerReused = false;\n      }\n      if (!this.container) {\n        container = document.createElement('div');\n        container.className = layerClassName;\n        var style = container.style;\n        style.position = 'absolute';\n        style.width = '100%';\n        style.height = '100%';\n        context = createCanvasContext2D();\n        var _canvas = context.canvas;\n        container.appendChild(_canvas);\n        style = _canvas.style;\n        style.position = 'absolute';\n        style.left = '0';\n        style.transformOrigin = 'top left';\n        this.container = container;\n        this.context = context;\n      }\n      if (!this.containerReused && backgroundColor && !this.container.style.backgroundColor) {\n        this.container.style.backgroundColor = backgroundColor;\n      }\n    }\n\n    /**\n     * @param {CanvasRenderingContext2D} context Context.\n     * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n     * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n     * @protected\n     */\n  }, {\n    key: \"clipUnrotated\",\n    value: function clipUnrotated(context, frameState, extent) {\n      var topLeft = getTopLeft(extent);\n      var topRight = getTopRight(extent);\n      var bottomRight = getBottomRight(extent);\n      var bottomLeft = getBottomLeft(extent);\n      applyTransform(frameState.coordinateToPixelTransform, topLeft);\n      applyTransform(frameState.coordinateToPixelTransform, topRight);\n      applyTransform(frameState.coordinateToPixelTransform, bottomRight);\n      applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\n      var inverted = this.inversePixelTransform;\n      applyTransform(inverted, topLeft);\n      applyTransform(inverted, topRight);\n      applyTransform(inverted, bottomRight);\n      applyTransform(inverted, bottomLeft);\n      context.save();\n      context.beginPath();\n      context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));\n      context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));\n      context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));\n      context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));\n      context.clip();\n    }\n\n    /**\n     * @param {import(\"../../render/EventType.js\").default} type Event type.\n     * @param {CanvasRenderingContext2D} context Context.\n     * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n     * @private\n     */\n  }, {\n    key: \"dispatchRenderEvent_\",\n    value: function dispatchRenderEvent_(type, context, frameState) {\n      var layer = this.getLayer();\n      if (layer.hasListener(type)) {\n        var event = new RenderEvent(type, this.inversePixelTransform, frameState, context);\n        layer.dispatchEvent(event);\n      }\n    }\n\n    /**\n     * @param {CanvasRenderingContext2D} context Context.\n     * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n     * @protected\n     */\n  }, {\n    key: \"preRender\",\n    value: function preRender(context, frameState) {\n      this.frameState = frameState;\n      this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n    }\n\n    /**\n     * @param {CanvasRenderingContext2D} context Context.\n     * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n     * @protected\n     */\n  }, {\n    key: \"postRender\",\n    value: function postRender(context, frameState) {\n      this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n    }\n\n    /**\n     * Creates a transform for rendering to an element that will be rotated after rendering.\n     * @param {import(\"../../coordinate.js\").Coordinate} center Center.\n     * @param {number} resolution Resolution.\n     * @param {number} rotation Rotation.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {number} width Width of the rendered element (in pixels).\n     * @param {number} height Height of the rendered element (in pixels).\n     * @param {number} offsetX Offset on the x-axis in view coordinates.\n     * @protected\n     * @return {!import(\"../../transform.js\").Transform} Transform.\n     */\n  }, {\n    key: \"getRenderTransform\",\n    value: function getRenderTransform(center, resolution, rotation, pixelRatio, width, height, offsetX) {\n      var dx1 = width / 2;\n      var dy1 = height / 2;\n      var sx = pixelRatio / resolution;\n      var sy = -sx;\n      var dx2 = -center[0] + offsetX;\n      var dy2 = -center[1];\n      return composeTransform(this.tempTransform, dx1, dy1, sx, sy, -rotation, dx2, dy2);\n    }\n\n    /**\n     * Clean up.\n     */\n  }, {\n    key: \"disposeInternal\",\n    value: function disposeInternal() {\n      delete this.frameState;\n      _get(_getPrototypeOf(CanvasLayerRenderer.prototype), \"disposeInternal\", this).call(this);\n    }\n  }]);\n  return CanvasLayerRenderer;\n}(LayerRenderer);\nexport default CanvasLayerRenderer;","map":{"version":3,"names":["LayerRenderer","RenderEvent","RenderEventType","apply","applyTransform","compose","composeTransform","create","createTransform","asArray","createCanvasContext2D","equals","getBottomLeft","getBottomRight","getTopLeft","getTopRight","canvasPool","pixelContext","createPixelContext","undefined","willReadFrequently","CanvasLayerRenderer","_LayerRenderer","_inherits","_super","_createSuper","layer","_this","_classCallCheck","call","container","renderedResolution","tempTransform","pixelTransform","inversePixelTransform","context","containerReused","pixelContext_","frameState","_createClass","key","value","getImageData","image","col","row","clearRect","data","drawImage","err","getBackground","getLayer","background","viewState","resolution","useContainer","target","transform","backgroundColor","layerClassName","getClassName","className","style","canvas","firstElementChild","HTMLCanvasElement","getContext","document","createElement","position","width","height","appendChild","left","transformOrigin","clipUnrotated","extent","topLeft","topRight","bottomRight","bottomLeft","coordinateToPixelTransform","inverted","save","beginPath","moveTo","Math","round","lineTo","clip","dispatchRenderEvent_","type","hasListener","event","dispatchEvent","preRender","PRERENDER","postRender","POSTRENDER","getRenderTransform","center","rotation","pixelRatio","offsetX","dx1","dy1","sx","sy","dx2","dy2","disposeInternal","_get","_getPrototypeOf","prototype"],"sources":["/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/ol/renderer/canvas/Layer.js"],"sourcesContent":["/**\n * @module ol/renderer/canvas/Layer\n */\nimport LayerRenderer from '../Layer.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport {\n  apply as applyTransform,\n  compose as composeTransform,\n  create as createTransform,\n} from '../../transform.js';\nimport {asArray} from '../../color.js';\nimport {createCanvasContext2D} from '../../dom.js';\nimport {equals} from '../../array.js';\nimport {\n  getBottomLeft,\n  getBottomRight,\n  getTopLeft,\n  getTopRight,\n} from '../../extent.js';\n\n/**\n * @type {Array<HTMLCanvasElement>}\n */\nexport const canvasPool = [];\n\n/**\n * @type {CanvasRenderingContext2D}\n */\nlet pixelContext = null;\n\nfunction createPixelContext() {\n  pixelContext = createCanvasContext2D(1, 1, undefined, {\n    willReadFrequently: true,\n  });\n}\n\n/**\n * @abstract\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */\nclass CanvasLayerRenderer extends LayerRenderer {\n  /**\n   * @param {LayerType} layer Layer.\n   */\n  constructor(layer) {\n    super(layer);\n\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    this.container = null;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.renderedResolution;\n\n    /**\n     * A temporary transform.  The values in this transform should only be used in a\n     * function that sets the values.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.tempTransform = createTransform();\n\n    /**\n     * The transform for rendered pixels to viewport CSS pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.pixelTransform = createTransform();\n\n    /**\n     * The transform for viewport CSS pixels to rendered pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.inversePixelTransform = createTransform();\n\n    /**\n     * @type {CanvasRenderingContext2D}\n     */\n    this.context = null;\n\n    /**\n     * @type {boolean}\n     */\n    this.containerReused = false;\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.pixelContext_ = null;\n\n    /**\n     * @protected\n     * @type {import(\"../../Map.js\").FrameState|null}\n     */\n    this.frameState = null;\n  }\n\n  /**\n   * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n   * @param {number} col The column index.\n   * @param {number} row The row index.\n   * @return {Uint8ClampedArray|null} The image data.\n   */\n  getImageData(image, col, row) {\n    if (!pixelContext) {\n      createPixelContext();\n    }\n    pixelContext.clearRect(0, 0, 1, 1);\n\n    let data;\n    try {\n      pixelContext.drawImage(image, col, row, 1, 1, 0, 0, 1, 1);\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\n    } catch (err) {\n      pixelContext = null;\n      return null;\n    }\n    return data;\n  }\n\n  /**\n   * @param {import('../../Map.js').FrameState} frameState Frame state.\n   * @return {string} Background color.\n   */\n  getBackground(frameState) {\n    const layer = this.getLayer();\n    let background = layer.getBackground();\n    if (typeof background === 'function') {\n      background = background(frameState.viewState.resolution);\n    }\n    return background || undefined;\n  }\n\n  /**\n   * Get a rendering container from an existing target, if compatible.\n   * @param {HTMLElement} target Potential render target.\n   * @param {string} transform CSS Transform.\n   * @param {string} [backgroundColor] Background color.\n   */\n  useContainer(target, transform, backgroundColor) {\n    const layerClassName = this.getLayer().getClassName();\n    let container, context;\n    if (\n      target &&\n      target.className === layerClassName &&\n      (!backgroundColor ||\n        (target &&\n          target.style.backgroundColor &&\n          equals(\n            asArray(target.style.backgroundColor),\n            asArray(backgroundColor)\n          )))\n    ) {\n      const canvas = target.firstElementChild;\n      if (canvas instanceof HTMLCanvasElement) {\n        context = canvas.getContext('2d');\n      }\n    }\n    if (context && context.canvas.style.transform === transform) {\n      // Container of the previous layer renderer can be used.\n      this.container = target;\n      this.context = context;\n      this.containerReused = true;\n    } else if (this.containerReused) {\n      // Previously reused container cannot be used any more.\n      this.container = null;\n      this.context = null;\n      this.containerReused = false;\n    }\n    if (!this.container) {\n      container = document.createElement('div');\n      container.className = layerClassName;\n      let style = container.style;\n      style.position = 'absolute';\n      style.width = '100%';\n      style.height = '100%';\n      context = createCanvasContext2D();\n      const canvas = context.canvas;\n      container.appendChild(canvas);\n      style = canvas.style;\n      style.position = 'absolute';\n      style.left = '0';\n      style.transformOrigin = 'top left';\n      this.container = container;\n      this.context = context;\n    }\n    if (\n      !this.containerReused &&\n      backgroundColor &&\n      !this.container.style.backgroundColor\n    ) {\n      this.container.style.backgroundColor = backgroundColor;\n    }\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n   * @protected\n   */\n  clipUnrotated(context, frameState, extent) {\n    const topLeft = getTopLeft(extent);\n    const topRight = getTopRight(extent);\n    const bottomRight = getBottomRight(extent);\n    const bottomLeft = getBottomLeft(extent);\n\n    applyTransform(frameState.coordinateToPixelTransform, topLeft);\n    applyTransform(frameState.coordinateToPixelTransform, topRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\n\n    const inverted = this.inversePixelTransform;\n    applyTransform(inverted, topLeft);\n    applyTransform(inverted, topRight);\n    applyTransform(inverted, bottomRight);\n    applyTransform(inverted, bottomLeft);\n\n    context.save();\n    context.beginPath();\n    context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));\n    context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));\n    context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));\n    context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));\n    context.clip();\n  }\n\n  /**\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @private\n   */\n  dispatchRenderEvent_(type, context, frameState) {\n    const layer = this.getLayer();\n    if (layer.hasListener(type)) {\n      const event = new RenderEvent(\n        type,\n        this.inversePixelTransform,\n        frameState,\n        context\n      );\n      layer.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  preRender(context, frameState) {\n    this.frameState = frameState;\n    this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  postRender(context, frameState) {\n    this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n  }\n\n  /**\n   * Creates a transform for rendering to an element that will be rotated after rendering.\n   * @param {import(\"../../coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {number} width Width of the rendered element (in pixels).\n   * @param {number} height Height of the rendered element (in pixels).\n   * @param {number} offsetX Offset on the x-axis in view coordinates.\n   * @protected\n   * @return {!import(\"../../transform.js\").Transform} Transform.\n   */\n  getRenderTransform(\n    center,\n    resolution,\n    rotation,\n    pixelRatio,\n    width,\n    height,\n    offsetX\n  ) {\n    const dx1 = width / 2;\n    const dy1 = height / 2;\n    const sx = pixelRatio / resolution;\n    const sy = -sx;\n    const dx2 = -center[0] + offsetX;\n    const dy2 = -center[1];\n    return composeTransform(\n      this.tempTransform,\n      dx1,\n      dy1,\n      sx,\n      sy,\n      -rotation,\n      dx2,\n      dy2\n    );\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    delete this.frameState;\n    super.disposeInternal();\n  }\n}\n\nexport default CanvasLayerRenderer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}