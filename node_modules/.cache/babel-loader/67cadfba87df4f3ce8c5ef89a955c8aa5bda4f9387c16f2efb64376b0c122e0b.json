{"ast":null,"code":"/**\n * @module ol/render/canvas/hitdetect\n */\n\nimport CanvasImmediateRenderer from './Immediate.js';\nimport { Icon } from '../../style.js';\nimport { ascending } from '../../array.js';\nimport { clamp } from '../../math.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { intersects } from '../../extent.js';\nexport const HIT_DETECT_RESOLUTION = 0.5;\n\n/**\n * @param {import(\"../../size.js\").Size} size Canvas size in css pixels.\n * @param {Array<import(\"../../transform.js\").Transform>} transforms Transforms\n * for rendering features to all worlds of the viewport, from coordinates to css\n * pixels.\n * @param {Array<import(\"../../Feature.js\").FeatureLike>} features\n * Features to consider for hit detection.\n * @param {import(\"../../style/Style.js\").StyleFunction|undefined} styleFunction\n * Layer style function.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @return {ImageData} Hit detection image data.\n */\nexport function createHitDetectionImageData(size, transforms, features, styleFunction, extent, resolution, rotation) {\n  const width = size[0] * HIT_DETECT_RESOLUTION;\n  const height = size[1] * HIT_DETECT_RESOLUTION;\n  const context = createCanvasContext2D(width, height);\n  context.imageSmoothingEnabled = false;\n  const canvas = context.canvas;\n  const renderer = new CanvasImmediateRenderer(context, HIT_DETECT_RESOLUTION, extent, null, rotation);\n  const featureCount = features.length;\n  // Stretch hit detection index to use the whole available color range\n  const indexFactor = Math.floor((256 * 256 * 256 - 1) / featureCount);\n  const featuresByZIndex = {};\n  for (let i = 1; i <= featureCount; ++i) {\n    const feature = features[i - 1];\n    const featureStyleFunction = feature.getStyleFunction() || styleFunction;\n    if (!styleFunction) {\n      continue;\n    }\n    let styles = featureStyleFunction(feature, resolution);\n    if (!styles) {\n      continue;\n    }\n    if (!Array.isArray(styles)) {\n      styles = [styles];\n    }\n    const index = i * indexFactor;\n    const color = index.toString(16).padStart(7, '#00000');\n    for (let j = 0, jj = styles.length; j < jj; ++j) {\n      const originalStyle = styles[j];\n      const geometry = originalStyle.getGeometryFunction()(feature);\n      if (!geometry || !intersects(extent, geometry.getExtent())) {\n        continue;\n      }\n      const style = originalStyle.clone();\n      const fill = style.getFill();\n      if (fill) {\n        fill.setColor(color);\n      }\n      const stroke = style.getStroke();\n      if (stroke) {\n        stroke.setColor(color);\n        stroke.setLineDash(null);\n      }\n      style.setText(undefined);\n      const image = originalStyle.getImage();\n      if (image && image.getOpacity() !== 0) {\n        const imgSize = image.getImageSize();\n        if (!imgSize) {\n          continue;\n        }\n        const imgContext = createCanvasContext2D(imgSize[0], imgSize[1], undefined, {\n          alpha: false\n        });\n        const img = imgContext.canvas;\n        imgContext.fillStyle = color;\n        imgContext.fillRect(0, 0, img.width, img.height);\n        style.setImage(new Icon({\n          img: img,\n          imgSize: imgSize,\n          anchor: image.getAnchor(),\n          anchorXUnits: 'pixels',\n          anchorYUnits: 'pixels',\n          offset: image.getOrigin(),\n          opacity: 1,\n          size: image.getSize(),\n          scale: image.getScale(),\n          rotation: image.getRotation(),\n          rotateWithView: image.getRotateWithView()\n        }));\n      }\n      const zIndex = style.getZIndex() || 0;\n      let byGeometryType = featuresByZIndex[zIndex];\n      if (!byGeometryType) {\n        byGeometryType = {};\n        featuresByZIndex[zIndex] = byGeometryType;\n        byGeometryType['Polygon'] = [];\n        byGeometryType['Circle'] = [];\n        byGeometryType['LineString'] = [];\n        byGeometryType['Point'] = [];\n      }\n      const type = geometry.getType();\n      if (type === 'GeometryCollection') {\n        const geometries = /** @type {import(\"../../geom/GeometryCollection.js\").default} */geometry.getGeometriesArrayRecursive();\n        for (let i = 0, ii = geometries.length; i < ii; ++i) {\n          const geometry = geometries[i];\n          byGeometryType[geometry.getType().replace('Multi', '')].push(geometry, style);\n        }\n      } else {\n        byGeometryType[type.replace('Multi', '')].push(geometry, style);\n      }\n    }\n  }\n  const zIndexKeys = Object.keys(featuresByZIndex).map(Number).sort(ascending);\n  for (let i = 0, ii = zIndexKeys.length; i < ii; ++i) {\n    const byGeometryType = featuresByZIndex[zIndexKeys[i]];\n    for (const type in byGeometryType) {\n      const geomAndStyle = byGeometryType[type];\n      for (let j = 0, jj = geomAndStyle.length; j < jj; j += 2) {\n        renderer.setStyle(geomAndStyle[j + 1]);\n        for (let k = 0, kk = transforms.length; k < kk; ++k) {\n          renderer.setTransform(transforms[k]);\n          renderer.drawGeometry(geomAndStyle[j]);\n        }\n      }\n    }\n  }\n  return context.getImageData(0, 0, canvas.width, canvas.height);\n}\n\n/**\n * @param {import(\"../../pixel\").Pixel} pixel Pixel coordinate on the hit\n * detection canvas in css pixels.\n * @param {Array<F>} features Features. Has to\n * match the `features` array that was passed to `createHitDetectionImageData()`.\n * @param {ImageData} imageData Hit detection image data generated by\n * `createHitDetectionImageData()`.\n * @return {Array<F>} Features.\n * @template {import(\"../../Feature.js\").FeatureLike} F\n */\nexport function hitDetect(pixel, features, imageData) {\n  const resultFeatures = [];\n  if (imageData) {\n    const x = Math.floor(Math.round(pixel[0]) * HIT_DETECT_RESOLUTION);\n    const y = Math.floor(Math.round(pixel[1]) * HIT_DETECT_RESOLUTION);\n    // The pixel coordinate is clamped down to the hit-detect canvas' size to account\n    // for browsers returning coordinates slightly larger than the actual canvas size\n    // due to a non-integer pixel ratio.\n    const index = (clamp(x, 0, imageData.width - 1) + clamp(y, 0, imageData.height - 1) * imageData.width) * 4;\n    const r = imageData.data[index];\n    const g = imageData.data[index + 1];\n    const b = imageData.data[index + 2];\n    const i = b + 256 * (g + 256 * r);\n    const indexFactor = Math.floor((256 * 256 * 256 - 1) / features.length);\n    if (i && i % indexFactor === 0) {\n      resultFeatures.push(features[i / indexFactor - 1]);\n    }\n  }\n  // @ts-ignore Features are copied from `features` to `resultFeatures` so the type should be the same\n  return resultFeatures;\n}","map":{"version":3,"names":["CanvasImmediateRenderer","Icon","ascending","clamp","createCanvasContext2D","intersects","HIT_DETECT_RESOLUTION","createHitDetectionImageData","size","transforms","features","styleFunction","extent","resolution","rotation","width","height","context","imageSmoothingEnabled","canvas","renderer","featureCount","length","indexFactor","Math","floor","featuresByZIndex","i","feature","featureStyleFunction","getStyleFunction","styles","Array","isArray","index","color","toString","padStart","j","jj","originalStyle","geometry","getGeometryFunction","getExtent","style","clone","fill","getFill","setColor","stroke","getStroke","setLineDash","setText","undefined","image","getImage","getOpacity","imgSize","getImageSize","imgContext","alpha","img","fillStyle","fillRect","setImage","anchor","getAnchor","anchorXUnits","anchorYUnits","offset","getOrigin","opacity","getSize","scale","getScale","getRotation","rotateWithView","getRotateWithView","zIndex","getZIndex","byGeometryType","type","getType","geometries","getGeometriesArrayRecursive","ii","replace","push","zIndexKeys","Object","keys","map","Number","sort","geomAndStyle","setStyle","k","kk","setTransform","drawGeometry","getImageData","hitDetect","pixel","imageData","resultFeatures","x","round","y","r","data","g","b"],"sources":["/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/ol/render/canvas/hitdetect.js"],"sourcesContent":["/**\n * @module ol/render/canvas/hitdetect\n */\n\nimport CanvasImmediateRenderer from './Immediate.js';\nimport {Icon} from '../../style.js';\nimport {ascending} from '../../array.js';\nimport {clamp} from '../../math.js';\nimport {createCanvasContext2D} from '../../dom.js';\nimport {intersects} from '../../extent.js';\n\nexport const HIT_DETECT_RESOLUTION = 0.5;\n\n/**\n * @param {import(\"../../size.js\").Size} size Canvas size in css pixels.\n * @param {Array<import(\"../../transform.js\").Transform>} transforms Transforms\n * for rendering features to all worlds of the viewport, from coordinates to css\n * pixels.\n * @param {Array<import(\"../../Feature.js\").FeatureLike>} features\n * Features to consider for hit detection.\n * @param {import(\"../../style/Style.js\").StyleFunction|undefined} styleFunction\n * Layer style function.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @return {ImageData} Hit detection image data.\n */\nexport function createHitDetectionImageData(\n  size,\n  transforms,\n  features,\n  styleFunction,\n  extent,\n  resolution,\n  rotation\n) {\n  const width = size[0] * HIT_DETECT_RESOLUTION;\n  const height = size[1] * HIT_DETECT_RESOLUTION;\n  const context = createCanvasContext2D(width, height);\n  context.imageSmoothingEnabled = false;\n  const canvas = context.canvas;\n  const renderer = new CanvasImmediateRenderer(\n    context,\n    HIT_DETECT_RESOLUTION,\n    extent,\n    null,\n    rotation\n  );\n  const featureCount = features.length;\n  // Stretch hit detection index to use the whole available color range\n  const indexFactor = Math.floor((256 * 256 * 256 - 1) / featureCount);\n  const featuresByZIndex = {};\n  for (let i = 1; i <= featureCount; ++i) {\n    const feature = features[i - 1];\n    const featureStyleFunction = feature.getStyleFunction() || styleFunction;\n    if (!styleFunction) {\n      continue;\n    }\n    let styles = featureStyleFunction(feature, resolution);\n    if (!styles) {\n      continue;\n    }\n    if (!Array.isArray(styles)) {\n      styles = [styles];\n    }\n    const index = i * indexFactor;\n    const color = index.toString(16).padStart(7, '#00000');\n    for (let j = 0, jj = styles.length; j < jj; ++j) {\n      const originalStyle = styles[j];\n      const geometry = originalStyle.getGeometryFunction()(feature);\n      if (!geometry || !intersects(extent, geometry.getExtent())) {\n        continue;\n      }\n      const style = originalStyle.clone();\n      const fill = style.getFill();\n      if (fill) {\n        fill.setColor(color);\n      }\n      const stroke = style.getStroke();\n      if (stroke) {\n        stroke.setColor(color);\n        stroke.setLineDash(null);\n      }\n      style.setText(undefined);\n      const image = originalStyle.getImage();\n      if (image && image.getOpacity() !== 0) {\n        const imgSize = image.getImageSize();\n        if (!imgSize) {\n          continue;\n        }\n\n        const imgContext = createCanvasContext2D(\n          imgSize[0],\n          imgSize[1],\n          undefined,\n          {alpha: false}\n        );\n        const img = imgContext.canvas;\n        imgContext.fillStyle = color;\n        imgContext.fillRect(0, 0, img.width, img.height);\n        style.setImage(\n          new Icon({\n            img: img,\n            imgSize: imgSize,\n            anchor: image.getAnchor(),\n            anchorXUnits: 'pixels',\n            anchorYUnits: 'pixels',\n            offset: image.getOrigin(),\n            opacity: 1,\n            size: image.getSize(),\n            scale: image.getScale(),\n            rotation: image.getRotation(),\n            rotateWithView: image.getRotateWithView(),\n          })\n        );\n      }\n      const zIndex = style.getZIndex() || 0;\n      let byGeometryType = featuresByZIndex[zIndex];\n      if (!byGeometryType) {\n        byGeometryType = {};\n        featuresByZIndex[zIndex] = byGeometryType;\n        byGeometryType['Polygon'] = [];\n        byGeometryType['Circle'] = [];\n        byGeometryType['LineString'] = [];\n        byGeometryType['Point'] = [];\n      }\n      const type = geometry.getType();\n      if (type === 'GeometryCollection') {\n        const geometries =\n          /** @type {import(\"../../geom/GeometryCollection.js\").default} */ (\n            geometry\n          ).getGeometriesArrayRecursive();\n        for (let i = 0, ii = geometries.length; i < ii; ++i) {\n          const geometry = geometries[i];\n          byGeometryType[geometry.getType().replace('Multi', '')].push(\n            geometry,\n            style\n          );\n        }\n      } else {\n        byGeometryType[type.replace('Multi', '')].push(geometry, style);\n      }\n    }\n  }\n\n  const zIndexKeys = Object.keys(featuresByZIndex).map(Number).sort(ascending);\n  for (let i = 0, ii = zIndexKeys.length; i < ii; ++i) {\n    const byGeometryType = featuresByZIndex[zIndexKeys[i]];\n    for (const type in byGeometryType) {\n      const geomAndStyle = byGeometryType[type];\n      for (let j = 0, jj = geomAndStyle.length; j < jj; j += 2) {\n        renderer.setStyle(geomAndStyle[j + 1]);\n        for (let k = 0, kk = transforms.length; k < kk; ++k) {\n          renderer.setTransform(transforms[k]);\n          renderer.drawGeometry(geomAndStyle[j]);\n        }\n      }\n    }\n  }\n  return context.getImageData(0, 0, canvas.width, canvas.height);\n}\n\n/**\n * @param {import(\"../../pixel\").Pixel} pixel Pixel coordinate on the hit\n * detection canvas in css pixels.\n * @param {Array<F>} features Features. Has to\n * match the `features` array that was passed to `createHitDetectionImageData()`.\n * @param {ImageData} imageData Hit detection image data generated by\n * `createHitDetectionImageData()`.\n * @return {Array<F>} Features.\n * @template {import(\"../../Feature.js\").FeatureLike} F\n */\nexport function hitDetect(pixel, features, imageData) {\n  const resultFeatures = [];\n  if (imageData) {\n    const x = Math.floor(Math.round(pixel[0]) * HIT_DETECT_RESOLUTION);\n    const y = Math.floor(Math.round(pixel[1]) * HIT_DETECT_RESOLUTION);\n    // The pixel coordinate is clamped down to the hit-detect canvas' size to account\n    // for browsers returning coordinates slightly larger than the actual canvas size\n    // due to a non-integer pixel ratio.\n    const index =\n      (clamp(x, 0, imageData.width - 1) +\n        clamp(y, 0, imageData.height - 1) * imageData.width) *\n      4;\n    const r = imageData.data[index];\n    const g = imageData.data[index + 1];\n    const b = imageData.data[index + 2];\n    const i = b + 256 * (g + 256 * r);\n    const indexFactor = Math.floor((256 * 256 * 256 - 1) / features.length);\n    if (i && i % indexFactor === 0) {\n      resultFeatures.push(features[i / indexFactor - 1]);\n    }\n  }\n  // @ts-ignore Features are copied from `features` to `resultFeatures` so the type should be the same\n  return resultFeatures;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}