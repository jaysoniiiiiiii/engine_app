{"ast":null,"code":"import _classCallCheck from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * @module ol/control/Control\n */\nimport BaseObject from '../Object.js';\nimport MapEventType from '../MapEventType.js';\nimport { VOID } from '../functions.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport { removeNode } from '../dom.js';\n\n/**\n * @typedef {Object} Options\n * @property {HTMLElement} [element] The element is the control's\n * container element. This only needs to be specified if you're developing\n * a custom control.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n * @property {HTMLElement|string} [target] Specify a target if you want\n * the control to be rendered outside of the map's viewport.\n */\n\n/**\n * @classdesc\n * A control is a visible widget with a DOM element in a fixed position on the\n * screen. They can involve user input (buttons), or be informational only;\n * the position is determined using CSS. By default these are placed in the\n * container with CSS class name `ol-overlaycontainer-stopevent`, but can use\n * any outside DOM element.\n *\n * This is the base class for controls. You can use it for simple custom\n * controls by creating the element with listeners, creating an instance:\n * ```js\n * const myControl = new Control({element: myElement});\n * ```\n * and then adding this to the map.\n *\n * The main advantage of having this as a control rather than a simple separate\n * DOM element is that preventing propagation is handled for you. Controls\n * will also be objects in a {@link module:ol/Collection~Collection}, so you can use their methods.\n *\n * You can also extend this base for your own control class. See\n * examples/custom-controls for an example of how to do this.\n *\n * @api\n */\nvar Control = /*#__PURE__*/function (_BaseObject) {\n  _inherits(Control, _BaseObject);\n  var _super = _createSuper(Control);\n  /**\n   * @param {Options} options Control options.\n   */\n  function Control(options) {\n    var _this;\n    _classCallCheck(this, Control);\n    _this = _super.call(this);\n    var element = options.element;\n    if (element && !options.target && !element.style.pointerEvents) {\n      element.style.pointerEvents = 'auto';\n    }\n\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    _this.element = element ? element : null;\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    _this.target_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../Map.js\").default|null}\n     */\n    _this.map_ = null;\n\n    /**\n     * @protected\n     * @type {!Array<import(\"../events.js\").EventsKey>}\n     */\n    _this.listenerKeys = [];\n    if (options.render) {\n      _this.render = options.render;\n    }\n    if (options.target) {\n      _this.setTarget(options.target);\n    }\n    return _this;\n  }\n\n  /**\n   * Clean up.\n   */\n  _createClass(Control, [{\n    key: \"disposeInternal\",\n    value: function disposeInternal() {\n      removeNode(this.element);\n      _get(_getPrototypeOf(Control.prototype), \"disposeInternal\", this).call(this);\n    }\n\n    /**\n     * Get the map associated with this control.\n     * @return {import(\"../Map.js\").default|null} Map.\n     * @api\n     */\n  }, {\n    key: \"getMap\",\n    value: function getMap() {\n      return this.map_;\n    }\n\n    /**\n     * Remove the control from its current map and attach it to the new map.\n     * Pass `null` to just remove the control from the current map.\n     * Subclasses may set up event handlers to get notified about changes to\n     * the map here.\n     * @param {import(\"../Map.js\").default|null} map Map.\n     * @api\n     */\n  }, {\n    key: \"setMap\",\n    value: function setMap(map) {\n      if (this.map_) {\n        removeNode(this.element);\n      }\n      for (var i = 0, ii = this.listenerKeys.length; i < ii; ++i) {\n        unlistenByKey(this.listenerKeys[i]);\n      }\n      this.listenerKeys.length = 0;\n      this.map_ = map;\n      if (map) {\n        var target = this.target_ ? this.target_ : map.getOverlayContainerStopEvent();\n        target.appendChild(this.element);\n        if (this.render !== VOID) {\n          this.listenerKeys.push(listen(map, MapEventType.POSTRENDER, this.render, this));\n        }\n        map.render();\n      }\n    }\n\n    /**\n     * Renders the control.\n     * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n     * @api\n     */\n  }, {\n    key: \"render\",\n    value: function render(mapEvent) {}\n\n    /**\n     * This function is used to set a target element for the control. It has no\n     * effect if it is called after the control has been added to the map (i.e.\n     * after `setMap` is called on the control). If no `target` is set in the\n     * options passed to the control constructor and if `setTarget` is not called\n     * then the control is added to the map's overlay container.\n     * @param {HTMLElement|string} target Target.\n     * @api\n     */\n  }, {\n    key: \"setTarget\",\n    value: function setTarget(target) {\n      this.target_ = typeof target === 'string' ? document.getElementById(target) : target;\n    }\n  }]);\n  return Control;\n}(BaseObject);\nexport default Control;","map":{"version":3,"names":["BaseObject","MapEventType","VOID","listen","unlistenByKey","removeNode","Control","_BaseObject","_inherits","_super","_createSuper","options","_this","_classCallCheck","call","element","target","style","pointerEvents","target_","map_","listenerKeys","render","setTarget","_createClass","key","value","disposeInternal","_get","_getPrototypeOf","prototype","getMap","setMap","map","i","ii","length","getOverlayContainerStopEvent","appendChild","push","POSTRENDER","mapEvent","document","getElementById"],"sources":["/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/ol/control/Control.js"],"sourcesContent":["/**\n * @module ol/control/Control\n */\nimport BaseObject from '../Object.js';\nimport MapEventType from '../MapEventType.js';\nimport {VOID} from '../functions.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {removeNode} from '../dom.js';\n\n/**\n * @typedef {Object} Options\n * @property {HTMLElement} [element] The element is the control's\n * container element. This only needs to be specified if you're developing\n * a custom control.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n * @property {HTMLElement|string} [target] Specify a target if you want\n * the control to be rendered outside of the map's viewport.\n */\n\n/**\n * @classdesc\n * A control is a visible widget with a DOM element in a fixed position on the\n * screen. They can involve user input (buttons), or be informational only;\n * the position is determined using CSS. By default these are placed in the\n * container with CSS class name `ol-overlaycontainer-stopevent`, but can use\n * any outside DOM element.\n *\n * This is the base class for controls. You can use it for simple custom\n * controls by creating the element with listeners, creating an instance:\n * ```js\n * const myControl = new Control({element: myElement});\n * ```\n * and then adding this to the map.\n *\n * The main advantage of having this as a control rather than a simple separate\n * DOM element is that preventing propagation is handled for you. Controls\n * will also be objects in a {@link module:ol/Collection~Collection}, so you can use their methods.\n *\n * You can also extend this base for your own control class. See\n * examples/custom-controls for an example of how to do this.\n *\n * @api\n */\nclass Control extends BaseObject {\n  /**\n   * @param {Options} options Control options.\n   */\n  constructor(options) {\n    super();\n\n    const element = options.element;\n    if (element && !options.target && !element.style.pointerEvents) {\n      element.style.pointerEvents = 'auto';\n    }\n\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    this.element = element ? element : null;\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.target_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../Map.js\").default|null}\n     */\n    this.map_ = null;\n\n    /**\n     * @protected\n     * @type {!Array<import(\"../events.js\").EventsKey>}\n     */\n    this.listenerKeys = [];\n\n    if (options.render) {\n      this.render = options.render;\n    }\n\n    if (options.target) {\n      this.setTarget(options.target);\n    }\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    removeNode(this.element);\n    super.disposeInternal();\n  }\n\n  /**\n   * Get the map associated with this control.\n   * @return {import(\"../Map.js\").default|null} Map.\n   * @api\n   */\n  getMap() {\n    return this.map_;\n  }\n\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   */\n  setMap(map) {\n    if (this.map_) {\n      removeNode(this.element);\n    }\n    for (let i = 0, ii = this.listenerKeys.length; i < ii; ++i) {\n      unlistenByKey(this.listenerKeys[i]);\n    }\n    this.listenerKeys.length = 0;\n    this.map_ = map;\n    if (map) {\n      const target = this.target_\n        ? this.target_\n        : map.getOverlayContainerStopEvent();\n      target.appendChild(this.element);\n      if (this.render !== VOID) {\n        this.listenerKeys.push(\n          listen(map, MapEventType.POSTRENDER, this.render, this)\n        );\n      }\n      map.render();\n    }\n  }\n\n  /**\n   * Renders the control.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @api\n   */\n  render(mapEvent) {}\n\n  /**\n   * This function is used to set a target element for the control. It has no\n   * effect if it is called after the control has been added to the map (i.e.\n   * after `setMap` is called on the control). If no `target` is set in the\n   * options passed to the control constructor and if `setTarget` is not called\n   * then the control is added to the map's overlay container.\n   * @param {HTMLElement|string} target Target.\n   * @api\n   */\n  setTarget(target) {\n    this.target_ =\n      typeof target === 'string' ? document.getElementById(target) : target;\n  }\n}\n\nexport default Control;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}