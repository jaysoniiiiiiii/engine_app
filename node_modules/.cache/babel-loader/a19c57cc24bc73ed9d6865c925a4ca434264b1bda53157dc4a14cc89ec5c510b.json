{"ast":null,"code":"import _classCallCheck from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * @module ol/geom/LineString\n */\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { assignClosestPoint, maxSquaredDelta } from './flat/closest.js';\nimport { closestSquaredDistanceXY } from '../extent.js';\nimport { deflateCoordinates } from './flat/deflate.js';\nimport { douglasPeucker } from './flat/simplify.js';\nimport { extend } from '../array.js';\nimport { forEach as _forEachSegment } from './flat/segments.js';\nimport { inflateCoordinates } from './flat/inflate.js';\nimport { interpolatePoint, lineStringCoordinateAtM } from './flat/interpolate.js';\nimport { intersectsLineString } from './flat/intersectsextent.js';\nimport { lineStringLength } from './flat/length.js';\n\n/**\n * @classdesc\n * Linestring geometry.\n *\n * @api\n */\nvar LineString = /*#__PURE__*/function (_SimpleGeometry) {\n  _inherits(LineString, _SimpleGeometry);\n  var _super = _createSuper(LineString);\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  function LineString(coordinates, layout) {\n    var _this;\n    _classCallCheck(this, LineString);\n    _this = _super.call(this);\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    _this.flatMidpoint_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.flatMidpointRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.maxDeltaRevision_ = -1;\n    if (layout !== undefined && !Array.isArray(coordinates[0])) {\n      _this.setFlatCoordinates(layout, /** @type {Array<number>} */coordinates);\n    } else {\n      _this.setCoordinates( /** @type {Array<import(\"../coordinate.js\").Coordinate>} */\n      coordinates, layout);\n    }\n    return _this;\n  }\n\n  /**\n   * Append the passed coordinate to the coordinates of the linestring.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @api\n   */\n  _createClass(LineString, [{\n    key: \"appendCoordinate\",\n    value: function appendCoordinate(coordinate) {\n      if (!this.flatCoordinates) {\n        this.flatCoordinates = coordinate.slice();\n      } else {\n        extend(this.flatCoordinates, coordinate);\n      }\n      this.changed();\n    }\n\n    /**\n     * Make a complete copy of the geometry.\n     * @return {!LineString} Clone.\n     * @api\n     */\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var lineString = new LineString(this.flatCoordinates.slice(), this.layout);\n      lineString.applyProperties(this);\n      return lineString;\n    }\n\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n     * @param {number} minSquaredDistance Minimum squared distance.\n     * @return {number} Minimum squared distance.\n     */\n  }, {\n    key: \"closestPointXY\",\n    value: function closestPointXY(x, y, closestPoint, minSquaredDistance) {\n      if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n        return minSquaredDistance;\n      }\n      if (this.maxDeltaRevision_ != this.getRevision()) {\n        this.maxDelta_ = Math.sqrt(maxSquaredDelta(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));\n        this.maxDeltaRevision_ = this.getRevision();\n      }\n      return assignClosestPoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);\n    }\n\n    /**\n     * Iterate over each segment, calling the provided callback.\n     * If the callback returns a truthy value the function returns that\n     * value immediately. Otherwise the function returns `false`.\n     *\n     * @param {function(this: S, import(\"../coordinate.js\").Coordinate, import(\"../coordinate.js\").Coordinate): T} callback Function\n     *     called for each segment. The function will receive two arguments, the start and end coordinates of the segment.\n     * @return {T|boolean} Value.\n     * @template T,S\n     * @api\n     */\n  }, {\n    key: \"forEachSegment\",\n    value: function forEachSegment(callback) {\n      return _forEachSegment(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, callback);\n    }\n\n    /**\n     * Returns the coordinate at `m` using linear interpolation, or `null` if no\n     * such coordinate exists.\n     *\n     * `extrapolate` controls extrapolation beyond the range of Ms in the\n     * MultiLineString. If `extrapolate` is `true` then Ms less than the first\n     * M will return the first coordinate and Ms greater than the last M will\n     * return the last coordinate.\n     *\n     * @param {number} m M.\n     * @param {boolean} [extrapolate] Extrapolate. Default is `false`.\n     * @return {import(\"../coordinate.js\").Coordinate|null} Coordinate.\n     * @api\n     */\n  }, {\n    key: \"getCoordinateAtM\",\n    value: function getCoordinateAtM(m, extrapolate) {\n      if (this.layout != 'XYM' && this.layout != 'XYZM') {\n        return null;\n      }\n      extrapolate = extrapolate !== undefined ? extrapolate : false;\n      return lineStringCoordinateAtM(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, m, extrapolate);\n    }\n\n    /**\n     * Return the coordinates of the linestring.\n     * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n     * @api\n     */\n  }, {\n    key: \"getCoordinates\",\n    value: function getCoordinates() {\n      return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n    }\n\n    /**\n     * Return the coordinate at the provided fraction along the linestring.\n     * The `fraction` is a number between 0 and 1, where 0 is the start of the\n     * linestring and 1 is the end.\n     * @param {number} fraction Fraction.\n     * @param {import(\"../coordinate.js\").Coordinate} [dest] Optional coordinate whose values will\n     *     be modified. If not provided, a new coordinate will be returned.\n     * @return {import(\"../coordinate.js\").Coordinate} Coordinate of the interpolated point.\n     * @api\n     */\n  }, {\n    key: \"getCoordinateAt\",\n    value: function getCoordinateAt(fraction, dest) {\n      return interpolatePoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, fraction, dest, this.stride);\n    }\n\n    /**\n     * Return the length of the linestring on projected plane.\n     * @return {number} Length (on projected plane).\n     * @api\n     */\n  }, {\n    key: \"getLength\",\n    value: function getLength() {\n      return lineStringLength(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n    }\n\n    /**\n     * @return {Array<number>} Flat midpoint.\n     */\n  }, {\n    key: \"getFlatMidpoint\",\n    value: function getFlatMidpoint() {\n      if (this.flatMidpointRevision_ != this.getRevision()) {\n        this.flatMidpoint_ = this.getCoordinateAt(0.5, this.flatMidpoint_);\n        this.flatMidpointRevision_ = this.getRevision();\n      }\n      return this.flatMidpoint_;\n    }\n\n    /**\n     * @param {number} squaredTolerance Squared tolerance.\n     * @return {LineString} Simplified LineString.\n     * @protected\n     */\n  }, {\n    key: \"getSimplifiedGeometryInternal\",\n    value: function getSimplifiedGeometryInternal(squaredTolerance) {\n      var simplifiedFlatCoordinates = [];\n      simplifiedFlatCoordinates.length = douglasPeucker(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);\n      return new LineString(simplifiedFlatCoordinates, 'XY');\n    }\n\n    /**\n     * Get the type of this geometry.\n     * @return {import(\"./Geometry.js\").Type} Geometry type.\n     * @api\n     */\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return 'LineString';\n    }\n\n    /**\n     * Test if the geometry and the passed extent intersect.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @return {boolean} `true` if the geometry and the extent intersect.\n     * @api\n     */\n  }, {\n    key: \"intersectsExtent\",\n    value: function intersectsExtent(extent) {\n      return intersectsLineString(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);\n    }\n\n    /**\n     * Set the coordinates of the linestring.\n     * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n     * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n     * @api\n     */\n  }, {\n    key: \"setCoordinates\",\n    value: function setCoordinates(coordinates, layout) {\n      this.setLayout(layout, coordinates, 1);\n      if (!this.flatCoordinates) {\n        this.flatCoordinates = [];\n      }\n      this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);\n      this.changed();\n    }\n  }]);\n  return LineString;\n}(SimpleGeometry);\nexport default LineString;","map":{"version":3,"names":["SimpleGeometry","assignClosestPoint","maxSquaredDelta","closestSquaredDistanceXY","deflateCoordinates","douglasPeucker","extend","forEach","forEachSegment","inflateCoordinates","interpolatePoint","lineStringCoordinateAtM","intersectsLineString","lineStringLength","LineString","_SimpleGeometry","_inherits","_super","_createSuper","coordinates","layout","_this","_classCallCheck","call","flatMidpoint_","flatMidpointRevision_","maxDelta_","maxDeltaRevision_","undefined","Array","isArray","setFlatCoordinates","setCoordinates","_createClass","key","value","appendCoordinate","coordinate","flatCoordinates","slice","changed","clone","lineString","applyProperties","closestPointXY","x","y","closestPoint","minSquaredDistance","getExtent","getRevision","Math","sqrt","length","stride","callback","getCoordinateAtM","m","extrapolate","getCoordinates","getCoordinateAt","fraction","dest","getLength","getFlatMidpoint","getSimplifiedGeometryInternal","squaredTolerance","simplifiedFlatCoordinates","getType","intersectsExtent","extent","setLayout"],"sources":["/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/ol/geom/LineString.js"],"sourcesContent":["/**\n * @module ol/geom/LineString\n */\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {assignClosestPoint, maxSquaredDelta} from './flat/closest.js';\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport {deflateCoordinates} from './flat/deflate.js';\nimport {douglasPeucker} from './flat/simplify.js';\nimport {extend} from '../array.js';\nimport {forEach as forEachSegment} from './flat/segments.js';\nimport {inflateCoordinates} from './flat/inflate.js';\nimport {interpolatePoint, lineStringCoordinateAtM} from './flat/interpolate.js';\nimport {intersectsLineString} from './flat/intersectsextent.js';\nimport {lineStringLength} from './flat/length.js';\n\n/**\n * @classdesc\n * Linestring geometry.\n *\n * @api\n */\nclass LineString extends SimpleGeometry {\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(coordinates, layout) {\n    super();\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.flatMidpoint_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.flatMidpointRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    if (layout !== undefined && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(\n        layout,\n        /** @type {Array<number>} */ (coordinates)\n      );\n    } else {\n      this.setCoordinates(\n        /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (\n          coordinates\n        ),\n        layout\n      );\n    }\n  }\n\n  /**\n   * Append the passed coordinate to the coordinates of the linestring.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @api\n   */\n  appendCoordinate(coordinate) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = coordinate.slice();\n    } else {\n      extend(this.flatCoordinates, coordinate);\n    }\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!LineString} Clone.\n   * @api\n   */\n  clone() {\n    const lineString = new LineString(\n      this.flatCoordinates.slice(),\n      this.layout\n    );\n    lineString.applyProperties(this);\n    return lineString;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(\n        maxSquaredDelta(\n          this.flatCoordinates,\n          0,\n          this.flatCoordinates.length,\n          this.stride,\n          0\n        )\n      );\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestPoint(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      this.maxDelta_,\n      false,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance\n    );\n  }\n\n  /**\n   * Iterate over each segment, calling the provided callback.\n   * If the callback returns a truthy value the function returns that\n   * value immediately. Otherwise the function returns `false`.\n   *\n   * @param {function(this: S, import(\"../coordinate.js\").Coordinate, import(\"../coordinate.js\").Coordinate): T} callback Function\n   *     called for each segment. The function will receive two arguments, the start and end coordinates of the segment.\n   * @return {T|boolean} Value.\n   * @template T,S\n   * @api\n   */\n  forEachSegment(callback) {\n    return forEachSegment(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      callback\n    );\n  }\n\n  /**\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\n   * such coordinate exists.\n   *\n   * `extrapolate` controls extrapolation beyond the range of Ms in the\n   * MultiLineString. If `extrapolate` is `true` then Ms less than the first\n   * M will return the first coordinate and Ms greater than the last M will\n   * return the last coordinate.\n   *\n   * @param {number} m M.\n   * @param {boolean} [extrapolate] Extrapolate. Default is `false`.\n   * @return {import(\"../coordinate.js\").Coordinate|null} Coordinate.\n   * @api\n   */\n  getCoordinateAtM(m, extrapolate) {\n    if (this.layout != 'XYM' && this.layout != 'XYZM') {\n      return null;\n    }\n    extrapolate = extrapolate !== undefined ? extrapolate : false;\n    return lineStringCoordinateAtM(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      m,\n      extrapolate\n    );\n  }\n\n  /**\n   * Return the coordinates of the linestring.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return inflateCoordinates(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride\n    );\n  }\n\n  /**\n   * Return the coordinate at the provided fraction along the linestring.\n   * The `fraction` is a number between 0 and 1, where 0 is the start of the\n   * linestring and 1 is the end.\n   * @param {number} fraction Fraction.\n   * @param {import(\"../coordinate.js\").Coordinate} [dest] Optional coordinate whose values will\n   *     be modified. If not provided, a new coordinate will be returned.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinate of the interpolated point.\n   * @api\n   */\n  getCoordinateAt(fraction, dest) {\n    return interpolatePoint(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      fraction,\n      dest,\n      this.stride\n    );\n  }\n\n  /**\n   * Return the length of the linestring on projected plane.\n   * @return {number} Length (on projected plane).\n   * @api\n   */\n  getLength() {\n    return lineStringLength(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride\n    );\n  }\n\n  /**\n   * @return {Array<number>} Flat midpoint.\n   */\n  getFlatMidpoint() {\n    if (this.flatMidpointRevision_ != this.getRevision()) {\n      this.flatMidpoint_ = this.getCoordinateAt(0.5, this.flatMidpoint_);\n      this.flatMidpointRevision_ = this.getRevision();\n    }\n    return this.flatMidpoint_;\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {LineString} Simplified LineString.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    simplifiedFlatCoordinates.length = douglasPeucker(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      0\n    );\n    return new LineString(simplifiedFlatCoordinates, 'XY');\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'LineString';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return intersectsLineString(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      extent\n    );\n  }\n\n  /**\n   * Set the coordinates of the linestring.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride\n    );\n    this.changed();\n  }\n}\n\nexport default LineString;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}