{"ast":null,"code":"import _slicedToArray from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @module ol/tilecoord\n */\n\n/**\n * An array of three numbers representing the location of a tile in a tile\n * grid. The order is `z` (zoom level), `x` (column), and `y` (row).\n * @typedef {Array<number>} TileCoord\n * @api\n */\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {TileCoord} [tileCoord] Tile coordinate.\n * @return {TileCoord} Tile coordinate.\n */\nexport function createOrUpdate(z, x, y, tileCoord) {\n  if (tileCoord !== undefined) {\n    tileCoord[0] = z;\n    tileCoord[1] = x;\n    tileCoord[2] = y;\n    return tileCoord;\n  }\n  return [z, x, y];\n}\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {string} Key.\n */\nexport function getKeyZXY(z, x, y) {\n  return z + '/' + x + '/' + y;\n}\n\n/**\n * Get the key for a tile coord.\n * @param {TileCoord} tileCoord The tile coord.\n * @return {string} Key.\n */\nexport function getKey(tileCoord) {\n  return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\n\n/**\n * Get the tile cache key for a tile key obtained through `tile.getKey()`.\n * @param {string} tileKey The tile key.\n * @return {string} The cache key.\n */\nexport function getCacheKeyForTileKey(tileKey) {\n  var _tileKey$substring$sp = tileKey.substring(tileKey.lastIndexOf('/') + 1, tileKey.length).split(',').map(Number),\n    _tileKey$substring$sp2 = _slicedToArray(_tileKey$substring$sp, 3),\n    z = _tileKey$substring$sp2[0],\n    x = _tileKey$substring$sp2[1],\n    y = _tileKey$substring$sp2[2];\n  return getKeyZXY(z, x, y);\n}\n\n/**\n * Get a tile coord given a key.\n * @param {string} key The tile coord key.\n * @return {TileCoord} The tile coord.\n */\nexport function fromKey(key) {\n  return key.split('/').map(Number);\n}\n\n/**\n * @param {TileCoord} tileCoord Tile coord.\n * @return {number} Hash.\n */\nexport function hash(tileCoord) {\n  return (tileCoord[1] << tileCoord[0]) + tileCoord[2];\n}\n\n/**\n * @param {TileCoord} tileCoord Tile coordinate.\n * @param {!import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {boolean} Tile coordinate is within extent and zoom level range.\n */\nexport function withinExtentAndZ(tileCoord, tileGrid) {\n  var z = tileCoord[0];\n  var x = tileCoord[1];\n  var y = tileCoord[2];\n  if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {\n    return false;\n  }\n  var tileRange = tileGrid.getFullTileRange(z);\n  if (!tileRange) {\n    return true;\n  }\n  return tileRange.containsXY(x, y);\n}","map":{"version":3,"names":["createOrUpdate","z","x","y","tileCoord","undefined","getKeyZXY","getKey","getCacheKeyForTileKey","tileKey","_tileKey$substring$sp","substring","lastIndexOf","length","split","map","Number","_tileKey$substring$sp2","_slicedToArray","fromKey","key","hash","withinExtentAndZ","tileGrid","getMinZoom","getMaxZoom","tileRange","getFullTileRange","containsXY"],"sources":["/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/ol/tilecoord.js"],"sourcesContent":["/**\n * @module ol/tilecoord\n */\n\n/**\n * An array of three numbers representing the location of a tile in a tile\n * grid. The order is `z` (zoom level), `x` (column), and `y` (row).\n * @typedef {Array<number>} TileCoord\n * @api\n */\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {TileCoord} [tileCoord] Tile coordinate.\n * @return {TileCoord} Tile coordinate.\n */\nexport function createOrUpdate(z, x, y, tileCoord) {\n  if (tileCoord !== undefined) {\n    tileCoord[0] = z;\n    tileCoord[1] = x;\n    tileCoord[2] = y;\n    return tileCoord;\n  }\n  return [z, x, y];\n}\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {string} Key.\n */\nexport function getKeyZXY(z, x, y) {\n  return z + '/' + x + '/' + y;\n}\n\n/**\n * Get the key for a tile coord.\n * @param {TileCoord} tileCoord The tile coord.\n * @return {string} Key.\n */\nexport function getKey(tileCoord) {\n  return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\n\n/**\n * Get the tile cache key for a tile key obtained through `tile.getKey()`.\n * @param {string} tileKey The tile key.\n * @return {string} The cache key.\n */\nexport function getCacheKeyForTileKey(tileKey) {\n  const [z, x, y] = tileKey\n    .substring(tileKey.lastIndexOf('/') + 1, tileKey.length)\n    .split(',')\n    .map(Number);\n  return getKeyZXY(z, x, y);\n}\n\n/**\n * Get a tile coord given a key.\n * @param {string} key The tile coord key.\n * @return {TileCoord} The tile coord.\n */\nexport function fromKey(key) {\n  return key.split('/').map(Number);\n}\n\n/**\n * @param {TileCoord} tileCoord Tile coord.\n * @return {number} Hash.\n */\nexport function hash(tileCoord) {\n  return (tileCoord[1] << tileCoord[0]) + tileCoord[2];\n}\n\n/**\n * @param {TileCoord} tileCoord Tile coordinate.\n * @param {!import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {boolean} Tile coordinate is within extent and zoom level range.\n */\nexport function withinExtentAndZ(tileCoord, tileGrid) {\n  const z = tileCoord[0];\n  const x = tileCoord[1];\n  const y = tileCoord[2];\n\n  if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {\n    return false;\n  }\n  const tileRange = tileGrid.getFullTileRange(z);\n  if (!tileRange) {\n    return true;\n  }\n  return tileRange.containsXY(x, y);\n}\n"],"mappings":";AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,cAAcA,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,SAAS,EAAE;EACjD,IAAIA,SAAS,KAAKC,SAAS,EAAE;IAC3BD,SAAS,CAAC,CAAC,CAAC,GAAGH,CAAC;IAChBG,SAAS,CAAC,CAAC,CAAC,GAAGF,CAAC;IAChBE,SAAS,CAAC,CAAC,CAAC,GAAGD,CAAC;IAChB,OAAOC,SAAS;EAClB;EACA,OAAO,CAACH,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,SAASA,CAACL,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;EACjC,OAAOF,CAAC,GAAG,GAAG,GAAGC,CAAC,GAAG,GAAG,GAAGC,CAAC;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,MAAMA,CAACH,SAAS,EAAE;EAChC,OAAOE,SAAS,CAACF,SAAS,CAAC,CAAC,CAAC,EAAEA,SAAS,CAAC,CAAC,CAAC,EAAEA,SAAS,CAAC,CAAC,CAAC,CAAC;AAC5D;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,qBAAqBA,CAACC,OAAO,EAAE;EAC7C,IAAAC,qBAAA,GAAkBD,OAAO,CACtBE,SAAS,CAACF,OAAO,CAACG,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,EAAEH,OAAO,CAACI,MAAM,CAAC,CACvDC,KAAK,CAAC,GAAG,CAAC,CACVC,GAAG,CAACC,MAAM,CAAC;IAAAC,sBAAA,GAAAC,cAAA,CAAAR,qBAAA;IAHPT,CAAC,GAAAgB,sBAAA;IAAEf,CAAC,GAAAe,sBAAA;IAAEd,CAAC,GAAAc,sBAAA;EAId,OAAOX,SAAS,CAACL,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASgB,OAAOA,CAACC,GAAG,EAAE;EAC3B,OAAOA,GAAG,CAACN,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;AACnC;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASK,IAAIA,CAACjB,SAAS,EAAE;EAC9B,OAAO,CAACA,SAAS,CAAC,CAAC,CAAC,IAAIA,SAAS,CAAC,CAAC,CAAC,IAAIA,SAAS,CAAC,CAAC,CAAC;AACtD;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASkB,gBAAgBA,CAAClB,SAAS,EAAEmB,QAAQ,EAAE;EACpD,IAAMtB,CAAC,GAAGG,SAAS,CAAC,CAAC,CAAC;EACtB,IAAMF,CAAC,GAAGE,SAAS,CAAC,CAAC,CAAC;EACtB,IAAMD,CAAC,GAAGC,SAAS,CAAC,CAAC,CAAC;EAEtB,IAAImB,QAAQ,CAACC,UAAU,EAAE,GAAGvB,CAAC,IAAIA,CAAC,GAAGsB,QAAQ,CAACE,UAAU,EAAE,EAAE;IAC1D,OAAO,KAAK;EACd;EACA,IAAMC,SAAS,GAAGH,QAAQ,CAACI,gBAAgB,CAAC1B,CAAC,CAAC;EAC9C,IAAI,CAACyB,SAAS,EAAE;IACd,OAAO,IAAI;EACb;EACA,OAAOA,SAAS,CAACE,UAAU,CAAC1B,CAAC,EAAEC,CAAC,CAAC;AACnC"},"metadata":{},"sourceType":"module","externalDependencies":[]}