{"ast":null,"code":"import _classCallCheck from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * @module ol/renderer/canvas/VectorLayer\n */\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\nimport CanvasLayerRenderer, { canvasPool } from './Layer.js';\nimport ExecutorGroup from '../../render/canvas/ExecutorGroup.js';\nimport ViewHint from '../../ViewHint.js';\nimport { HIT_DETECT_RESOLUTION, createHitDetectionImageData, hitDetect } from '../../render/canvas/hitdetect.js';\nimport { apply, makeInverse, makeScale, toString as transformToString } from '../../transform.js';\nimport { buffer, containsExtent, createEmpty, getWidth, intersects as intersectsExtent, wrapX as wrapExtentX } from '../../extent.js';\nimport { createCanvasContext2D, releaseCanvas } from '../../dom.js';\nimport { defaultOrder as defaultRenderOrder, getTolerance as getRenderTolerance, getSquaredTolerance as getSquaredRenderTolerance, renderFeature as _renderFeature } from '../vector.js';\nimport { equals } from '../../array.js';\nimport { fromUserExtent, getTransformFromProjections, getUserProjection, toUserExtent, toUserResolution } from '../../proj.js';\nimport { getUid } from '../../util.js';\nimport { wrapX as wrapCoordinateX } from '../../coordinate.js';\n\n/**\n * @classdesc\n * Canvas renderer for vector layers.\n * @api\n */\nvar CanvasVectorLayerRenderer = /*#__PURE__*/function (_CanvasLayerRenderer) {\n  _inherits(CanvasVectorLayerRenderer, _CanvasLayerRenderer);\n  var _super = _createSuper(CanvasVectorLayerRenderer);\n  /**\n   * @param {import(\"../../layer/BaseVector.js\").default} vectorLayer Vector layer.\n   */\n  function CanvasVectorLayerRenderer(vectorLayer) {\n    var _this;\n    _classCallCheck(this, CanvasVectorLayerRenderer);\n    _this = _super.call(this, vectorLayer);\n\n    /** @private */\n    _this.boundHandleStyleImageChange_ = _this.handleStyleImageChange_.bind(_assertThisInitialized(_this));\n\n    /**\n     * @type {boolean}\n     */\n    _this.animatingOrInteracting_;\n\n    /**\n     * @type {ImageData|null}\n     */\n    _this.hitDetectionImageData_ = null;\n\n    /**\n     * @type {Array<import(\"../../Feature.js\").default>}\n     */\n    _this.renderedFeatures_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.renderedRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.renderedResolution_ = NaN;\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    _this.renderedExtent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    _this.wrappedRenderedExtent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.renderedRotation_;\n\n    /**\n     * @private\n     * @type {import(\"../../coordinate\").Coordinate}\n     */\n    _this.renderedCenter_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../proj/Projection\").default}\n     */\n    _this.renderedProjection_ = null;\n\n    /**\n     * @private\n     * @type {function(import(\"../../Feature.js\").default, import(\"../../Feature.js\").default): number|null}\n     */\n    _this.renderedRenderOrder_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n     */\n    _this.replayGroup_ = null;\n\n    /**\n     * A new replay group had to be created by `prepareFrame()`\n     * @type {boolean}\n     */\n    _this.replayGroupChanged = true;\n\n    /**\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n     */\n    _this.declutterExecutorGroup = null;\n\n    /**\n     * Clipping to be performed by `renderFrame()`\n     * @type {boolean}\n     */\n    _this.clipping = true;\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    _this.compositionContext_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.opacity_ = 1;\n    return _this;\n  }\n\n  /**\n   * @param {ExecutorGroup} executorGroup Executor group.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"rbush\").default} [declutterTree] Declutter tree.\n   */\n  _createClass(CanvasVectorLayerRenderer, [{\n    key: \"renderWorlds\",\n    value: function renderWorlds(executorGroup, frameState, declutterTree) {\n      var extent = frameState.extent;\n      var viewState = frameState.viewState;\n      var center = viewState.center;\n      var resolution = viewState.resolution;\n      var projection = viewState.projection;\n      var rotation = viewState.rotation;\n      var projectionExtent = projection.getExtent();\n      var vectorSource = this.getLayer().getSource();\n      var pixelRatio = frameState.pixelRatio;\n      var viewHints = frameState.viewHints;\n      var snapToPixel = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);\n      var context = this.compositionContext_;\n      var width = Math.round(frameState.size[0] * pixelRatio);\n      var height = Math.round(frameState.size[1] * pixelRatio);\n      var multiWorld = vectorSource.getWrapX() && projection.canWrapX();\n      var worldWidth = multiWorld ? getWidth(projectionExtent) : null;\n      var endWorld = multiWorld ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1 : 1;\n      var world = multiWorld ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth) : 0;\n      do {\n        var transform = this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, world * worldWidth);\n        executorGroup.execute(context, 1, transform, rotation, snapToPixel, undefined, declutterTree);\n      } while (++world < endWorld);\n    }\n  }, {\n    key: \"setupCompositionContext_\",\n    value: function setupCompositionContext_() {\n      if (this.opacity_ !== 1) {\n        var compositionContext = createCanvasContext2D(this.context.canvas.width, this.context.canvas.height, canvasPool);\n        this.compositionContext_ = compositionContext;\n      } else {\n        this.compositionContext_ = this.context;\n      }\n    }\n  }, {\n    key: \"releaseCompositionContext_\",\n    value: function releaseCompositionContext_() {\n      if (this.opacity_ !== 1) {\n        var alpha = this.context.globalAlpha;\n        this.context.globalAlpha = this.opacity_;\n        this.context.drawImage(this.compositionContext_.canvas, 0, 0);\n        this.context.globalAlpha = alpha;\n        releaseCanvas(this.compositionContext_);\n        canvasPool.push(this.compositionContext_.canvas);\n        this.compositionContext_ = null;\n      }\n    }\n\n    /**\n     * Render declutter items for this layer\n     * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n     */\n  }, {\n    key: \"renderDeclutter\",\n    value: function renderDeclutter(frameState) {\n      if (this.declutterExecutorGroup) {\n        this.setupCompositionContext_();\n        this.renderWorlds(this.declutterExecutorGroup, frameState, frameState.declutterTree);\n        this.releaseCompositionContext_();\n      }\n    }\n\n    /**\n     * Render the layer.\n     * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n     * @param {HTMLElement} target Target that may be used to render content to.\n     * @return {HTMLElement} The rendered element.\n     */\n  }, {\n    key: \"renderFrame\",\n    value: function renderFrame(frameState, target) {\n      var pixelRatio = frameState.pixelRatio;\n      var layerState = frameState.layerStatesArray[frameState.layerIndex];\n\n      // set forward and inverse pixel transforms\n      makeScale(this.pixelTransform, 1 / pixelRatio, 1 / pixelRatio);\n      makeInverse(this.inversePixelTransform, this.pixelTransform);\n      var canvasTransform = transformToString(this.pixelTransform);\n      this.useContainer(target, canvasTransform, this.getBackground(frameState));\n      var context = this.context;\n      var canvas = context.canvas;\n      var replayGroup = this.replayGroup_;\n      var declutterExecutorGroup = this.declutterExecutorGroup;\n      if ((!replayGroup || replayGroup.isEmpty()) && (!declutterExecutorGroup || declutterExecutorGroup.isEmpty())) {\n        return null;\n      }\n\n      // resize and clear\n      var width = Math.round(frameState.size[0] * pixelRatio);\n      var height = Math.round(frameState.size[1] * pixelRatio);\n      if (canvas.width != width || canvas.height != height) {\n        canvas.width = width;\n        canvas.height = height;\n        if (canvas.style.transform !== canvasTransform) {\n          canvas.style.transform = canvasTransform;\n        }\n      } else if (!this.containerReused) {\n        context.clearRect(0, 0, width, height);\n      }\n      this.preRender(context, frameState);\n      var viewState = frameState.viewState;\n      var projection = viewState.projection;\n      this.opacity_ = layerState.opacity;\n      this.setupCompositionContext_();\n\n      // clipped rendering if layer extent is set\n      var clipped = false;\n      var render = true;\n      if (layerState.extent && this.clipping) {\n        var layerExtent = fromUserExtent(layerState.extent, projection);\n        render = intersectsExtent(layerExtent, frameState.extent);\n        clipped = render && !containsExtent(layerExtent, frameState.extent);\n        if (clipped) {\n          this.clipUnrotated(this.compositionContext_, frameState, layerExtent);\n        }\n      }\n      if (render) {\n        this.renderWorlds(replayGroup, frameState);\n      }\n      if (clipped) {\n        this.compositionContext_.restore();\n      }\n      this.releaseCompositionContext_();\n      this.postRender(context, frameState);\n      if (this.renderedRotation_ !== viewState.rotation) {\n        this.renderedRotation_ = viewState.rotation;\n        this.hitDetectionImageData_ = null;\n      }\n      return this.container;\n    }\n\n    /**\n     * Asynchronous layer level hit detection.\n     * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n     * @return {Promise<Array<import(\"../../Feature\").default>>} Promise\n     * that resolves with an array of features.\n     */\n  }, {\n    key: \"getFeatures\",\n    value: function getFeatures(pixel) {\n      var _this2 = this;\n      return new Promise(function (resolve) {\n        if (!_this2.hitDetectionImageData_ && !_this2.animatingOrInteracting_) {\n          var size = [_this2.context.canvas.width, _this2.context.canvas.height];\n          apply(_this2.pixelTransform, size);\n          var center = _this2.renderedCenter_;\n          var resolution = _this2.renderedResolution_;\n          var rotation = _this2.renderedRotation_;\n          var projection = _this2.renderedProjection_;\n          var extent = _this2.wrappedRenderedExtent_;\n          var layer = _this2.getLayer();\n          var transforms = [];\n          var width = size[0] * HIT_DETECT_RESOLUTION;\n          var height = size[1] * HIT_DETECT_RESOLUTION;\n          transforms.push(_this2.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, 0).slice());\n          var source = layer.getSource();\n          var projectionExtent = projection.getExtent();\n          if (source.getWrapX() && projection.canWrapX() && !containsExtent(projectionExtent, extent)) {\n            var startX = extent[0];\n            var worldWidth = getWidth(projectionExtent);\n            var world = 0;\n            var offsetX;\n            while (startX < projectionExtent[0]) {\n              --world;\n              offsetX = worldWidth * world;\n              transforms.push(_this2.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, offsetX).slice());\n              startX += worldWidth;\n            }\n            world = 0;\n            startX = extent[2];\n            while (startX > projectionExtent[2]) {\n              ++world;\n              offsetX = worldWidth * world;\n              transforms.push(_this2.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, offsetX).slice());\n              startX -= worldWidth;\n            }\n          }\n          _this2.hitDetectionImageData_ = createHitDetectionImageData(size, transforms, _this2.renderedFeatures_, layer.getStyleFunction(), extent, resolution, rotation);\n        }\n        resolve(hitDetect(pixel, _this2.renderedFeatures_, _this2.hitDetectionImageData_));\n      });\n    }\n\n    /**\n     * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n     * @param {number} hitTolerance Hit tolerance in pixels.\n     * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n     * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n     * @return {T|undefined} Callback result.\n     * @template T\n     */\n  }, {\n    key: \"forEachFeatureAtCoordinate\",\n    value: function forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, matches) {\n      var _this3 = this;\n      if (!this.replayGroup_) {\n        return undefined;\n      }\n      var resolution = frameState.viewState.resolution;\n      var rotation = frameState.viewState.rotation;\n      var layer = this.getLayer();\n\n      /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */\n      var features = {};\n\n      /**\n       * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n       * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n       * @param {number} distanceSq The squared distance to the click position\n       * @return {T|undefined} Callback result.\n       */\n      var featureCallback = function featureCallback(feature, geometry, distanceSq) {\n        var key = getUid(feature);\n        var match = features[key];\n        if (!match) {\n          if (distanceSq === 0) {\n            features[key] = true;\n            return callback(feature, layer, geometry);\n          }\n          matches.push(features[key] = {\n            feature: feature,\n            layer: layer,\n            geometry: geometry,\n            distanceSq: distanceSq,\n            callback: callback\n          });\n        } else if (match !== true && distanceSq < match.distanceSq) {\n          if (distanceSq === 0) {\n            features[key] = true;\n            matches.splice(matches.lastIndexOf(match), 1);\n            return callback(feature, layer, geometry);\n          }\n          match.geometry = geometry;\n          match.distanceSq = distanceSq;\n        }\n        return undefined;\n      };\n      var result;\n      var executorGroups = [this.replayGroup_];\n      if (this.declutterExecutorGroup) {\n        executorGroups.push(this.declutterExecutorGroup);\n      }\n      executorGroups.some(function (executorGroup) {\n        return result = executorGroup.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, featureCallback, executorGroup === _this3.declutterExecutorGroup && frameState.declutterTree ? frameState.declutterTree.all().map(function (item) {\n          return item.value;\n        }) : null);\n      });\n      return result;\n    }\n\n    /**\n     * Perform action necessary to get the layer rendered after new fonts have loaded\n     */\n  }, {\n    key: \"handleFontsChanged\",\n    value: function handleFontsChanged() {\n      var layer = this.getLayer();\n      if (layer.getVisible() && this.replayGroup_) {\n        layer.changed();\n      }\n    }\n\n    /**\n     * Handle changes in image style state.\n     * @param {import(\"../../events/Event.js\").default} event Image style change event.\n     * @private\n     */\n  }, {\n    key: \"handleStyleImageChange_\",\n    value: function handleStyleImageChange_(event) {\n      this.renderIfReadyAndVisible();\n    }\n\n    /**\n     * Determine whether render should be called.\n     * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n     * @return {boolean} Layer is ready to be rendered.\n     */\n  }, {\n    key: \"prepareFrame\",\n    value: function prepareFrame(frameState) {\n      var _this4 = this;\n      var vectorLayer = this.getLayer();\n      var vectorSource = vectorLayer.getSource();\n      if (!vectorSource) {\n        return false;\n      }\n      var animating = frameState.viewHints[ViewHint.ANIMATING];\n      var interacting = frameState.viewHints[ViewHint.INTERACTING];\n      var updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();\n      var updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();\n      if (this.ready && !updateWhileAnimating && animating || !updateWhileInteracting && interacting) {\n        this.animatingOrInteracting_ = true;\n        return true;\n      }\n      this.animatingOrInteracting_ = false;\n      var frameStateExtent = frameState.extent;\n      var viewState = frameState.viewState;\n      var projection = viewState.projection;\n      var resolution = viewState.resolution;\n      var pixelRatio = frameState.pixelRatio;\n      var vectorLayerRevision = vectorLayer.getRevision();\n      var vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();\n      var vectorLayerRenderOrder = vectorLayer.getRenderOrder();\n      if (vectorLayerRenderOrder === undefined) {\n        vectorLayerRenderOrder = defaultRenderOrder;\n      }\n      var center = viewState.center.slice();\n      var extent = buffer(frameStateExtent, vectorLayerRenderBuffer * resolution);\n      var renderedExtent = extent.slice();\n      var loadExtents = [extent.slice()];\n      var projectionExtent = projection.getExtent();\n      if (vectorSource.getWrapX() && projection.canWrapX() && !containsExtent(projectionExtent, frameState.extent)) {\n        // For the replay group, we need an extent that intersects the real world\n        // (-180° to +180°). To support geometries in a coordinate range from -540°\n        // to +540°, we add at least 1 world width on each side of the projection\n        // extent. If the viewport is wider than the world, we need to add half of\n        // the viewport width to make sure we cover the whole viewport.\n        var worldWidth = getWidth(projectionExtent);\n        var gutter = Math.max(getWidth(extent) / 2, worldWidth);\n        extent[0] = projectionExtent[0] - gutter;\n        extent[2] = projectionExtent[2] + gutter;\n        wrapCoordinateX(center, projection);\n        var loadExtent = wrapExtentX(loadExtents[0], projection);\n        // If the extent crosses the date line, we load data for both edges of the worlds\n        if (loadExtent[0] < projectionExtent[0] && loadExtent[2] < projectionExtent[2]) {\n          loadExtents.push([loadExtent[0] + worldWidth, loadExtent[1], loadExtent[2] + worldWidth, loadExtent[3]]);\n        } else if (loadExtent[0] > projectionExtent[0] && loadExtent[2] > projectionExtent[2]) {\n          loadExtents.push([loadExtent[0] - worldWidth, loadExtent[1], loadExtent[2] - worldWidth, loadExtent[3]]);\n        }\n      }\n      if (this.ready && this.renderedResolution_ == resolution && this.renderedRevision_ == vectorLayerRevision && this.renderedRenderOrder_ == vectorLayerRenderOrder && containsExtent(this.wrappedRenderedExtent_, extent)) {\n        if (!equals(this.renderedExtent_, renderedExtent)) {\n          this.hitDetectionImageData_ = null;\n          this.renderedExtent_ = renderedExtent;\n        }\n        this.renderedCenter_ = center;\n        this.replayGroupChanged = false;\n        return true;\n      }\n      this.replayGroup_ = null;\n      var replayGroup = new CanvasBuilderGroup(getRenderTolerance(resolution, pixelRatio), extent, resolution, pixelRatio);\n      var declutterBuilderGroup;\n      if (this.getLayer().getDeclutter()) {\n        declutterBuilderGroup = new CanvasBuilderGroup(getRenderTolerance(resolution, pixelRatio), extent, resolution, pixelRatio);\n      }\n      var userProjection = getUserProjection();\n      var userTransform;\n      if (userProjection) {\n        for (var i = 0, ii = loadExtents.length; i < ii; ++i) {\n          var _extent = loadExtents[i];\n          var _userExtent = toUserExtent(_extent, projection);\n          vectorSource.loadFeatures(_userExtent, toUserResolution(resolution, projection), userProjection);\n        }\n        userTransform = getTransformFromProjections(userProjection, projection);\n      } else {\n        for (var _i = 0, _ii = loadExtents.length; _i < _ii; ++_i) {\n          vectorSource.loadFeatures(loadExtents[_i], resolution, projection);\n        }\n      }\n      var squaredTolerance = getSquaredRenderTolerance(resolution, pixelRatio);\n      var ready = true;\n      var render =\n      /**\n       * @param {import(\"../../Feature.js\").default} feature Feature.\n       */\n      function render(feature) {\n        var styles;\n        var styleFunction = feature.getStyleFunction() || vectorLayer.getStyleFunction();\n        if (styleFunction) {\n          styles = styleFunction(feature, resolution);\n        }\n        if (styles) {\n          var dirty = _this4.renderFeature(feature, squaredTolerance, styles, replayGroup, userTransform, declutterBuilderGroup);\n          ready = ready && !dirty;\n        }\n      };\n      var userExtent = toUserExtent(extent, projection);\n      /** @type {Array<import(\"../../Feature.js\").default>} */\n      var features = vectorSource.getFeaturesInExtent(userExtent);\n      if (vectorLayerRenderOrder) {\n        features.sort(vectorLayerRenderOrder);\n      }\n      for (var _i2 = 0, _ii2 = features.length; _i2 < _ii2; ++_i2) {\n        render(features[_i2]);\n      }\n      this.renderedFeatures_ = features;\n      this.ready = ready;\n      var replayGroupInstructions = replayGroup.finish();\n      var executorGroup = new ExecutorGroup(extent, resolution, pixelRatio, vectorSource.getOverlaps(), replayGroupInstructions, vectorLayer.getRenderBuffer());\n      if (declutterBuilderGroup) {\n        this.declutterExecutorGroup = new ExecutorGroup(extent, resolution, pixelRatio, vectorSource.getOverlaps(), declutterBuilderGroup.finish(), vectorLayer.getRenderBuffer());\n      }\n      this.renderedResolution_ = resolution;\n      this.renderedRevision_ = vectorLayerRevision;\n      this.renderedRenderOrder_ = vectorLayerRenderOrder;\n      this.renderedExtent_ = renderedExtent;\n      this.wrappedRenderedExtent_ = extent;\n      this.renderedCenter_ = center;\n      this.renderedProjection_ = projection;\n      this.replayGroup_ = executorGroup;\n      this.hitDetectionImageData_ = null;\n      this.replayGroupChanged = true;\n      return true;\n    }\n\n    /**\n     * @param {import(\"../../Feature.js\").default} feature Feature.\n     * @param {number} squaredTolerance Squared render tolerance.\n     * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\n     * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\n     * @param {import(\"../../proj.js\").TransformFunction} [transform] Transform from user to view projection.\n     * @param {import(\"../../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\n     * @return {boolean} `true` if an image is loading.\n     */\n  }, {\n    key: \"renderFeature\",\n    value: function renderFeature(feature, squaredTolerance, styles, builderGroup, transform, declutterBuilderGroup) {\n      if (!styles) {\n        return false;\n      }\n      var loading = false;\n      if (Array.isArray(styles)) {\n        for (var i = 0, ii = styles.length; i < ii; ++i) {\n          loading = _renderFeature(builderGroup, feature, styles[i], squaredTolerance, this.boundHandleStyleImageChange_, transform, declutterBuilderGroup) || loading;\n        }\n      } else {\n        loading = _renderFeature(builderGroup, feature, styles, squaredTolerance, this.boundHandleStyleImageChange_, transform, declutterBuilderGroup);\n      }\n      return loading;\n    }\n  }]);\n  return CanvasVectorLayerRenderer;\n}(CanvasLayerRenderer);\nexport default CanvasVectorLayerRenderer;","map":{"version":3,"names":["CanvasBuilderGroup","CanvasLayerRenderer","canvasPool","ExecutorGroup","ViewHint","HIT_DETECT_RESOLUTION","createHitDetectionImageData","hitDetect","apply","makeInverse","makeScale","toString","transformToString","buffer","containsExtent","createEmpty","getWidth","intersects","intersectsExtent","wrapX","wrapExtentX","createCanvasContext2D","releaseCanvas","defaultOrder","defaultRenderOrder","getTolerance","getRenderTolerance","getSquaredTolerance","getSquaredRenderTolerance","renderFeature","equals","fromUserExtent","getTransformFromProjections","getUserProjection","toUserExtent","toUserResolution","getUid","wrapCoordinateX","CanvasVectorLayerRenderer","_CanvasLayerRenderer","_inherits","_super","_createSuper","vectorLayer","_this","_classCallCheck","call","boundHandleStyleImageChange_","handleStyleImageChange_","bind","_assertThisInitialized","animatingOrInteracting_","hitDetectionImageData_","renderedFeatures_","renderedRevision_","renderedResolution_","NaN","renderedExtent_","wrappedRenderedExtent_","renderedRotation_","renderedCenter_","renderedProjection_","renderedRenderOrder_","replayGroup_","replayGroupChanged","declutterExecutorGroup","clipping","compositionContext_","opacity_","_createClass","key","value","renderWorlds","executorGroup","frameState","declutterTree","extent","viewState","center","resolution","projection","rotation","projectionExtent","getExtent","vectorSource","getLayer","getSource","pixelRatio","viewHints","snapToPixel","ANIMATING","INTERACTING","context","width","Math","round","size","height","multiWorld","getWrapX","canWrapX","worldWidth","endWorld","ceil","world","floor","transform","getRenderTransform","execute","undefined","setupCompositionContext_","compositionContext","canvas","releaseCompositionContext_","alpha","globalAlpha","drawImage","push","renderDeclutter","renderFrame","target","layerState","layerStatesArray","layerIndex","pixelTransform","inversePixelTransform","canvasTransform","useContainer","getBackground","replayGroup","isEmpty","style","containerReused","clearRect","preRender","opacity","clipped","render","layerExtent","clipUnrotated","restore","postRender","container","getFeatures","pixel","_this2","Promise","resolve","layer","transforms","slice","source","startX","offsetX","getStyleFunction","forEachFeatureAtCoordinate","coordinate","hitTolerance","callback","matches","_this3","features","featureCallback","feature","geometry","distanceSq","match","splice","lastIndexOf","result","executorGroups","some","all","map","item","handleFontsChanged","getVisible","changed","event","renderIfReadyAndVisible","prepareFrame","_this4","animating","interacting","updateWhileAnimating","getUpdateWhileAnimating","updateWhileInteracting","getUpdateWhileInteracting","ready","frameStateExtent","vectorLayerRevision","getRevision","vectorLayerRenderBuffer","getRenderBuffer","vectorLayerRenderOrder","getRenderOrder","renderedExtent","loadExtents","gutter","max","loadExtent","declutterBuilderGroup","getDeclutter","userProjection","userTransform","i","ii","length","userExtent","loadFeatures","squaredTolerance","styles","styleFunction","dirty","getFeaturesInExtent","sort","replayGroupInstructions","finish","getOverlaps","builderGroup","loading","Array","isArray"],"sources":["/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/ol/renderer/canvas/VectorLayer.js"],"sourcesContent":["/**\n * @module ol/renderer/canvas/VectorLayer\n */\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\nimport CanvasLayerRenderer, {canvasPool} from './Layer.js';\nimport ExecutorGroup from '../../render/canvas/ExecutorGroup.js';\nimport ViewHint from '../../ViewHint.js';\nimport {\n  HIT_DETECT_RESOLUTION,\n  createHitDetectionImageData,\n  hitDetect,\n} from '../../render/canvas/hitdetect.js';\nimport {\n  apply,\n  makeInverse,\n  makeScale,\n  toString as transformToString,\n} from '../../transform.js';\nimport {\n  buffer,\n  containsExtent,\n  createEmpty,\n  getWidth,\n  intersects as intersectsExtent,\n  wrapX as wrapExtentX,\n} from '../../extent.js';\nimport {createCanvasContext2D, releaseCanvas} from '../../dom.js';\nimport {\n  defaultOrder as defaultRenderOrder,\n  getTolerance as getRenderTolerance,\n  getSquaredTolerance as getSquaredRenderTolerance,\n  renderFeature,\n} from '../vector.js';\nimport {equals} from '../../array.js';\nimport {\n  fromUserExtent,\n  getTransformFromProjections,\n  getUserProjection,\n  toUserExtent,\n  toUserResolution,\n} from '../../proj.js';\nimport {getUid} from '../../util.js';\nimport {wrapX as wrapCoordinateX} from '../../coordinate.js';\n\n/**\n * @classdesc\n * Canvas renderer for vector layers.\n * @api\n */\nclass CanvasVectorLayerRenderer extends CanvasLayerRenderer {\n  /**\n   * @param {import(\"../../layer/BaseVector.js\").default} vectorLayer Vector layer.\n   */\n  constructor(vectorLayer) {\n    super(vectorLayer);\n\n    /** @private */\n    this.boundHandleStyleImageChange_ = this.handleStyleImageChange_.bind(this);\n\n    /**\n     * @type {boolean}\n     */\n    this.animatingOrInteracting_;\n\n    /**\n     * @type {ImageData|null}\n     */\n    this.hitDetectionImageData_ = null;\n\n    /**\n     * @type {Array<import(\"../../Feature.js\").default>}\n     */\n    this.renderedFeatures_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedResolution_ = NaN;\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.renderedExtent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.wrappedRenderedExtent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRotation_;\n\n    /**\n     * @private\n     * @type {import(\"../../coordinate\").Coordinate}\n     */\n    this.renderedCenter_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../proj/Projection\").default}\n     */\n    this.renderedProjection_ = null;\n\n    /**\n     * @private\n     * @type {function(import(\"../../Feature.js\").default, import(\"../../Feature.js\").default): number|null}\n     */\n    this.renderedRenderOrder_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n     */\n    this.replayGroup_ = null;\n\n    /**\n     * A new replay group had to be created by `prepareFrame()`\n     * @type {boolean}\n     */\n    this.replayGroupChanged = true;\n\n    /**\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n     */\n    this.declutterExecutorGroup = null;\n\n    /**\n     * Clipping to be performed by `renderFrame()`\n     * @type {boolean}\n     */\n    this.clipping = true;\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.compositionContext_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.opacity_ = 1;\n  }\n\n  /**\n   * @param {ExecutorGroup} executorGroup Executor group.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"rbush\").default} [declutterTree] Declutter tree.\n   */\n  renderWorlds(executorGroup, frameState, declutterTree) {\n    const extent = frameState.extent;\n    const viewState = frameState.viewState;\n    const center = viewState.center;\n    const resolution = viewState.resolution;\n    const projection = viewState.projection;\n    const rotation = viewState.rotation;\n    const projectionExtent = projection.getExtent();\n    const vectorSource = this.getLayer().getSource();\n    const pixelRatio = frameState.pixelRatio;\n    const viewHints = frameState.viewHints;\n    const snapToPixel = !(\n      viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]\n    );\n    const context = this.compositionContext_;\n    const width = Math.round(frameState.size[0] * pixelRatio);\n    const height = Math.round(frameState.size[1] * pixelRatio);\n\n    const multiWorld = vectorSource.getWrapX() && projection.canWrapX();\n    const worldWidth = multiWorld ? getWidth(projectionExtent) : null;\n    const endWorld = multiWorld\n      ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1\n      : 1;\n    let world = multiWorld\n      ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth)\n      : 0;\n    do {\n      const transform = this.getRenderTransform(\n        center,\n        resolution,\n        rotation,\n        pixelRatio,\n        width,\n        height,\n        world * worldWidth\n      );\n      executorGroup.execute(\n        context,\n        1,\n        transform,\n        rotation,\n        snapToPixel,\n        undefined,\n        declutterTree\n      );\n    } while (++world < endWorld);\n  }\n\n  setupCompositionContext_() {\n    if (this.opacity_ !== 1) {\n      const compositionContext = createCanvasContext2D(\n        this.context.canvas.width,\n        this.context.canvas.height,\n        canvasPool\n      );\n      this.compositionContext_ = compositionContext;\n    } else {\n      this.compositionContext_ = this.context;\n    }\n  }\n\n  releaseCompositionContext_() {\n    if (this.opacity_ !== 1) {\n      const alpha = this.context.globalAlpha;\n      this.context.globalAlpha = this.opacity_;\n      this.context.drawImage(this.compositionContext_.canvas, 0, 0);\n      this.context.globalAlpha = alpha;\n      releaseCanvas(this.compositionContext_);\n      canvasPool.push(this.compositionContext_.canvas);\n      this.compositionContext_ = null;\n    }\n  }\n\n  /**\n   * Render declutter items for this layer\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n  renderDeclutter(frameState) {\n    if (this.declutterExecutorGroup) {\n      this.setupCompositionContext_();\n      this.renderWorlds(\n        this.declutterExecutorGroup,\n        frameState,\n        frameState.declutterTree\n      );\n      this.releaseCompositionContext_();\n    }\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   */\n  renderFrame(frameState, target) {\n    const pixelRatio = frameState.pixelRatio;\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n\n    // set forward and inverse pixel transforms\n    makeScale(this.pixelTransform, 1 / pixelRatio, 1 / pixelRatio);\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\n\n    const canvasTransform = transformToString(this.pixelTransform);\n\n    this.useContainer(target, canvasTransform, this.getBackground(frameState));\n    const context = this.context;\n    const canvas = context.canvas;\n\n    const replayGroup = this.replayGroup_;\n    const declutterExecutorGroup = this.declutterExecutorGroup;\n    if (\n      (!replayGroup || replayGroup.isEmpty()) &&\n      (!declutterExecutorGroup || declutterExecutorGroup.isEmpty())\n    ) {\n      return null;\n    }\n\n    // resize and clear\n    const width = Math.round(frameState.size[0] * pixelRatio);\n    const height = Math.round(frameState.size[1] * pixelRatio);\n    if (canvas.width != width || canvas.height != height) {\n      canvas.width = width;\n      canvas.height = height;\n      if (canvas.style.transform !== canvasTransform) {\n        canvas.style.transform = canvasTransform;\n      }\n    } else if (!this.containerReused) {\n      context.clearRect(0, 0, width, height);\n    }\n\n    this.preRender(context, frameState);\n\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n\n    this.opacity_ = layerState.opacity;\n    this.setupCompositionContext_();\n\n    // clipped rendering if layer extent is set\n    let clipped = false;\n    let render = true;\n    if (layerState.extent && this.clipping) {\n      const layerExtent = fromUserExtent(layerState.extent, projection);\n      render = intersectsExtent(layerExtent, frameState.extent);\n      clipped = render && !containsExtent(layerExtent, frameState.extent);\n      if (clipped) {\n        this.clipUnrotated(this.compositionContext_, frameState, layerExtent);\n      }\n    }\n\n    if (render) {\n      this.renderWorlds(replayGroup, frameState);\n    }\n\n    if (clipped) {\n      this.compositionContext_.restore();\n    }\n\n    this.releaseCompositionContext_();\n\n    this.postRender(context, frameState);\n\n    if (this.renderedRotation_ !== viewState.rotation) {\n      this.renderedRotation_ = viewState.rotation;\n      this.hitDetectionImageData_ = null;\n    }\n    return this.container;\n  }\n\n  /**\n   * Asynchronous layer level hit detection.\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../../Feature\").default>>} Promise\n   * that resolves with an array of features.\n   */\n  getFeatures(pixel) {\n    return new Promise((resolve) => {\n      if (!this.hitDetectionImageData_ && !this.animatingOrInteracting_) {\n        const size = [this.context.canvas.width, this.context.canvas.height];\n        apply(this.pixelTransform, size);\n        const center = this.renderedCenter_;\n        const resolution = this.renderedResolution_;\n        const rotation = this.renderedRotation_;\n        const projection = this.renderedProjection_;\n        const extent = this.wrappedRenderedExtent_;\n        const layer = this.getLayer();\n        const transforms = [];\n        const width = size[0] * HIT_DETECT_RESOLUTION;\n        const height = size[1] * HIT_DETECT_RESOLUTION;\n        transforms.push(\n          this.getRenderTransform(\n            center,\n            resolution,\n            rotation,\n            HIT_DETECT_RESOLUTION,\n            width,\n            height,\n            0\n          ).slice()\n        );\n        const source = layer.getSource();\n        const projectionExtent = projection.getExtent();\n        if (\n          source.getWrapX() &&\n          projection.canWrapX() &&\n          !containsExtent(projectionExtent, extent)\n        ) {\n          let startX = extent[0];\n          const worldWidth = getWidth(projectionExtent);\n          let world = 0;\n          let offsetX;\n          while (startX < projectionExtent[0]) {\n            --world;\n            offsetX = worldWidth * world;\n            transforms.push(\n              this.getRenderTransform(\n                center,\n                resolution,\n                rotation,\n                HIT_DETECT_RESOLUTION,\n                width,\n                height,\n                offsetX\n              ).slice()\n            );\n            startX += worldWidth;\n          }\n          world = 0;\n          startX = extent[2];\n          while (startX > projectionExtent[2]) {\n            ++world;\n            offsetX = worldWidth * world;\n            transforms.push(\n              this.getRenderTransform(\n                center,\n                resolution,\n                rotation,\n                HIT_DETECT_RESOLUTION,\n                width,\n                height,\n                offsetX\n              ).slice()\n            );\n            startX -= worldWidth;\n          }\n        }\n\n        this.hitDetectionImageData_ = createHitDetectionImageData(\n          size,\n          transforms,\n          this.renderedFeatures_,\n          layer.getStyleFunction(),\n          extent,\n          resolution,\n          rotation\n        );\n      }\n      resolve(\n        hitDetect(pixel, this.renderedFeatures_, this.hitDetectionImageData_)\n      );\n    });\n  }\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  forEachFeatureAtCoordinate(\n    coordinate,\n    frameState,\n    hitTolerance,\n    callback,\n    matches\n  ) {\n    if (!this.replayGroup_) {\n      return undefined;\n    }\n    const resolution = frameState.viewState.resolution;\n    const rotation = frameState.viewState.rotation;\n    const layer = this.getLayer();\n\n    /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */\n    const features = {};\n\n    /**\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {number} distanceSq The squared distance to the click position\n     * @return {T|undefined} Callback result.\n     */\n    const featureCallback = function (feature, geometry, distanceSq) {\n      const key = getUid(feature);\n      const match = features[key];\n      if (!match) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          return callback(feature, layer, geometry);\n        }\n        matches.push(\n          (features[key] = {\n            feature: feature,\n            layer: layer,\n            geometry: geometry,\n            distanceSq: distanceSq,\n            callback: callback,\n          })\n        );\n      } else if (match !== true && distanceSq < match.distanceSq) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          matches.splice(matches.lastIndexOf(match), 1);\n          return callback(feature, layer, geometry);\n        }\n        match.geometry = geometry;\n        match.distanceSq = distanceSq;\n      }\n      return undefined;\n    };\n\n    let result;\n    const executorGroups = [this.replayGroup_];\n    if (this.declutterExecutorGroup) {\n      executorGroups.push(this.declutterExecutorGroup);\n    }\n    executorGroups.some((executorGroup) => {\n      return (result = executorGroup.forEachFeatureAtCoordinate(\n        coordinate,\n        resolution,\n        rotation,\n        hitTolerance,\n        featureCallback,\n        executorGroup === this.declutterExecutorGroup &&\n          frameState.declutterTree\n          ? frameState.declutterTree.all().map((item) => item.value)\n          : null\n      ));\n    });\n\n    return result;\n  }\n\n  /**\n   * Perform action necessary to get the layer rendered after new fonts have loaded\n   */\n  handleFontsChanged() {\n    const layer = this.getLayer();\n    if (layer.getVisible() && this.replayGroup_) {\n      layer.changed();\n    }\n  }\n\n  /**\n   * Handle changes in image style state.\n   * @param {import(\"../../events/Event.js\").default} event Image style change event.\n   * @private\n   */\n  handleStyleImageChange_(event) {\n    this.renderIfReadyAndVisible();\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrame(frameState) {\n    const vectorLayer = this.getLayer();\n    const vectorSource = vectorLayer.getSource();\n    if (!vectorSource) {\n      return false;\n    }\n\n    const animating = frameState.viewHints[ViewHint.ANIMATING];\n    const interacting = frameState.viewHints[ViewHint.INTERACTING];\n    const updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();\n    const updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();\n\n    if (\n      (this.ready && !updateWhileAnimating && animating) ||\n      (!updateWhileInteracting && interacting)\n    ) {\n      this.animatingOrInteracting_ = true;\n      return true;\n    }\n    this.animatingOrInteracting_ = false;\n\n    const frameStateExtent = frameState.extent;\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n    const resolution = viewState.resolution;\n    const pixelRatio = frameState.pixelRatio;\n    const vectorLayerRevision = vectorLayer.getRevision();\n    const vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();\n    let vectorLayerRenderOrder = vectorLayer.getRenderOrder();\n\n    if (vectorLayerRenderOrder === undefined) {\n      vectorLayerRenderOrder = defaultRenderOrder;\n    }\n\n    const center = viewState.center.slice();\n    const extent = buffer(\n      frameStateExtent,\n      vectorLayerRenderBuffer * resolution\n    );\n    const renderedExtent = extent.slice();\n    const loadExtents = [extent.slice()];\n    const projectionExtent = projection.getExtent();\n\n    if (\n      vectorSource.getWrapX() &&\n      projection.canWrapX() &&\n      !containsExtent(projectionExtent, frameState.extent)\n    ) {\n      // For the replay group, we need an extent that intersects the real world\n      // (-180° to +180°). To support geometries in a coordinate range from -540°\n      // to +540°, we add at least 1 world width on each side of the projection\n      // extent. If the viewport is wider than the world, we need to add half of\n      // the viewport width to make sure we cover the whole viewport.\n      const worldWidth = getWidth(projectionExtent);\n      const gutter = Math.max(getWidth(extent) / 2, worldWidth);\n      extent[0] = projectionExtent[0] - gutter;\n      extent[2] = projectionExtent[2] + gutter;\n      wrapCoordinateX(center, projection);\n      const loadExtent = wrapExtentX(loadExtents[0], projection);\n      // If the extent crosses the date line, we load data for both edges of the worlds\n      if (\n        loadExtent[0] < projectionExtent[0] &&\n        loadExtent[2] < projectionExtent[2]\n      ) {\n        loadExtents.push([\n          loadExtent[0] + worldWidth,\n          loadExtent[1],\n          loadExtent[2] + worldWidth,\n          loadExtent[3],\n        ]);\n      } else if (\n        loadExtent[0] > projectionExtent[0] &&\n        loadExtent[2] > projectionExtent[2]\n      ) {\n        loadExtents.push([\n          loadExtent[0] - worldWidth,\n          loadExtent[1],\n          loadExtent[2] - worldWidth,\n          loadExtent[3],\n        ]);\n      }\n    }\n\n    if (\n      this.ready &&\n      this.renderedResolution_ == resolution &&\n      this.renderedRevision_ == vectorLayerRevision &&\n      this.renderedRenderOrder_ == vectorLayerRenderOrder &&\n      containsExtent(this.wrappedRenderedExtent_, extent)\n    ) {\n      if (!equals(this.renderedExtent_, renderedExtent)) {\n        this.hitDetectionImageData_ = null;\n        this.renderedExtent_ = renderedExtent;\n      }\n      this.renderedCenter_ = center;\n      this.replayGroupChanged = false;\n      return true;\n    }\n\n    this.replayGroup_ = null;\n\n    const replayGroup = new CanvasBuilderGroup(\n      getRenderTolerance(resolution, pixelRatio),\n      extent,\n      resolution,\n      pixelRatio\n    );\n\n    let declutterBuilderGroup;\n    if (this.getLayer().getDeclutter()) {\n      declutterBuilderGroup = new CanvasBuilderGroup(\n        getRenderTolerance(resolution, pixelRatio),\n        extent,\n        resolution,\n        pixelRatio\n      );\n    }\n\n    const userProjection = getUserProjection();\n    let userTransform;\n    if (userProjection) {\n      for (let i = 0, ii = loadExtents.length; i < ii; ++i) {\n        const extent = loadExtents[i];\n        const userExtent = toUserExtent(extent, projection);\n        vectorSource.loadFeatures(\n          userExtent,\n          toUserResolution(resolution, projection),\n          userProjection\n        );\n      }\n      userTransform = getTransformFromProjections(userProjection, projection);\n    } else {\n      for (let i = 0, ii = loadExtents.length; i < ii; ++i) {\n        vectorSource.loadFeatures(loadExtents[i], resolution, projection);\n      }\n    }\n\n    const squaredTolerance = getSquaredRenderTolerance(resolution, pixelRatio);\n    let ready = true;\n    const render =\n      /**\n       * @param {import(\"../../Feature.js\").default} feature Feature.\n       */\n      (feature) => {\n        let styles;\n        const styleFunction =\n          feature.getStyleFunction() || vectorLayer.getStyleFunction();\n        if (styleFunction) {\n          styles = styleFunction(feature, resolution);\n        }\n        if (styles) {\n          const dirty = this.renderFeature(\n            feature,\n            squaredTolerance,\n            styles,\n            replayGroup,\n            userTransform,\n            declutterBuilderGroup\n          );\n          ready = ready && !dirty;\n        }\n      };\n\n    const userExtent = toUserExtent(extent, projection);\n    /** @type {Array<import(\"../../Feature.js\").default>} */\n    const features = vectorSource.getFeaturesInExtent(userExtent);\n    if (vectorLayerRenderOrder) {\n      features.sort(vectorLayerRenderOrder);\n    }\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      render(features[i]);\n    }\n    this.renderedFeatures_ = features;\n    this.ready = ready;\n\n    const replayGroupInstructions = replayGroup.finish();\n    const executorGroup = new ExecutorGroup(\n      extent,\n      resolution,\n      pixelRatio,\n      vectorSource.getOverlaps(),\n      replayGroupInstructions,\n      vectorLayer.getRenderBuffer()\n    );\n\n    if (declutterBuilderGroup) {\n      this.declutterExecutorGroup = new ExecutorGroup(\n        extent,\n        resolution,\n        pixelRatio,\n        vectorSource.getOverlaps(),\n        declutterBuilderGroup.finish(),\n        vectorLayer.getRenderBuffer()\n      );\n    }\n\n    this.renderedResolution_ = resolution;\n    this.renderedRevision_ = vectorLayerRevision;\n    this.renderedRenderOrder_ = vectorLayerRenderOrder;\n    this.renderedExtent_ = renderedExtent;\n    this.wrappedRenderedExtent_ = extent;\n    this.renderedCenter_ = center;\n    this.renderedProjection_ = projection;\n    this.replayGroup_ = executorGroup;\n    this.hitDetectionImageData_ = null;\n\n    this.replayGroupChanged = true;\n    return true;\n  }\n\n  /**\n   * @param {import(\"../../Feature.js\").default} feature Feature.\n   * @param {number} squaredTolerance Squared render tolerance.\n   * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\n   * @param {import(\"../../proj.js\").TransformFunction} [transform] Transform from user to view projection.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\n   * @return {boolean} `true` if an image is loading.\n   */\n  renderFeature(\n    feature,\n    squaredTolerance,\n    styles,\n    builderGroup,\n    transform,\n    declutterBuilderGroup\n  ) {\n    if (!styles) {\n      return false;\n    }\n    let loading = false;\n    if (Array.isArray(styles)) {\n      for (let i = 0, ii = styles.length; i < ii; ++i) {\n        loading =\n          renderFeature(\n            builderGroup,\n            feature,\n            styles[i],\n            squaredTolerance,\n            this.boundHandleStyleImageChange_,\n            transform,\n            declutterBuilderGroup\n          ) || loading;\n      }\n    } else {\n      loading = renderFeature(\n        builderGroup,\n        feature,\n        styles,\n        squaredTolerance,\n        this.boundHandleStyleImageChange_,\n        transform,\n        declutterBuilderGroup\n      );\n    }\n    return loading;\n  }\n}\n\nexport default CanvasVectorLayerRenderer;\n"],"mappings":";;;;;AAAA;AACA;AACA;AACA,OAAOA,kBAAkB,MAAM,qCAAqC;AACpE,OAAOC,mBAAmB,IAAGC,UAAU,QAAO,YAAY;AAC1D,OAAOC,aAAa,MAAM,sCAAsC;AAChE,OAAOC,QAAQ,MAAM,mBAAmB;AACxC,SACEC,qBAAqB,EACrBC,2BAA2B,EAC3BC,SAAS,QACJ,kCAAkC;AACzC,SACEC,KAAK,EACLC,WAAW,EACXC,SAAS,EACTC,QAAQ,IAAIC,iBAAiB,QACxB,oBAAoB;AAC3B,SACEC,MAAM,EACNC,cAAc,EACdC,WAAW,EACXC,QAAQ,EACRC,UAAU,IAAIC,gBAAgB,EAC9BC,KAAK,IAAIC,WAAW,QACf,iBAAiB;AACxB,SAAQC,qBAAqB,EAAEC,aAAa,QAAO,cAAc;AACjE,SACEC,YAAY,IAAIC,kBAAkB,EAClCC,YAAY,IAAIC,kBAAkB,EAClCC,mBAAmB,IAAIC,yBAAyB,EAChDC,aAAa,IAAbA,cAAa,QACR,cAAc;AACrB,SAAQC,MAAM,QAAO,gBAAgB;AACrC,SACEC,cAAc,EACdC,2BAA2B,EAC3BC,iBAAiB,EACjBC,YAAY,EACZC,gBAAgB,QACX,eAAe;AACtB,SAAQC,MAAM,QAAO,eAAe;AACpC,SAAQjB,KAAK,IAAIkB,eAAe,QAAO,qBAAqB;;AAE5D;AACA;AACA;AACA;AACA;AAJA,IAKMC,yBAAyB,0BAAAC,oBAAA;EAAAC,SAAA,CAAAF,yBAAA,EAAAC,oBAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,yBAAA;EAC7B;AACF;AACA;EACE,SAAAA,0BAAYK,WAAW,EAAE;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAP,yBAAA;IACvBM,KAAA,GAAAH,MAAA,CAAAK,IAAA,OAAMH,WAAW;;IAEjB;IACAC,KAAA,CAAKG,4BAA4B,GAAGH,KAAA,CAAKI,uBAAuB,CAACC,IAAI,CAAAC,sBAAA,CAAAN,KAAA,EAAM;;IAE3E;AACJ;AACA;IACIA,KAAA,CAAKO,uBAAuB;;IAE5B;AACJ;AACA;IACIP,KAAA,CAAKQ,sBAAsB,GAAG,IAAI;;IAElC;AACJ;AACA;IACIR,KAAA,CAAKS,iBAAiB,GAAG,IAAI;;IAE7B;AACJ;AACA;AACA;IACIT,KAAA,CAAKU,iBAAiB,GAAG,CAAC,CAAC;;IAE3B;AACJ;AACA;AACA;IACIV,KAAA,CAAKW,mBAAmB,GAAGC,GAAG;;IAE9B;AACJ;AACA;AACA;IACIZ,KAAA,CAAKa,eAAe,GAAG1C,WAAW,EAAE;;IAEpC;AACJ;AACA;AACA;IACI6B,KAAA,CAAKc,sBAAsB,GAAG3C,WAAW,EAAE;;IAE3C;AACJ;AACA;AACA;IACI6B,KAAA,CAAKe,iBAAiB;;IAEtB;AACJ;AACA;AACA;IACIf,KAAA,CAAKgB,eAAe,GAAG,IAAI;;IAE3B;AACJ;AACA;AACA;IACIhB,KAAA,CAAKiB,mBAAmB,GAAG,IAAI;;IAE/B;AACJ;AACA;AACA;IACIjB,KAAA,CAAKkB,oBAAoB,GAAG,IAAI;;IAEhC;AACJ;AACA;AACA;IACIlB,KAAA,CAAKmB,YAAY,GAAG,IAAI;;IAExB;AACJ;AACA;AACA;IACInB,KAAA,CAAKoB,kBAAkB,GAAG,IAAI;;IAE9B;AACJ;AACA;IACIpB,KAAA,CAAKqB,sBAAsB,GAAG,IAAI;;IAElC;AACJ;AACA;AACA;IACIrB,KAAA,CAAKsB,QAAQ,GAAG,IAAI;;IAEpB;AACJ;AACA;AACA;IACItB,KAAA,CAAKuB,mBAAmB,GAAG,IAAI;;IAE/B;AACJ;AACA;AACA;IACIvB,KAAA,CAAKwB,QAAQ,GAAG,CAAC;IAAC,OAAAxB,KAAA;EACpB;;EAEA;AACF;AACA;AACA;AACA;EAJEyB,YAAA,CAAA/B,yBAAA;IAAAgC,GAAA;IAAAC,KAAA,EAKA,SAAAC,aAAaC,aAAa,EAAEC,UAAU,EAAEC,aAAa,EAAE;MACrD,IAAMC,MAAM,GAAGF,UAAU,CAACE,MAAM;MAChC,IAAMC,SAAS,GAAGH,UAAU,CAACG,SAAS;MACtC,IAAMC,MAAM,GAAGD,SAAS,CAACC,MAAM;MAC/B,IAAMC,UAAU,GAAGF,SAAS,CAACE,UAAU;MACvC,IAAMC,UAAU,GAAGH,SAAS,CAACG,UAAU;MACvC,IAAMC,QAAQ,GAAGJ,SAAS,CAACI,QAAQ;MACnC,IAAMC,gBAAgB,GAAGF,UAAU,CAACG,SAAS,EAAE;MAC/C,IAAMC,YAAY,GAAG,IAAI,CAACC,QAAQ,EAAE,CAACC,SAAS,EAAE;MAChD,IAAMC,UAAU,GAAGb,UAAU,CAACa,UAAU;MACxC,IAAMC,SAAS,GAAGd,UAAU,CAACc,SAAS;MACtC,IAAMC,WAAW,GAAG,EAClBD,SAAS,CAACpF,QAAQ,CAACsF,SAAS,CAAC,IAAIF,SAAS,CAACpF,QAAQ,CAACuF,WAAW,CAAC,CACjE;MACD,IAAMC,OAAO,GAAG,IAAI,CAACzB,mBAAmB;MACxC,IAAM0B,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACrB,UAAU,CAACsB,IAAI,CAAC,CAAC,CAAC,GAAGT,UAAU,CAAC;MACzD,IAAMU,MAAM,GAAGH,IAAI,CAACC,KAAK,CAACrB,UAAU,CAACsB,IAAI,CAAC,CAAC,CAAC,GAAGT,UAAU,CAAC;MAE1D,IAAMW,UAAU,GAAGd,YAAY,CAACe,QAAQ,EAAE,IAAInB,UAAU,CAACoB,QAAQ,EAAE;MACnE,IAAMC,UAAU,GAAGH,UAAU,GAAGlF,QAAQ,CAACkE,gBAAgB,CAAC,GAAG,IAAI;MACjE,IAAMoB,QAAQ,GAAGJ,UAAU,GACvBJ,IAAI,CAACS,IAAI,CAAC,CAAC3B,MAAM,CAAC,CAAC,CAAC,GAAGM,gBAAgB,CAAC,CAAC,CAAC,IAAImB,UAAU,CAAC,GAAG,CAAC,GAC7D,CAAC;MACL,IAAIG,KAAK,GAAGN,UAAU,GAClBJ,IAAI,CAACW,KAAK,CAAC,CAAC7B,MAAM,CAAC,CAAC,CAAC,GAAGM,gBAAgB,CAAC,CAAC,CAAC,IAAImB,UAAU,CAAC,GAC1D,CAAC;MACL,GAAG;QACD,IAAMK,SAAS,GAAG,IAAI,CAACC,kBAAkB,CACvC7B,MAAM,EACNC,UAAU,EACVE,QAAQ,EACRM,UAAU,EACVM,KAAK,EACLI,MAAM,EACNO,KAAK,GAAGH,UAAU,CACnB;QACD5B,aAAa,CAACmC,OAAO,CACnBhB,OAAO,EACP,CAAC,EACDc,SAAS,EACTzB,QAAQ,EACRQ,WAAW,EACXoB,SAAS,EACTlC,aAAa,CACd;MACH,CAAC,QAAQ,EAAE6B,KAAK,GAAGF,QAAQ;IAC7B;EAAC;IAAAhC,GAAA;IAAAC,KAAA,EAED,SAAAuC,yBAAA,EAA2B;MACzB,IAAI,IAAI,CAAC1C,QAAQ,KAAK,CAAC,EAAE;QACvB,IAAM2C,kBAAkB,GAAG1F,qBAAqB,CAC9C,IAAI,CAACuE,OAAO,CAACoB,MAAM,CAACnB,KAAK,EACzB,IAAI,CAACD,OAAO,CAACoB,MAAM,CAACf,MAAM,EAC1B/F,UAAU,CACX;QACD,IAAI,CAACiE,mBAAmB,GAAG4C,kBAAkB;MAC/C,CAAC,MAAM;QACL,IAAI,CAAC5C,mBAAmB,GAAG,IAAI,CAACyB,OAAO;MACzC;IACF;EAAC;IAAAtB,GAAA;IAAAC,KAAA,EAED,SAAA0C,2BAAA,EAA6B;MAC3B,IAAI,IAAI,CAAC7C,QAAQ,KAAK,CAAC,EAAE;QACvB,IAAM8C,KAAK,GAAG,IAAI,CAACtB,OAAO,CAACuB,WAAW;QACtC,IAAI,CAACvB,OAAO,CAACuB,WAAW,GAAG,IAAI,CAAC/C,QAAQ;QACxC,IAAI,CAACwB,OAAO,CAACwB,SAAS,CAAC,IAAI,CAACjD,mBAAmB,CAAC6C,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;QAC7D,IAAI,CAACpB,OAAO,CAACuB,WAAW,GAAGD,KAAK;QAChC5F,aAAa,CAAC,IAAI,CAAC6C,mBAAmB,CAAC;QACvCjE,UAAU,CAACmH,IAAI,CAAC,IAAI,CAAClD,mBAAmB,CAAC6C,MAAM,CAAC;QAChD,IAAI,CAAC7C,mBAAmB,GAAG,IAAI;MACjC;IACF;;IAEA;AACF;AACA;AACA;EAHE;IAAAG,GAAA;IAAAC,KAAA,EAIA,SAAA+C,gBAAgB5C,UAAU,EAAE;MAC1B,IAAI,IAAI,CAACT,sBAAsB,EAAE;QAC/B,IAAI,CAAC6C,wBAAwB,EAAE;QAC/B,IAAI,CAACtC,YAAY,CACf,IAAI,CAACP,sBAAsB,EAC3BS,UAAU,EACVA,UAAU,CAACC,aAAa,CACzB;QACD,IAAI,CAACsC,0BAA0B,EAAE;MACnC;IACF;;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAA3C,GAAA;IAAAC,KAAA,EAMA,SAAAgD,YAAY7C,UAAU,EAAE8C,MAAM,EAAE;MAC9B,IAAMjC,UAAU,GAAGb,UAAU,CAACa,UAAU;MACxC,IAAMkC,UAAU,GAAG/C,UAAU,CAACgD,gBAAgB,CAAChD,UAAU,CAACiD,UAAU,CAAC;;MAErE;MACAjH,SAAS,CAAC,IAAI,CAACkH,cAAc,EAAE,CAAC,GAAGrC,UAAU,EAAE,CAAC,GAAGA,UAAU,CAAC;MAC9D9E,WAAW,CAAC,IAAI,CAACoH,qBAAqB,EAAE,IAAI,CAACD,cAAc,CAAC;MAE5D,IAAME,eAAe,GAAGlH,iBAAiB,CAAC,IAAI,CAACgH,cAAc,CAAC;MAE9D,IAAI,CAACG,YAAY,CAACP,MAAM,EAAEM,eAAe,EAAE,IAAI,CAACE,aAAa,CAACtD,UAAU,CAAC,CAAC;MAC1E,IAAMkB,OAAO,GAAG,IAAI,CAACA,OAAO;MAC5B,IAAMoB,MAAM,GAAGpB,OAAO,CAACoB,MAAM;MAE7B,IAAMiB,WAAW,GAAG,IAAI,CAAClE,YAAY;MACrC,IAAME,sBAAsB,GAAG,IAAI,CAACA,sBAAsB;MAC1D,IACE,CAAC,CAACgE,WAAW,IAAIA,WAAW,CAACC,OAAO,EAAE,MACrC,CAACjE,sBAAsB,IAAIA,sBAAsB,CAACiE,OAAO,EAAE,CAAC,EAC7D;QACA,OAAO,IAAI;MACb;;MAEA;MACA,IAAMrC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACrB,UAAU,CAACsB,IAAI,CAAC,CAAC,CAAC,GAAGT,UAAU,CAAC;MACzD,IAAMU,MAAM,GAAGH,IAAI,CAACC,KAAK,CAACrB,UAAU,CAACsB,IAAI,CAAC,CAAC,CAAC,GAAGT,UAAU,CAAC;MAC1D,IAAIyB,MAAM,CAACnB,KAAK,IAAIA,KAAK,IAAImB,MAAM,CAACf,MAAM,IAAIA,MAAM,EAAE;QACpDe,MAAM,CAACnB,KAAK,GAAGA,KAAK;QACpBmB,MAAM,CAACf,MAAM,GAAGA,MAAM;QACtB,IAAIe,MAAM,CAACmB,KAAK,CAACzB,SAAS,KAAKoB,eAAe,EAAE;UAC9Cd,MAAM,CAACmB,KAAK,CAACzB,SAAS,GAAGoB,eAAe;QAC1C;MACF,CAAC,MAAM,IAAI,CAAC,IAAI,CAACM,eAAe,EAAE;QAChCxC,OAAO,CAACyC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAExC,KAAK,EAAEI,MAAM,CAAC;MACxC;MAEA,IAAI,CAACqC,SAAS,CAAC1C,OAAO,EAAElB,UAAU,CAAC;MAEnC,IAAMG,SAAS,GAAGH,UAAU,CAACG,SAAS;MACtC,IAAMG,UAAU,GAAGH,SAAS,CAACG,UAAU;MAEvC,IAAI,CAACZ,QAAQ,GAAGqD,UAAU,CAACc,OAAO;MAClC,IAAI,CAACzB,wBAAwB,EAAE;;MAE/B;MACA,IAAI0B,OAAO,GAAG,KAAK;MACnB,IAAIC,MAAM,GAAG,IAAI;MACjB,IAAIhB,UAAU,CAAC7C,MAAM,IAAI,IAAI,CAACV,QAAQ,EAAE;QACtC,IAAMwE,WAAW,GAAG3G,cAAc,CAAC0F,UAAU,CAAC7C,MAAM,EAAEI,UAAU,CAAC;QACjEyD,MAAM,GAAGvH,gBAAgB,CAACwH,WAAW,EAAEhE,UAAU,CAACE,MAAM,CAAC;QACzD4D,OAAO,GAAGC,MAAM,IAAI,CAAC3H,cAAc,CAAC4H,WAAW,EAAEhE,UAAU,CAACE,MAAM,CAAC;QACnE,IAAI4D,OAAO,EAAE;UACX,IAAI,CAACG,aAAa,CAAC,IAAI,CAACxE,mBAAmB,EAAEO,UAAU,EAAEgE,WAAW,CAAC;QACvE;MACF;MAEA,IAAID,MAAM,EAAE;QACV,IAAI,CAACjE,YAAY,CAACyD,WAAW,EAAEvD,UAAU,CAAC;MAC5C;MAEA,IAAI8D,OAAO,EAAE;QACX,IAAI,CAACrE,mBAAmB,CAACyE,OAAO,EAAE;MACpC;MAEA,IAAI,CAAC3B,0BAA0B,EAAE;MAEjC,IAAI,CAAC4B,UAAU,CAACjD,OAAO,EAAElB,UAAU,CAAC;MAEpC,IAAI,IAAI,CAACf,iBAAiB,KAAKkB,SAAS,CAACI,QAAQ,EAAE;QACjD,IAAI,CAACtB,iBAAiB,GAAGkB,SAAS,CAACI,QAAQ;QAC3C,IAAI,CAAC7B,sBAAsB,GAAG,IAAI;MACpC;MACA,OAAO,IAAI,CAAC0F,SAAS;IACvB;;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAAxE,GAAA;IAAAC,KAAA,EAMA,SAAAwE,YAAYC,KAAK,EAAE;MAAA,IAAAC,MAAA;MACjB,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAK;QAC9B,IAAI,CAACF,MAAI,CAAC7F,sBAAsB,IAAI,CAAC6F,MAAI,CAAC9F,uBAAuB,EAAE;UACjE,IAAM6C,IAAI,GAAG,CAACiD,MAAI,CAACrD,OAAO,CAACoB,MAAM,CAACnB,KAAK,EAAEoD,MAAI,CAACrD,OAAO,CAACoB,MAAM,CAACf,MAAM,CAAC;UACpEzF,KAAK,CAACyI,MAAI,CAACrB,cAAc,EAAE5B,IAAI,CAAC;UAChC,IAAMlB,MAAM,GAAGmE,MAAI,CAACrF,eAAe;UACnC,IAAMmB,UAAU,GAAGkE,MAAI,CAAC1F,mBAAmB;UAC3C,IAAM0B,QAAQ,GAAGgE,MAAI,CAACtF,iBAAiB;UACvC,IAAMqB,UAAU,GAAGiE,MAAI,CAACpF,mBAAmB;UAC3C,IAAMe,MAAM,GAAGqE,MAAI,CAACvF,sBAAsB;UAC1C,IAAM0F,KAAK,GAAGH,MAAI,CAAC5D,QAAQ,EAAE;UAC7B,IAAMgE,UAAU,GAAG,EAAE;UACrB,IAAMxD,KAAK,GAAGG,IAAI,CAAC,CAAC,CAAC,GAAG3F,qBAAqB;UAC7C,IAAM4F,MAAM,GAAGD,IAAI,CAAC,CAAC,CAAC,GAAG3F,qBAAqB;UAC9CgJ,UAAU,CAAChC,IAAI,CACb4B,MAAI,CAACtC,kBAAkB,CACrB7B,MAAM,EACNC,UAAU,EACVE,QAAQ,EACR5E,qBAAqB,EACrBwF,KAAK,EACLI,MAAM,EACN,CAAC,CACF,CAACqD,KAAK,EAAE,CACV;UACD,IAAMC,MAAM,GAAGH,KAAK,CAAC9D,SAAS,EAAE;UAChC,IAAMJ,gBAAgB,GAAGF,UAAU,CAACG,SAAS,EAAE;UAC/C,IACEoE,MAAM,CAACpD,QAAQ,EAAE,IACjBnB,UAAU,CAACoB,QAAQ,EAAE,IACrB,CAACtF,cAAc,CAACoE,gBAAgB,EAAEN,MAAM,CAAC,EACzC;YACA,IAAI4E,MAAM,GAAG5E,MAAM,CAAC,CAAC,CAAC;YACtB,IAAMyB,UAAU,GAAGrF,QAAQ,CAACkE,gBAAgB,CAAC;YAC7C,IAAIsB,KAAK,GAAG,CAAC;YACb,IAAIiD,OAAO;YACX,OAAOD,MAAM,GAAGtE,gBAAgB,CAAC,CAAC,CAAC,EAAE;cACnC,EAAEsB,KAAK;cACPiD,OAAO,GAAGpD,UAAU,GAAGG,KAAK;cAC5B6C,UAAU,CAAChC,IAAI,CACb4B,MAAI,CAACtC,kBAAkB,CACrB7B,MAAM,EACNC,UAAU,EACVE,QAAQ,EACR5E,qBAAqB,EACrBwF,KAAK,EACLI,MAAM,EACNwD,OAAO,CACR,CAACH,KAAK,EAAE,CACV;cACDE,MAAM,IAAInD,UAAU;YACtB;YACAG,KAAK,GAAG,CAAC;YACTgD,MAAM,GAAG5E,MAAM,CAAC,CAAC,CAAC;YAClB,OAAO4E,MAAM,GAAGtE,gBAAgB,CAAC,CAAC,CAAC,EAAE;cACnC,EAAEsB,KAAK;cACPiD,OAAO,GAAGpD,UAAU,GAAGG,KAAK;cAC5B6C,UAAU,CAAChC,IAAI,CACb4B,MAAI,CAACtC,kBAAkB,CACrB7B,MAAM,EACNC,UAAU,EACVE,QAAQ,EACR5E,qBAAqB,EACrBwF,KAAK,EACLI,MAAM,EACNwD,OAAO,CACR,CAACH,KAAK,EAAE,CACV;cACDE,MAAM,IAAInD,UAAU;YACtB;UACF;UAEA4C,MAAI,CAAC7F,sBAAsB,GAAG9C,2BAA2B,CACvD0F,IAAI,EACJqD,UAAU,EACVJ,MAAI,CAAC5F,iBAAiB,EACtB+F,KAAK,CAACM,gBAAgB,EAAE,EACxB9E,MAAM,EACNG,UAAU,EACVE,QAAQ,CACT;QACH;QACAkE,OAAO,CACL5I,SAAS,CAACyI,KAAK,EAAEC,MAAI,CAAC5F,iBAAiB,EAAE4F,MAAI,CAAC7F,sBAAsB,CAAC,CACtE;MACH,CAAC,CAAC;IACJ;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EARE;IAAAkB,GAAA;IAAAC,KAAA,EASA,SAAAoF,2BACEC,UAAU,EACVlF,UAAU,EACVmF,YAAY,EACZC,QAAQ,EACRC,OAAO,EACP;MAAA,IAAAC,MAAA;MACA,IAAI,CAAC,IAAI,CAACjG,YAAY,EAAE;QACtB,OAAO8C,SAAS;MAClB;MACA,IAAM9B,UAAU,GAAGL,UAAU,CAACG,SAAS,CAACE,UAAU;MAClD,IAAME,QAAQ,GAAGP,UAAU,CAACG,SAAS,CAACI,QAAQ;MAC9C,IAAMmE,KAAK,GAAG,IAAI,CAAC/D,QAAQ,EAAE;;MAE7B;MACA,IAAM4E,QAAQ,GAAG,CAAC,CAAC;;MAEnB;AACJ;AACA;AACA;AACA;AACA;MACI,IAAMC,eAAe,GAAG,SAAlBA,eAAeA,CAAaC,OAAO,EAAEC,QAAQ,EAAEC,UAAU,EAAE;QAC/D,IAAM/F,GAAG,GAAGlC,MAAM,CAAC+H,OAAO,CAAC;QAC3B,IAAMG,KAAK,GAAGL,QAAQ,CAAC3F,GAAG,CAAC;QAC3B,IAAI,CAACgG,KAAK,EAAE;UACV,IAAID,UAAU,KAAK,CAAC,EAAE;YACpBJ,QAAQ,CAAC3F,GAAG,CAAC,GAAG,IAAI;YACpB,OAAOwF,QAAQ,CAACK,OAAO,EAAEf,KAAK,EAAEgB,QAAQ,CAAC;UAC3C;UACAL,OAAO,CAAC1C,IAAI,CACT4C,QAAQ,CAAC3F,GAAG,CAAC,GAAG;YACf6F,OAAO,EAAEA,OAAO;YAChBf,KAAK,EAAEA,KAAK;YACZgB,QAAQ,EAAEA,QAAQ;YAClBC,UAAU,EAAEA,UAAU;YACtBP,QAAQ,EAAEA;UACZ,CAAC,CACF;QACH,CAAC,MAAM,IAAIQ,KAAK,KAAK,IAAI,IAAID,UAAU,GAAGC,KAAK,CAACD,UAAU,EAAE;UAC1D,IAAIA,UAAU,KAAK,CAAC,EAAE;YACpBJ,QAAQ,CAAC3F,GAAG,CAAC,GAAG,IAAI;YACpByF,OAAO,CAACQ,MAAM,CAACR,OAAO,CAACS,WAAW,CAACF,KAAK,CAAC,EAAE,CAAC,CAAC;YAC7C,OAAOR,QAAQ,CAACK,OAAO,EAAEf,KAAK,EAAEgB,QAAQ,CAAC;UAC3C;UACAE,KAAK,CAACF,QAAQ,GAAGA,QAAQ;UACzBE,KAAK,CAACD,UAAU,GAAGA,UAAU;QAC/B;QACA,OAAOxD,SAAS;MAClB,CAAC;MAED,IAAI4D,MAAM;MACV,IAAMC,cAAc,GAAG,CAAC,IAAI,CAAC3G,YAAY,CAAC;MAC1C,IAAI,IAAI,CAACE,sBAAsB,EAAE;QAC/ByG,cAAc,CAACrD,IAAI,CAAC,IAAI,CAACpD,sBAAsB,CAAC;MAClD;MACAyG,cAAc,CAACC,IAAI,CAAC,UAAClG,aAAa,EAAK;QACrC,OAAQgG,MAAM,GAAGhG,aAAa,CAACkF,0BAA0B,CACvDC,UAAU,EACV7E,UAAU,EACVE,QAAQ,EACR4E,YAAY,EACZK,eAAe,EACfzF,aAAa,KAAKuF,MAAI,CAAC/F,sBAAsB,IAC3CS,UAAU,CAACC,aAAa,GACtBD,UAAU,CAACC,aAAa,CAACiG,GAAG,EAAE,CAACC,GAAG,CAAC,UAACC,IAAI;UAAA,OAAKA,IAAI,CAACvG,KAAK;QAAA,EAAC,GACxD,IAAI,CACT;MACH,CAAC,CAAC;MAEF,OAAOkG,MAAM;IACf;;IAEA;AACF;AACA;EAFE;IAAAnG,GAAA;IAAAC,KAAA,EAGA,SAAAwG,mBAAA,EAAqB;MACnB,IAAM3B,KAAK,GAAG,IAAI,CAAC/D,QAAQ,EAAE;MAC7B,IAAI+D,KAAK,CAAC4B,UAAU,EAAE,IAAI,IAAI,CAACjH,YAAY,EAAE;QAC3CqF,KAAK,CAAC6B,OAAO,EAAE;MACjB;IACF;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA3G,GAAA;IAAAC,KAAA,EAKA,SAAAvB,wBAAwBkI,KAAK,EAAE;MAC7B,IAAI,CAACC,uBAAuB,EAAE;IAChC;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA7G,GAAA;IAAAC,KAAA,EAKA,SAAA6G,aAAa1G,UAAU,EAAE;MAAA,IAAA2G,MAAA;MACvB,IAAM1I,WAAW,GAAG,IAAI,CAAC0C,QAAQ,EAAE;MACnC,IAAMD,YAAY,GAAGzC,WAAW,CAAC2C,SAAS,EAAE;MAC5C,IAAI,CAACF,YAAY,EAAE;QACjB,OAAO,KAAK;MACd;MAEA,IAAMkG,SAAS,GAAG5G,UAAU,CAACc,SAAS,CAACpF,QAAQ,CAACsF,SAAS,CAAC;MAC1D,IAAM6F,WAAW,GAAG7G,UAAU,CAACc,SAAS,CAACpF,QAAQ,CAACuF,WAAW,CAAC;MAC9D,IAAM6F,oBAAoB,GAAG7I,WAAW,CAAC8I,uBAAuB,EAAE;MAClE,IAAMC,sBAAsB,GAAG/I,WAAW,CAACgJ,yBAAyB,EAAE;MAEtE,IACG,IAAI,CAACC,KAAK,IAAI,CAACJ,oBAAoB,IAAIF,SAAS,IAChD,CAACI,sBAAsB,IAAIH,WAAY,EACxC;QACA,IAAI,CAACpI,uBAAuB,GAAG,IAAI;QACnC,OAAO,IAAI;MACb;MACA,IAAI,CAACA,uBAAuB,GAAG,KAAK;MAEpC,IAAM0I,gBAAgB,GAAGnH,UAAU,CAACE,MAAM;MAC1C,IAAMC,SAAS,GAAGH,UAAU,CAACG,SAAS;MACtC,IAAMG,UAAU,GAAGH,SAAS,CAACG,UAAU;MACvC,IAAMD,UAAU,GAAGF,SAAS,CAACE,UAAU;MACvC,IAAMQ,UAAU,GAAGb,UAAU,CAACa,UAAU;MACxC,IAAMuG,mBAAmB,GAAGnJ,WAAW,CAACoJ,WAAW,EAAE;MACrD,IAAMC,uBAAuB,GAAGrJ,WAAW,CAACsJ,eAAe,EAAE;MAC7D,IAAIC,sBAAsB,GAAGvJ,WAAW,CAACwJ,cAAc,EAAE;MAEzD,IAAID,sBAAsB,KAAKrF,SAAS,EAAE;QACxCqF,sBAAsB,GAAG1K,kBAAkB;MAC7C;MAEA,IAAMsD,MAAM,GAAGD,SAAS,CAACC,MAAM,CAACwE,KAAK,EAAE;MACvC,IAAM1E,MAAM,GAAG/D,MAAM,CACnBgL,gBAAgB,EAChBG,uBAAuB,GAAGjH,UAAU,CACrC;MACD,IAAMqH,cAAc,GAAGxH,MAAM,CAAC0E,KAAK,EAAE;MACrC,IAAM+C,WAAW,GAAG,CAACzH,MAAM,CAAC0E,KAAK,EAAE,CAAC;MACpC,IAAMpE,gBAAgB,GAAGF,UAAU,CAACG,SAAS,EAAE;MAE/C,IACEC,YAAY,CAACe,QAAQ,EAAE,IACvBnB,UAAU,CAACoB,QAAQ,EAAE,IACrB,CAACtF,cAAc,CAACoE,gBAAgB,EAAER,UAAU,CAACE,MAAM,CAAC,EACpD;QACA;QACA;QACA;QACA;QACA;QACA,IAAMyB,UAAU,GAAGrF,QAAQ,CAACkE,gBAAgB,CAAC;QAC7C,IAAMoH,MAAM,GAAGxG,IAAI,CAACyG,GAAG,CAACvL,QAAQ,CAAC4D,MAAM,CAAC,GAAG,CAAC,EAAEyB,UAAU,CAAC;QACzDzB,MAAM,CAAC,CAAC,CAAC,GAAGM,gBAAgB,CAAC,CAAC,CAAC,GAAGoH,MAAM;QACxC1H,MAAM,CAAC,CAAC,CAAC,GAAGM,gBAAgB,CAAC,CAAC,CAAC,GAAGoH,MAAM;QACxCjK,eAAe,CAACyC,MAAM,EAAEE,UAAU,CAAC;QACnC,IAAMwH,UAAU,GAAGpL,WAAW,CAACiL,WAAW,CAAC,CAAC,CAAC,EAAErH,UAAU,CAAC;QAC1D;QACA,IACEwH,UAAU,CAAC,CAAC,CAAC,GAAGtH,gBAAgB,CAAC,CAAC,CAAC,IACnCsH,UAAU,CAAC,CAAC,CAAC,GAAGtH,gBAAgB,CAAC,CAAC,CAAC,EACnC;UACAmH,WAAW,CAAChF,IAAI,CAAC,CACfmF,UAAU,CAAC,CAAC,CAAC,GAAGnG,UAAU,EAC1BmG,UAAU,CAAC,CAAC,CAAC,EACbA,UAAU,CAAC,CAAC,CAAC,GAAGnG,UAAU,EAC1BmG,UAAU,CAAC,CAAC,CAAC,CACd,CAAC;QACJ,CAAC,MAAM,IACLA,UAAU,CAAC,CAAC,CAAC,GAAGtH,gBAAgB,CAAC,CAAC,CAAC,IACnCsH,UAAU,CAAC,CAAC,CAAC,GAAGtH,gBAAgB,CAAC,CAAC,CAAC,EACnC;UACAmH,WAAW,CAAChF,IAAI,CAAC,CACfmF,UAAU,CAAC,CAAC,CAAC,GAAGnG,UAAU,EAC1BmG,UAAU,CAAC,CAAC,CAAC,EACbA,UAAU,CAAC,CAAC,CAAC,GAAGnG,UAAU,EAC1BmG,UAAU,CAAC,CAAC,CAAC,CACd,CAAC;QACJ;MACF;MAEA,IACE,IAAI,CAACZ,KAAK,IACV,IAAI,CAACrI,mBAAmB,IAAIwB,UAAU,IACtC,IAAI,CAACzB,iBAAiB,IAAIwI,mBAAmB,IAC7C,IAAI,CAAChI,oBAAoB,IAAIoI,sBAAsB,IACnDpL,cAAc,CAAC,IAAI,CAAC4C,sBAAsB,EAAEkB,MAAM,CAAC,EACnD;QACA,IAAI,CAAC9C,MAAM,CAAC,IAAI,CAAC2B,eAAe,EAAE2I,cAAc,CAAC,EAAE;UACjD,IAAI,CAAChJ,sBAAsB,GAAG,IAAI;UAClC,IAAI,CAACK,eAAe,GAAG2I,cAAc;QACvC;QACA,IAAI,CAACxI,eAAe,GAAGkB,MAAM;QAC7B,IAAI,CAACd,kBAAkB,GAAG,KAAK;QAC/B,OAAO,IAAI;MACb;MAEA,IAAI,CAACD,YAAY,GAAG,IAAI;MAExB,IAAMkE,WAAW,GAAG,IAAIjI,kBAAkB,CACxC0B,kBAAkB,CAACqD,UAAU,EAAEQ,UAAU,CAAC,EAC1CX,MAAM,EACNG,UAAU,EACVQ,UAAU,CACX;MAED,IAAIkH,qBAAqB;MACzB,IAAI,IAAI,CAACpH,QAAQ,EAAE,CAACqH,YAAY,EAAE,EAAE;QAClCD,qBAAqB,GAAG,IAAIzM,kBAAkB,CAC5C0B,kBAAkB,CAACqD,UAAU,EAAEQ,UAAU,CAAC,EAC1CX,MAAM,EACNG,UAAU,EACVQ,UAAU,CACX;MACH;MAEA,IAAMoH,cAAc,GAAG1K,iBAAiB,EAAE;MAC1C,IAAI2K,aAAa;MACjB,IAAID,cAAc,EAAE;QAClB,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGT,WAAW,CAACU,MAAM,EAAEF,CAAC,GAAGC,EAAE,EAAE,EAAED,CAAC,EAAE;UACpD,IAAMjI,OAAM,GAAGyH,WAAW,CAACQ,CAAC,CAAC;UAC7B,IAAMG,WAAU,GAAG9K,YAAY,CAAC0C,OAAM,EAAEI,UAAU,CAAC;UACnDI,YAAY,CAAC6H,YAAY,CACvBD,WAAU,EACV7K,gBAAgB,CAAC4C,UAAU,EAAEC,UAAU,CAAC,EACxC2H,cAAc,CACf;QACH;QACAC,aAAa,GAAG5K,2BAA2B,CAAC2K,cAAc,EAAE3H,UAAU,CAAC;MACzE,CAAC,MAAM;QACL,KAAK,IAAI6H,EAAC,GAAG,CAAC,EAAEC,GAAE,GAAGT,WAAW,CAACU,MAAM,EAAEF,EAAC,GAAGC,GAAE,EAAE,EAAED,EAAC,EAAE;UACpDzH,YAAY,CAAC6H,YAAY,CAACZ,WAAW,CAACQ,EAAC,CAAC,EAAE9H,UAAU,EAAEC,UAAU,CAAC;QACnE;MACF;MAEA,IAAMkI,gBAAgB,GAAGtL,yBAAyB,CAACmD,UAAU,EAAEQ,UAAU,CAAC;MAC1E,IAAIqG,KAAK,GAAG,IAAI;MAChB,IAAMnD,MAAM;MACV;AACN;AACA;MACM,SAJIA,MAAMA,CAIT0B,OAAO,EAAK;QACX,IAAIgD,MAAM;QACV,IAAMC,aAAa,GACjBjD,OAAO,CAACT,gBAAgB,EAAE,IAAI/G,WAAW,CAAC+G,gBAAgB,EAAE;QAC9D,IAAI0D,aAAa,EAAE;UACjBD,MAAM,GAAGC,aAAa,CAACjD,OAAO,EAAEpF,UAAU,CAAC;QAC7C;QACA,IAAIoI,MAAM,EAAE;UACV,IAAME,KAAK,GAAGhC,MAAI,CAACxJ,aAAa,CAC9BsI,OAAO,EACP+C,gBAAgB,EAChBC,MAAM,EACNlF,WAAW,EACX2E,aAAa,EACbH,qBAAqB,CACtB;UACDb,KAAK,GAAGA,KAAK,IAAI,CAACyB,KAAK;QACzB;MACF,CAAC;MAEH,IAAML,UAAU,GAAG9K,YAAY,CAAC0C,MAAM,EAAEI,UAAU,CAAC;MACnD;MACA,IAAMiF,QAAQ,GAAG7E,YAAY,CAACkI,mBAAmB,CAACN,UAAU,CAAC;MAC7D,IAAId,sBAAsB,EAAE;QAC1BjC,QAAQ,CAACsD,IAAI,CAACrB,sBAAsB,CAAC;MACvC;MACA,KAAK,IAAIW,GAAC,GAAG,CAAC,EAAEC,IAAE,GAAG7C,QAAQ,CAAC8C,MAAM,EAAEF,GAAC,GAAGC,IAAE,EAAE,EAAED,GAAC,EAAE;QACjDpE,MAAM,CAACwB,QAAQ,CAAC4C,GAAC,CAAC,CAAC;MACrB;MACA,IAAI,CAACxJ,iBAAiB,GAAG4G,QAAQ;MACjC,IAAI,CAAC2B,KAAK,GAAGA,KAAK;MAElB,IAAM4B,uBAAuB,GAAGvF,WAAW,CAACwF,MAAM,EAAE;MACpD,IAAMhJ,aAAa,GAAG,IAAItE,aAAa,CACrCyE,MAAM,EACNG,UAAU,EACVQ,UAAU,EACVH,YAAY,CAACsI,WAAW,EAAE,EAC1BF,uBAAuB,EACvB7K,WAAW,CAACsJ,eAAe,EAAE,CAC9B;MAED,IAAIQ,qBAAqB,EAAE;QACzB,IAAI,CAACxI,sBAAsB,GAAG,IAAI9D,aAAa,CAC7CyE,MAAM,EACNG,UAAU,EACVQ,UAAU,EACVH,YAAY,CAACsI,WAAW,EAAE,EAC1BjB,qBAAqB,CAACgB,MAAM,EAAE,EAC9B9K,WAAW,CAACsJ,eAAe,EAAE,CAC9B;MACH;MAEA,IAAI,CAAC1I,mBAAmB,GAAGwB,UAAU;MACrC,IAAI,CAACzB,iBAAiB,GAAGwI,mBAAmB;MAC5C,IAAI,CAAChI,oBAAoB,GAAGoI,sBAAsB;MAClD,IAAI,CAACzI,eAAe,GAAG2I,cAAc;MACrC,IAAI,CAAC1I,sBAAsB,GAAGkB,MAAM;MACpC,IAAI,CAAChB,eAAe,GAAGkB,MAAM;MAC7B,IAAI,CAACjB,mBAAmB,GAAGmB,UAAU;MACrC,IAAI,CAACjB,YAAY,GAAGU,aAAa;MACjC,IAAI,CAACrB,sBAAsB,GAAG,IAAI;MAElC,IAAI,CAACY,kBAAkB,GAAG,IAAI;MAC9B,OAAO,IAAI;IACb;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EARE;IAAAM,GAAA;IAAAC,KAAA,EASA,SAAA1C,cACEsI,OAAO,EACP+C,gBAAgB,EAChBC,MAAM,EACNQ,YAAY,EACZjH,SAAS,EACT+F,qBAAqB,EACrB;MACA,IAAI,CAACU,MAAM,EAAE;QACX,OAAO,KAAK;MACd;MACA,IAAIS,OAAO,GAAG,KAAK;MACnB,IAAIC,KAAK,CAACC,OAAO,CAACX,MAAM,CAAC,EAAE;QACzB,KAAK,IAAIN,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGK,MAAM,CAACJ,MAAM,EAAEF,CAAC,GAAGC,EAAE,EAAE,EAAED,CAAC,EAAE;UAC/Ce,OAAO,GACL/L,cAAa,CACX8L,YAAY,EACZxD,OAAO,EACPgD,MAAM,CAACN,CAAC,CAAC,EACTK,gBAAgB,EAChB,IAAI,CAACnK,4BAA4B,EACjC2D,SAAS,EACT+F,qBAAqB,CACtB,IAAImB,OAAO;QAChB;MACF,CAAC,MAAM;QACLA,OAAO,GAAG/L,cAAa,CACrB8L,YAAY,EACZxD,OAAO,EACPgD,MAAM,EACND,gBAAgB,EAChB,IAAI,CAACnK,4BAA4B,EACjC2D,SAAS,EACT+F,qBAAqB,CACtB;MACH;MACA,OAAOmB,OAAO;IAChB;EAAC;EAAA,OAAAtL,yBAAA;AAAA,EAruBqCrC,mBAAmB;AAwuB3D,eAAeqC,yBAAyB"},"metadata":{},"sourceType":"module","externalDependencies":[]}