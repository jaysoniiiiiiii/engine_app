{"ast":null,"code":"/**\n * @module ol/extent\n */\nimport Relationship from './extent/Relationship.js';\nimport { assert } from './asserts.js';\n\n/**\n * An array of numbers representing an extent: `[minx, miny, maxx, maxy]`.\n * @typedef {Array<number>} Extent\n * @api\n */\n\n/**\n * Extent corner.\n * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} Corner\n */\n\n/**\n * Build an extent that includes all given coordinates.\n *\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @return {Extent} Bounding extent.\n * @api\n */\nexport function boundingExtent(coordinates) {\n  const extent = createEmpty();\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n    extendCoordinate(extent, coordinates[i]);\n  }\n  return extent;\n}\n\n/**\n * @param {Array<number>} xs Xs.\n * @param {Array<number>} ys Ys.\n * @param {Extent} [dest] Destination extent.\n * @private\n * @return {Extent} Extent.\n */\nfunction _boundingExtentXYs(xs, ys, dest) {\n  const minX = Math.min.apply(null, xs);\n  const minY = Math.min.apply(null, ys);\n  const maxX = Math.max.apply(null, xs);\n  const maxY = Math.max.apply(null, ys);\n  return createOrUpdate(minX, minY, maxX, maxY, dest);\n}\n\n/**\n * Return extent increased by the provided value.\n * @param {Extent} extent Extent.\n * @param {number} value The amount by which the extent should be buffered.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n * @api\n */\nexport function buffer(extent, value, dest) {\n  if (dest) {\n    dest[0] = extent[0] - value;\n    dest[1] = extent[1] - value;\n    dest[2] = extent[2] + value;\n    dest[3] = extent[3] + value;\n    return dest;\n  }\n  return [extent[0] - value, extent[1] - value, extent[2] + value, extent[3] + value];\n}\n\n/**\n * Creates a clone of an extent.\n *\n * @param {Extent} extent Extent to clone.\n * @param {Extent} [dest] Extent.\n * @return {Extent} The clone.\n */\nexport function clone(extent, dest) {\n  if (dest) {\n    dest[0] = extent[0];\n    dest[1] = extent[1];\n    dest[2] = extent[2];\n    dest[3] = extent[3];\n    return dest;\n  }\n  return extent.slice();\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {number} Closest squared distance.\n */\nexport function closestSquaredDistanceXY(extent, x, y) {\n  let dx, dy;\n  if (x < extent[0]) {\n    dx = extent[0] - x;\n  } else if (extent[2] < x) {\n    dx = x - extent[2];\n  } else {\n    dx = 0;\n  }\n  if (y < extent[1]) {\n    dy = extent[1] - y;\n  } else if (extent[3] < y) {\n    dy = y - extent[3];\n  } else {\n    dy = 0;\n  }\n  return dx * dx + dy * dy;\n}\n\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @return {boolean} The coordinate is contained in the extent.\n * @api\n */\nexport function containsCoordinate(extent, coordinate) {\n  return containsXY(extent, coordinate[0], coordinate[1]);\n}\n\n/**\n * Check if one extent contains another.\n *\n * An extent is deemed contained if it lies completely within the other extent,\n * including if they share one or more edges.\n *\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {boolean} The second extent is contained by or on the edge of the\n *     first.\n * @api\n */\nexport function containsExtent(extent1, extent2) {\n  return extent1[0] <= extent2[0] && extent2[2] <= extent1[2] && extent1[1] <= extent2[1] && extent2[3] <= extent1[3];\n}\n\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {Extent} extent Extent.\n * @param {number} x X coordinate.\n * @param {number} y Y coordinate.\n * @return {boolean} The x, y values are contained in the extent.\n * @api\n */\nexport function containsXY(extent, x, y) {\n  return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];\n}\n\n/**\n * Get the relationship between a coordinate and extent.\n * @param {Extent} extent The extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate The coordinate.\n * @return {import(\"./extent/Relationship.js\").default} The relationship (bitwise compare with\n *     import(\"./extent/Relationship.js\").Relationship).\n */\nexport function coordinateRelationship(extent, coordinate) {\n  const minX = extent[0];\n  const minY = extent[1];\n  const maxX = extent[2];\n  const maxY = extent[3];\n  const x = coordinate[0];\n  const y = coordinate[1];\n  let relationship = Relationship.UNKNOWN;\n  if (x < minX) {\n    relationship = relationship | Relationship.LEFT;\n  } else if (x > maxX) {\n    relationship = relationship | Relationship.RIGHT;\n  }\n  if (y < minY) {\n    relationship = relationship | Relationship.BELOW;\n  } else if (y > maxY) {\n    relationship = relationship | Relationship.ABOVE;\n  }\n  if (relationship === Relationship.UNKNOWN) {\n    relationship = Relationship.INTERSECTING;\n  }\n  return relationship;\n}\n\n/**\n * Create an empty extent.\n * @return {Extent} Empty extent.\n * @api\n */\nexport function createEmpty() {\n  return [Infinity, Infinity, -Infinity, -Infinity];\n}\n\n/**\n * Create a new extent or update the provided extent.\n * @param {number} minX Minimum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxX Maximum X.\n * @param {number} maxY Maximum Y.\n * @param {Extent} [dest] Destination extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdate(minX, minY, maxX, maxY, dest) {\n  if (dest) {\n    dest[0] = minX;\n    dest[1] = minY;\n    dest[2] = maxX;\n    dest[3] = maxY;\n    return dest;\n  }\n  return [minX, minY, maxX, maxY];\n}\n\n/**\n * Create a new empty extent or make the provided one empty.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateEmpty(dest) {\n  return createOrUpdate(Infinity, Infinity, -Infinity, -Infinity, dest);\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromCoordinate(coordinate, dest) {\n  const x = coordinate[0];\n  const y = coordinate[1];\n  return createOrUpdate(x, y, x, y, dest);\n}\n\n/**\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromCoordinates(coordinates, dest) {\n  const extent = createOrUpdateEmpty(dest);\n  return extendCoordinates(extent, coordinates);\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromFlatCoordinates(flatCoordinates, offset, end, stride, dest) {\n  const extent = createOrUpdateEmpty(dest);\n  return extendFlatCoordinates(extent, flatCoordinates, offset, end, stride);\n}\n\n/**\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromRings(rings, dest) {\n  const extent = createOrUpdateEmpty(dest);\n  return extendRings(extent, rings);\n}\n\n/**\n * Determine if two extents are equivalent.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {boolean} The two extents are equivalent.\n * @api\n */\nexport function equals(extent1, extent2) {\n  return extent1[0] == extent2[0] && extent1[2] == extent2[2] && extent1[1] == extent2[1] && extent1[3] == extent2[3];\n}\n\n/**\n * Determine if two extents are approximately equivalent.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @param {number} tolerance Tolerance in extent coordinate units.\n * @return {boolean} The two extents differ by less than the tolerance.\n */\nexport function approximatelyEquals(extent1, extent2, tolerance) {\n  return Math.abs(extent1[0] - extent2[0]) < tolerance && Math.abs(extent1[2] - extent2[2]) < tolerance && Math.abs(extent1[1] - extent2[1]) < tolerance && Math.abs(extent1[3] - extent2[3]) < tolerance;\n}\n\n/**\n * Modify an extent to include another extent.\n * @param {Extent} extent1 The extent to be modified.\n * @param {Extent} extent2 The extent that will be included in the first.\n * @return {Extent} A reference to the first (extended) extent.\n * @api\n */\nexport function extend(extent1, extent2) {\n  if (extent2[0] < extent1[0]) {\n    extent1[0] = extent2[0];\n  }\n  if (extent2[2] > extent1[2]) {\n    extent1[2] = extent2[2];\n  }\n  if (extent2[1] < extent1[1]) {\n    extent1[1] = extent2[1];\n  }\n  if (extent2[3] > extent1[3]) {\n    extent1[3] = extent2[3];\n  }\n  return extent1;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n */\nexport function extendCoordinate(extent, coordinate) {\n  if (coordinate[0] < extent[0]) {\n    extent[0] = coordinate[0];\n  }\n  if (coordinate[0] > extent[2]) {\n    extent[2] = coordinate[0];\n  }\n  if (coordinate[1] < extent[1]) {\n    extent[1] = coordinate[1];\n  }\n  if (coordinate[1] > extent[3]) {\n    extent[3] = coordinate[1];\n  }\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @return {Extent} Extent.\n */\nexport function extendCoordinates(extent, coordinates) {\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n    extendCoordinate(extent, coordinates[i]);\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {Extent} Extent.\n */\nexport function extendFlatCoordinates(extent, flatCoordinates, offset, end, stride) {\n  for (; offset < end; offset += stride) {\n    extendXY(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\n * @return {Extent} Extent.\n */\nexport function extendRings(extent, rings) {\n  for (let i = 0, ii = rings.length; i < ii; ++i) {\n    extendCoordinates(extent, rings[i]);\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n */\nexport function extendXY(extent, x, y) {\n  extent[0] = Math.min(extent[0], x);\n  extent[1] = Math.min(extent[1], y);\n  extent[2] = Math.max(extent[2], x);\n  extent[3] = Math.max(extent[3], y);\n}\n\n/**\n * This function calls `callback` for each corner of the extent. If the\n * callback returns a truthy value the function returns that value\n * immediately. Otherwise the function returns `false`.\n * @param {Extent} extent Extent.\n * @param {function(import(\"./coordinate.js\").Coordinate): S} callback Callback.\n * @return {S|boolean} Value.\n * @template S\n */\nexport function forEachCorner(extent, callback) {\n  let val;\n  val = callback(getBottomLeft(extent));\n  if (val) {\n    return val;\n  }\n  val = callback(getBottomRight(extent));\n  if (val) {\n    return val;\n  }\n  val = callback(getTopRight(extent));\n  if (val) {\n    return val;\n  }\n  val = callback(getTopLeft(extent));\n  if (val) {\n    return val;\n  }\n  return false;\n}\n\n/**\n * Get the size of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Area.\n * @api\n */\nexport function getArea(extent) {\n  let area = 0;\n  if (!isEmpty(extent)) {\n    area = getWidth(extent) * getHeight(extent);\n  }\n  return area;\n}\n\n/**\n * Get the bottom left coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Bottom left coordinate.\n * @api\n */\nexport function getBottomLeft(extent) {\n  return [extent[0], extent[1]];\n}\n\n/**\n * Get the bottom right coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Bottom right coordinate.\n * @api\n */\nexport function getBottomRight(extent) {\n  return [extent[2], extent[1]];\n}\n\n/**\n * Get the center coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Center.\n * @api\n */\nexport function getCenter(extent) {\n  return [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];\n}\n\n/**\n * Get a corner coordinate of an extent.\n * @param {Extent} extent Extent.\n * @param {Corner} corner Corner.\n * @return {import(\"./coordinate.js\").Coordinate} Corner coordinate.\n */\nexport function getCorner(extent, corner) {\n  let coordinate;\n  if (corner === 'bottom-left') {\n    coordinate = getBottomLeft(extent);\n  } else if (corner === 'bottom-right') {\n    coordinate = getBottomRight(extent);\n  } else if (corner === 'top-left') {\n    coordinate = getTopLeft(extent);\n  } else if (corner === 'top-right') {\n    coordinate = getTopRight(extent);\n  } else {\n    assert(false, 13); // Invalid corner\n  }\n\n  return coordinate;\n}\n\n/**\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {number} Enlarged area.\n */\nexport function getEnlargedArea(extent1, extent2) {\n  const minX = Math.min(extent1[0], extent2[0]);\n  const minY = Math.min(extent1[1], extent2[1]);\n  const maxX = Math.max(extent1[2], extent2[2]);\n  const maxY = Math.max(extent1[3], extent2[3]);\n  return (maxX - minX) * (maxY - minY);\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} center Center.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {import(\"./size.js\").Size} size Size.\n * @param {Extent} [dest] Destination extent.\n * @return {Extent} Extent.\n */\nexport function getForViewAndSize(center, resolution, rotation, size, dest) {\n  const [x0, y0, x1, y1, x2, y2, x3, y3] = getRotatedViewport(center, resolution, rotation, size);\n  return createOrUpdate(Math.min(x0, x1, x2, x3), Math.min(y0, y1, y2, y3), Math.max(x0, x1, x2, x3), Math.max(y0, y1, y2, y3), dest);\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} center Center.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {import(\"./size.js\").Size} size Size.\n * @return {Array<number>} Linear ring representing the viewport.\n */\nexport function getRotatedViewport(center, resolution, rotation, size) {\n  const dx = resolution * size[0] / 2;\n  const dy = resolution * size[1] / 2;\n  const cosRotation = Math.cos(rotation);\n  const sinRotation = Math.sin(rotation);\n  const xCos = dx * cosRotation;\n  const xSin = dx * sinRotation;\n  const yCos = dy * cosRotation;\n  const ySin = dy * sinRotation;\n  const x = center[0];\n  const y = center[1];\n  return [x - xCos + ySin, y - xSin - yCos, x - xCos - ySin, y - xSin + yCos, x + xCos - ySin, y + xSin + yCos, x + xCos + ySin, y + xSin - yCos, x - xCos + ySin, y - xSin - yCos];\n}\n\n/**\n * Get the height of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Height.\n * @api\n */\nexport function getHeight(extent) {\n  return extent[3] - extent[1];\n}\n\n/**\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {number} Intersection area.\n */\nexport function getIntersectionArea(extent1, extent2) {\n  const intersection = getIntersection(extent1, extent2);\n  return getArea(intersection);\n}\n\n/**\n * Get the intersection of two extents.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @param {Extent} [dest] Optional extent to populate with intersection.\n * @return {Extent} Intersecting extent.\n * @api\n */\nexport function getIntersection(extent1, extent2, dest) {\n  const intersection = dest ? dest : createEmpty();\n  if (intersects(extent1, extent2)) {\n    if (extent1[0] > extent2[0]) {\n      intersection[0] = extent1[0];\n    } else {\n      intersection[0] = extent2[0];\n    }\n    if (extent1[1] > extent2[1]) {\n      intersection[1] = extent1[1];\n    } else {\n      intersection[1] = extent2[1];\n    }\n    if (extent1[2] < extent2[2]) {\n      intersection[2] = extent1[2];\n    } else {\n      intersection[2] = extent2[2];\n    }\n    if (extent1[3] < extent2[3]) {\n      intersection[3] = extent1[3];\n    } else {\n      intersection[3] = extent2[3];\n    }\n  } else {\n    createOrUpdateEmpty(intersection);\n  }\n  return intersection;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @return {number} Margin.\n */\nexport function getMargin(extent) {\n  return getWidth(extent) + getHeight(extent);\n}\n\n/**\n * Get the size (width, height) of an extent.\n * @param {Extent} extent The extent.\n * @return {import(\"./size.js\").Size} The extent size.\n * @api\n */\nexport function getSize(extent) {\n  return [extent[2] - extent[0], extent[3] - extent[1]];\n}\n\n/**\n * Get the top left coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Top left coordinate.\n * @api\n */\nexport function getTopLeft(extent) {\n  return [extent[0], extent[3]];\n}\n\n/**\n * Get the top right coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Top right coordinate.\n * @api\n */\nexport function getTopRight(extent) {\n  return [extent[2], extent[3]];\n}\n\n/**\n * Get the width of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Width.\n * @api\n */\nexport function getWidth(extent) {\n  return extent[2] - extent[0];\n}\n\n/**\n * Determine if one extent intersects another.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent.\n * @return {boolean} The two extents intersect.\n * @api\n */\nexport function intersects(extent1, extent2) {\n  return extent1[0] <= extent2[2] && extent1[2] >= extent2[0] && extent1[1] <= extent2[3] && extent1[3] >= extent2[1];\n}\n\n/**\n * Determine if an extent is empty.\n * @param {Extent} extent Extent.\n * @return {boolean} Is empty.\n * @api\n */\nexport function isEmpty(extent) {\n  return extent[2] < extent[0] || extent[3] < extent[1];\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function returnOrUpdate(extent, dest) {\n  if (dest) {\n    dest[0] = extent[0];\n    dest[1] = extent[1];\n    dest[2] = extent[2];\n    dest[3] = extent[3];\n    return dest;\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {number} value Value.\n */\nexport function scaleFromCenter(extent, value) {\n  const deltaX = (extent[2] - extent[0]) / 2 * (value - 1);\n  const deltaY = (extent[3] - extent[1]) / 2 * (value - 1);\n  extent[0] -= deltaX;\n  extent[2] += deltaX;\n  extent[1] -= deltaY;\n  extent[3] += deltaY;\n}\n\n/**\n * Determine if the segment between two coordinates intersects (crosses,\n * touches, or is contained by) the provided extent.\n * @param {Extent} extent The extent.\n * @param {import(\"./coordinate.js\").Coordinate} start Segment start coordinate.\n * @param {import(\"./coordinate.js\").Coordinate} end Segment end coordinate.\n * @return {boolean} The segment intersects the extent.\n */\nexport function intersectsSegment(extent, start, end) {\n  let intersects = false;\n  const startRel = coordinateRelationship(extent, start);\n  const endRel = coordinateRelationship(extent, end);\n  if (startRel === Relationship.INTERSECTING || endRel === Relationship.INTERSECTING) {\n    intersects = true;\n  } else {\n    const minX = extent[0];\n    const minY = extent[1];\n    const maxX = extent[2];\n    const maxY = extent[3];\n    const startX = start[0];\n    const startY = start[1];\n    const endX = end[0];\n    const endY = end[1];\n    const slope = (endY - startY) / (endX - startX);\n    let x, y;\n    if (!!(endRel & Relationship.ABOVE) && !(startRel & Relationship.ABOVE)) {\n      // potentially intersects top\n      x = endX - (endY - maxY) / slope;\n      intersects = x >= minX && x <= maxX;\n    }\n    if (!intersects && !!(endRel & Relationship.RIGHT) && !(startRel & Relationship.RIGHT)) {\n      // potentially intersects right\n      y = endY - (endX - maxX) * slope;\n      intersects = y >= minY && y <= maxY;\n    }\n    if (!intersects && !!(endRel & Relationship.BELOW) && !(startRel & Relationship.BELOW)) {\n      // potentially intersects bottom\n      x = endX - (endY - minY) / slope;\n      intersects = x >= minX && x <= maxX;\n    }\n    if (!intersects && !!(endRel & Relationship.LEFT) && !(startRel & Relationship.LEFT)) {\n      // potentially intersects left\n      y = endY - (endX - minX) * slope;\n      intersects = y >= minY && y <= maxY;\n    }\n  }\n  return intersects;\n}\n\n/**\n * Apply a transform function to the extent.\n * @param {Extent} extent Extent.\n * @param {import(\"./proj.js\").TransformFunction} transformFn Transform function.\n * Called with `[minX, minY, maxX, maxY]` extent coordinates.\n * @param {Extent} [dest] Destination extent.\n * @param {number} [stops] Number of stops per side used for the transform.\n * By default only the corners are used.\n * @return {Extent} Extent.\n * @api\n */\nexport function applyTransform(extent, transformFn, dest, stops) {\n  let coordinates = [];\n  if (stops > 1) {\n    const width = extent[2] - extent[0];\n    const height = extent[3] - extent[1];\n    for (let i = 0; i < stops; ++i) {\n      coordinates.push(extent[0] + width * i / stops, extent[1], extent[2], extent[1] + height * i / stops, extent[2] - width * i / stops, extent[3], extent[0], extent[3] - height * i / stops);\n    }\n  } else {\n    coordinates = [extent[0], extent[1], extent[2], extent[1], extent[2], extent[3], extent[0], extent[3]];\n  }\n  transformFn(coordinates, coordinates, 2);\n  const xs = [];\n  const ys = [];\n  for (let i = 0, l = coordinates.length; i < l; i += 2) {\n    xs.push(coordinates[i]);\n    ys.push(coordinates[i + 1]);\n  }\n  return _boundingExtentXYs(xs, ys, dest);\n}\n\n/**\n * Modifies the provided extent in-place to be within the real world\n * extent.\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./proj/Projection.js\").default} projection Projection\n * @return {Extent} The extent within the real world extent.\n */\nexport function wrapX(extent, projection) {\n  const projectionExtent = projection.getExtent();\n  const center = getCenter(extent);\n  if (projection.canWrapX() && (center[0] < projectionExtent[0] || center[0] >= projectionExtent[2])) {\n    const worldWidth = getWidth(projectionExtent);\n    const worldsAway = Math.floor((center[0] - projectionExtent[0]) / worldWidth);\n    const offset = worldsAway * worldWidth;\n    extent[0] -= offset;\n    extent[2] -= offset;\n  }\n  return extent;\n}\n\n/**\n * Fits the extent to the real world\n *\n * If the extent does not cross the anti meridian, this will return the extent in an array\n * If the extent crosses the anti meridian, the extent will be sliced, so each part fits within the\n * real world\n *\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./proj/Projection.js\").default} projection Projection\n * @return {Array<Extent>} The extent within the real world extent.\n */\nexport function wrapAndSliceX(extent, projection) {\n  if (projection.canWrapX()) {\n    const projectionExtent = projection.getExtent();\n    if (!isFinite(extent[0]) || !isFinite(extent[2])) {\n      return [[projectionExtent[0], extent[1], projectionExtent[2], extent[3]]];\n    }\n    wrapX(extent, projection);\n    const worldWidth = getWidth(projectionExtent);\n    if (getWidth(extent) > worldWidth) {\n      // the extent wraps around on itself\n      return [[projectionExtent[0], extent[1], projectionExtent[2], extent[3]]];\n    } else if (extent[0] < projectionExtent[0]) {\n      // the extent crosses the anti meridian, so it needs to be sliced\n      return [[extent[0] + worldWidth, extent[1], projectionExtent[2], extent[3]], [projectionExtent[0], extent[1], extent[2], extent[3]]];\n    } else if (extent[2] > projectionExtent[2]) {\n      // the extent crosses the anti meridian, so it needs to be sliced\n      return [[extent[0], extent[1], projectionExtent[2], extent[3]], [projectionExtent[0], extent[1], extent[2] - worldWidth, extent[3]]];\n    }\n  }\n  return [extent];\n}","map":{"version":3,"names":["Relationship","assert","boundingExtent","coordinates","extent","createEmpty","i","ii","length","extendCoordinate","_boundingExtentXYs","xs","ys","dest","minX","Math","min","apply","minY","maxX","max","maxY","createOrUpdate","buffer","value","clone","slice","closestSquaredDistanceXY","x","y","dx","dy","containsCoordinate","coordinate","containsXY","containsExtent","extent1","extent2","coordinateRelationship","relationship","UNKNOWN","LEFT","RIGHT","BELOW","ABOVE","INTERSECTING","Infinity","createOrUpdateEmpty","createOrUpdateFromCoordinate","createOrUpdateFromCoordinates","extendCoordinates","createOrUpdateFromFlatCoordinates","flatCoordinates","offset","end","stride","extendFlatCoordinates","createOrUpdateFromRings","rings","extendRings","equals","approximatelyEquals","tolerance","abs","extend","extendXY","forEachCorner","callback","val","getBottomLeft","getBottomRight","getTopRight","getTopLeft","getArea","area","isEmpty","getWidth","getHeight","getCenter","getCorner","corner","getEnlargedArea","getForViewAndSize","center","resolution","rotation","size","x0","y0","x1","y1","x2","y2","x3","y3","getRotatedViewport","cosRotation","cos","sinRotation","sin","xCos","xSin","yCos","ySin","getIntersectionArea","intersection","getIntersection","intersects","getMargin","getSize","returnOrUpdate","scaleFromCenter","deltaX","deltaY","intersectsSegment","start","startRel","endRel","startX","startY","endX","endY","slope","applyTransform","transformFn","stops","width","height","push","l","wrapX","projection","projectionExtent","getExtent","canWrapX","worldWidth","worldsAway","floor","wrapAndSliceX","isFinite"],"sources":["/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/ol/extent.js"],"sourcesContent":["/**\n * @module ol/extent\n */\nimport Relationship from './extent/Relationship.js';\nimport {assert} from './asserts.js';\n\n/**\n * An array of numbers representing an extent: `[minx, miny, maxx, maxy]`.\n * @typedef {Array<number>} Extent\n * @api\n */\n\n/**\n * Extent corner.\n * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} Corner\n */\n\n/**\n * Build an extent that includes all given coordinates.\n *\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @return {Extent} Bounding extent.\n * @api\n */\nexport function boundingExtent(coordinates) {\n  const extent = createEmpty();\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n    extendCoordinate(extent, coordinates[i]);\n  }\n  return extent;\n}\n\n/**\n * @param {Array<number>} xs Xs.\n * @param {Array<number>} ys Ys.\n * @param {Extent} [dest] Destination extent.\n * @private\n * @return {Extent} Extent.\n */\nfunction _boundingExtentXYs(xs, ys, dest) {\n  const minX = Math.min.apply(null, xs);\n  const minY = Math.min.apply(null, ys);\n  const maxX = Math.max.apply(null, xs);\n  const maxY = Math.max.apply(null, ys);\n  return createOrUpdate(minX, minY, maxX, maxY, dest);\n}\n\n/**\n * Return extent increased by the provided value.\n * @param {Extent} extent Extent.\n * @param {number} value The amount by which the extent should be buffered.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n * @api\n */\nexport function buffer(extent, value, dest) {\n  if (dest) {\n    dest[0] = extent[0] - value;\n    dest[1] = extent[1] - value;\n    dest[2] = extent[2] + value;\n    dest[3] = extent[3] + value;\n    return dest;\n  }\n  return [\n    extent[0] - value,\n    extent[1] - value,\n    extent[2] + value,\n    extent[3] + value,\n  ];\n}\n\n/**\n * Creates a clone of an extent.\n *\n * @param {Extent} extent Extent to clone.\n * @param {Extent} [dest] Extent.\n * @return {Extent} The clone.\n */\nexport function clone(extent, dest) {\n  if (dest) {\n    dest[0] = extent[0];\n    dest[1] = extent[1];\n    dest[2] = extent[2];\n    dest[3] = extent[3];\n    return dest;\n  }\n  return extent.slice();\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {number} Closest squared distance.\n */\nexport function closestSquaredDistanceXY(extent, x, y) {\n  let dx, dy;\n  if (x < extent[0]) {\n    dx = extent[0] - x;\n  } else if (extent[2] < x) {\n    dx = x - extent[2];\n  } else {\n    dx = 0;\n  }\n  if (y < extent[1]) {\n    dy = extent[1] - y;\n  } else if (extent[3] < y) {\n    dy = y - extent[3];\n  } else {\n    dy = 0;\n  }\n  return dx * dx + dy * dy;\n}\n\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @return {boolean} The coordinate is contained in the extent.\n * @api\n */\nexport function containsCoordinate(extent, coordinate) {\n  return containsXY(extent, coordinate[0], coordinate[1]);\n}\n\n/**\n * Check if one extent contains another.\n *\n * An extent is deemed contained if it lies completely within the other extent,\n * including if they share one or more edges.\n *\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {boolean} The second extent is contained by or on the edge of the\n *     first.\n * @api\n */\nexport function containsExtent(extent1, extent2) {\n  return (\n    extent1[0] <= extent2[0] &&\n    extent2[2] <= extent1[2] &&\n    extent1[1] <= extent2[1] &&\n    extent2[3] <= extent1[3]\n  );\n}\n\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {Extent} extent Extent.\n * @param {number} x X coordinate.\n * @param {number} y Y coordinate.\n * @return {boolean} The x, y values are contained in the extent.\n * @api\n */\nexport function containsXY(extent, x, y) {\n  return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];\n}\n\n/**\n * Get the relationship between a coordinate and extent.\n * @param {Extent} extent The extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate The coordinate.\n * @return {import(\"./extent/Relationship.js\").default} The relationship (bitwise compare with\n *     import(\"./extent/Relationship.js\").Relationship).\n */\nexport function coordinateRelationship(extent, coordinate) {\n  const minX = extent[0];\n  const minY = extent[1];\n  const maxX = extent[2];\n  const maxY = extent[3];\n  const x = coordinate[0];\n  const y = coordinate[1];\n  let relationship = Relationship.UNKNOWN;\n  if (x < minX) {\n    relationship = relationship | Relationship.LEFT;\n  } else if (x > maxX) {\n    relationship = relationship | Relationship.RIGHT;\n  }\n  if (y < minY) {\n    relationship = relationship | Relationship.BELOW;\n  } else if (y > maxY) {\n    relationship = relationship | Relationship.ABOVE;\n  }\n  if (relationship === Relationship.UNKNOWN) {\n    relationship = Relationship.INTERSECTING;\n  }\n  return relationship;\n}\n\n/**\n * Create an empty extent.\n * @return {Extent} Empty extent.\n * @api\n */\nexport function createEmpty() {\n  return [Infinity, Infinity, -Infinity, -Infinity];\n}\n\n/**\n * Create a new extent or update the provided extent.\n * @param {number} minX Minimum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxX Maximum X.\n * @param {number} maxY Maximum Y.\n * @param {Extent} [dest] Destination extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdate(minX, minY, maxX, maxY, dest) {\n  if (dest) {\n    dest[0] = minX;\n    dest[1] = minY;\n    dest[2] = maxX;\n    dest[3] = maxY;\n    return dest;\n  }\n  return [minX, minY, maxX, maxY];\n}\n\n/**\n * Create a new empty extent or make the provided one empty.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateEmpty(dest) {\n  return createOrUpdate(Infinity, Infinity, -Infinity, -Infinity, dest);\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromCoordinate(coordinate, dest) {\n  const x = coordinate[0];\n  const y = coordinate[1];\n  return createOrUpdate(x, y, x, y, dest);\n}\n\n/**\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromCoordinates(coordinates, dest) {\n  const extent = createOrUpdateEmpty(dest);\n  return extendCoordinates(extent, coordinates);\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromFlatCoordinates(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  dest\n) {\n  const extent = createOrUpdateEmpty(dest);\n  return extendFlatCoordinates(extent, flatCoordinates, offset, end, stride);\n}\n\n/**\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromRings(rings, dest) {\n  const extent = createOrUpdateEmpty(dest);\n  return extendRings(extent, rings);\n}\n\n/**\n * Determine if two extents are equivalent.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {boolean} The two extents are equivalent.\n * @api\n */\nexport function equals(extent1, extent2) {\n  return (\n    extent1[0] == extent2[0] &&\n    extent1[2] == extent2[2] &&\n    extent1[1] == extent2[1] &&\n    extent1[3] == extent2[3]\n  );\n}\n\n/**\n * Determine if two extents are approximately equivalent.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @param {number} tolerance Tolerance in extent coordinate units.\n * @return {boolean} The two extents differ by less than the tolerance.\n */\nexport function approximatelyEquals(extent1, extent2, tolerance) {\n  return (\n    Math.abs(extent1[0] - extent2[0]) < tolerance &&\n    Math.abs(extent1[2] - extent2[2]) < tolerance &&\n    Math.abs(extent1[1] - extent2[1]) < tolerance &&\n    Math.abs(extent1[3] - extent2[3]) < tolerance\n  );\n}\n\n/**\n * Modify an extent to include another extent.\n * @param {Extent} extent1 The extent to be modified.\n * @param {Extent} extent2 The extent that will be included in the first.\n * @return {Extent} A reference to the first (extended) extent.\n * @api\n */\nexport function extend(extent1, extent2) {\n  if (extent2[0] < extent1[0]) {\n    extent1[0] = extent2[0];\n  }\n  if (extent2[2] > extent1[2]) {\n    extent1[2] = extent2[2];\n  }\n  if (extent2[1] < extent1[1]) {\n    extent1[1] = extent2[1];\n  }\n  if (extent2[3] > extent1[3]) {\n    extent1[3] = extent2[3];\n  }\n  return extent1;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n */\nexport function extendCoordinate(extent, coordinate) {\n  if (coordinate[0] < extent[0]) {\n    extent[0] = coordinate[0];\n  }\n  if (coordinate[0] > extent[2]) {\n    extent[2] = coordinate[0];\n  }\n  if (coordinate[1] < extent[1]) {\n    extent[1] = coordinate[1];\n  }\n  if (coordinate[1] > extent[3]) {\n    extent[3] = coordinate[1];\n  }\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @return {Extent} Extent.\n */\nexport function extendCoordinates(extent, coordinates) {\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n    extendCoordinate(extent, coordinates[i]);\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {Extent} Extent.\n */\nexport function extendFlatCoordinates(\n  extent,\n  flatCoordinates,\n  offset,\n  end,\n  stride\n) {\n  for (; offset < end; offset += stride) {\n    extendXY(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\n * @return {Extent} Extent.\n */\nexport function extendRings(extent, rings) {\n  for (let i = 0, ii = rings.length; i < ii; ++i) {\n    extendCoordinates(extent, rings[i]);\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n */\nexport function extendXY(extent, x, y) {\n  extent[0] = Math.min(extent[0], x);\n  extent[1] = Math.min(extent[1], y);\n  extent[2] = Math.max(extent[2], x);\n  extent[3] = Math.max(extent[3], y);\n}\n\n/**\n * This function calls `callback` for each corner of the extent. If the\n * callback returns a truthy value the function returns that value\n * immediately. Otherwise the function returns `false`.\n * @param {Extent} extent Extent.\n * @param {function(import(\"./coordinate.js\").Coordinate): S} callback Callback.\n * @return {S|boolean} Value.\n * @template S\n */\nexport function forEachCorner(extent, callback) {\n  let val;\n  val = callback(getBottomLeft(extent));\n  if (val) {\n    return val;\n  }\n  val = callback(getBottomRight(extent));\n  if (val) {\n    return val;\n  }\n  val = callback(getTopRight(extent));\n  if (val) {\n    return val;\n  }\n  val = callback(getTopLeft(extent));\n  if (val) {\n    return val;\n  }\n  return false;\n}\n\n/**\n * Get the size of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Area.\n * @api\n */\nexport function getArea(extent) {\n  let area = 0;\n  if (!isEmpty(extent)) {\n    area = getWidth(extent) * getHeight(extent);\n  }\n  return area;\n}\n\n/**\n * Get the bottom left coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Bottom left coordinate.\n * @api\n */\nexport function getBottomLeft(extent) {\n  return [extent[0], extent[1]];\n}\n\n/**\n * Get the bottom right coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Bottom right coordinate.\n * @api\n */\nexport function getBottomRight(extent) {\n  return [extent[2], extent[1]];\n}\n\n/**\n * Get the center coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Center.\n * @api\n */\nexport function getCenter(extent) {\n  return [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];\n}\n\n/**\n * Get a corner coordinate of an extent.\n * @param {Extent} extent Extent.\n * @param {Corner} corner Corner.\n * @return {import(\"./coordinate.js\").Coordinate} Corner coordinate.\n */\nexport function getCorner(extent, corner) {\n  let coordinate;\n  if (corner === 'bottom-left') {\n    coordinate = getBottomLeft(extent);\n  } else if (corner === 'bottom-right') {\n    coordinate = getBottomRight(extent);\n  } else if (corner === 'top-left') {\n    coordinate = getTopLeft(extent);\n  } else if (corner === 'top-right') {\n    coordinate = getTopRight(extent);\n  } else {\n    assert(false, 13); // Invalid corner\n  }\n  return coordinate;\n}\n\n/**\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {number} Enlarged area.\n */\nexport function getEnlargedArea(extent1, extent2) {\n  const minX = Math.min(extent1[0], extent2[0]);\n  const minY = Math.min(extent1[1], extent2[1]);\n  const maxX = Math.max(extent1[2], extent2[2]);\n  const maxY = Math.max(extent1[3], extent2[3]);\n  return (maxX - minX) * (maxY - minY);\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} center Center.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {import(\"./size.js\").Size} size Size.\n * @param {Extent} [dest] Destination extent.\n * @return {Extent} Extent.\n */\nexport function getForViewAndSize(center, resolution, rotation, size, dest) {\n  const [x0, y0, x1, y1, x2, y2, x3, y3] = getRotatedViewport(\n    center,\n    resolution,\n    rotation,\n    size\n  );\n  return createOrUpdate(\n    Math.min(x0, x1, x2, x3),\n    Math.min(y0, y1, y2, y3),\n    Math.max(x0, x1, x2, x3),\n    Math.max(y0, y1, y2, y3),\n    dest\n  );\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} center Center.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {import(\"./size.js\").Size} size Size.\n * @return {Array<number>} Linear ring representing the viewport.\n */\nexport function getRotatedViewport(center, resolution, rotation, size) {\n  const dx = (resolution * size[0]) / 2;\n  const dy = (resolution * size[1]) / 2;\n  const cosRotation = Math.cos(rotation);\n  const sinRotation = Math.sin(rotation);\n  const xCos = dx * cosRotation;\n  const xSin = dx * sinRotation;\n  const yCos = dy * cosRotation;\n  const ySin = dy * sinRotation;\n  const x = center[0];\n  const y = center[1];\n  return [\n    x - xCos + ySin,\n    y - xSin - yCos,\n    x - xCos - ySin,\n    y - xSin + yCos,\n    x + xCos - ySin,\n    y + xSin + yCos,\n    x + xCos + ySin,\n    y + xSin - yCos,\n    x - xCos + ySin,\n    y - xSin - yCos,\n  ];\n}\n\n/**\n * Get the height of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Height.\n * @api\n */\nexport function getHeight(extent) {\n  return extent[3] - extent[1];\n}\n\n/**\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {number} Intersection area.\n */\nexport function getIntersectionArea(extent1, extent2) {\n  const intersection = getIntersection(extent1, extent2);\n  return getArea(intersection);\n}\n\n/**\n * Get the intersection of two extents.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @param {Extent} [dest] Optional extent to populate with intersection.\n * @return {Extent} Intersecting extent.\n * @api\n */\nexport function getIntersection(extent1, extent2, dest) {\n  const intersection = dest ? dest : createEmpty();\n  if (intersects(extent1, extent2)) {\n    if (extent1[0] > extent2[0]) {\n      intersection[0] = extent1[0];\n    } else {\n      intersection[0] = extent2[0];\n    }\n    if (extent1[1] > extent2[1]) {\n      intersection[1] = extent1[1];\n    } else {\n      intersection[1] = extent2[1];\n    }\n    if (extent1[2] < extent2[2]) {\n      intersection[2] = extent1[2];\n    } else {\n      intersection[2] = extent2[2];\n    }\n    if (extent1[3] < extent2[3]) {\n      intersection[3] = extent1[3];\n    } else {\n      intersection[3] = extent2[3];\n    }\n  } else {\n    createOrUpdateEmpty(intersection);\n  }\n  return intersection;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @return {number} Margin.\n */\nexport function getMargin(extent) {\n  return getWidth(extent) + getHeight(extent);\n}\n\n/**\n * Get the size (width, height) of an extent.\n * @param {Extent} extent The extent.\n * @return {import(\"./size.js\").Size} The extent size.\n * @api\n */\nexport function getSize(extent) {\n  return [extent[2] - extent[0], extent[3] - extent[1]];\n}\n\n/**\n * Get the top left coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Top left coordinate.\n * @api\n */\nexport function getTopLeft(extent) {\n  return [extent[0], extent[3]];\n}\n\n/**\n * Get the top right coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Top right coordinate.\n * @api\n */\nexport function getTopRight(extent) {\n  return [extent[2], extent[3]];\n}\n\n/**\n * Get the width of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Width.\n * @api\n */\nexport function getWidth(extent) {\n  return extent[2] - extent[0];\n}\n\n/**\n * Determine if one extent intersects another.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent.\n * @return {boolean} The two extents intersect.\n * @api\n */\nexport function intersects(extent1, extent2) {\n  return (\n    extent1[0] <= extent2[2] &&\n    extent1[2] >= extent2[0] &&\n    extent1[1] <= extent2[3] &&\n    extent1[3] >= extent2[1]\n  );\n}\n\n/**\n * Determine if an extent is empty.\n * @param {Extent} extent Extent.\n * @return {boolean} Is empty.\n * @api\n */\nexport function isEmpty(extent) {\n  return extent[2] < extent[0] || extent[3] < extent[1];\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function returnOrUpdate(extent, dest) {\n  if (dest) {\n    dest[0] = extent[0];\n    dest[1] = extent[1];\n    dest[2] = extent[2];\n    dest[3] = extent[3];\n    return dest;\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {number} value Value.\n */\nexport function scaleFromCenter(extent, value) {\n  const deltaX = ((extent[2] - extent[0]) / 2) * (value - 1);\n  const deltaY = ((extent[3] - extent[1]) / 2) * (value - 1);\n  extent[0] -= deltaX;\n  extent[2] += deltaX;\n  extent[1] -= deltaY;\n  extent[3] += deltaY;\n}\n\n/**\n * Determine if the segment between two coordinates intersects (crosses,\n * touches, or is contained by) the provided extent.\n * @param {Extent} extent The extent.\n * @param {import(\"./coordinate.js\").Coordinate} start Segment start coordinate.\n * @param {import(\"./coordinate.js\").Coordinate} end Segment end coordinate.\n * @return {boolean} The segment intersects the extent.\n */\nexport function intersectsSegment(extent, start, end) {\n  let intersects = false;\n  const startRel = coordinateRelationship(extent, start);\n  const endRel = coordinateRelationship(extent, end);\n  if (\n    startRel === Relationship.INTERSECTING ||\n    endRel === Relationship.INTERSECTING\n  ) {\n    intersects = true;\n  } else {\n    const minX = extent[0];\n    const minY = extent[1];\n    const maxX = extent[2];\n    const maxY = extent[3];\n    const startX = start[0];\n    const startY = start[1];\n    const endX = end[0];\n    const endY = end[1];\n    const slope = (endY - startY) / (endX - startX);\n    let x, y;\n    if (!!(endRel & Relationship.ABOVE) && !(startRel & Relationship.ABOVE)) {\n      // potentially intersects top\n      x = endX - (endY - maxY) / slope;\n      intersects = x >= minX && x <= maxX;\n    }\n    if (\n      !intersects &&\n      !!(endRel & Relationship.RIGHT) &&\n      !(startRel & Relationship.RIGHT)\n    ) {\n      // potentially intersects right\n      y = endY - (endX - maxX) * slope;\n      intersects = y >= minY && y <= maxY;\n    }\n    if (\n      !intersects &&\n      !!(endRel & Relationship.BELOW) &&\n      !(startRel & Relationship.BELOW)\n    ) {\n      // potentially intersects bottom\n      x = endX - (endY - minY) / slope;\n      intersects = x >= minX && x <= maxX;\n    }\n    if (\n      !intersects &&\n      !!(endRel & Relationship.LEFT) &&\n      !(startRel & Relationship.LEFT)\n    ) {\n      // potentially intersects left\n      y = endY - (endX - minX) * slope;\n      intersects = y >= minY && y <= maxY;\n    }\n  }\n  return intersects;\n}\n\n/**\n * Apply a transform function to the extent.\n * @param {Extent} extent Extent.\n * @param {import(\"./proj.js\").TransformFunction} transformFn Transform function.\n * Called with `[minX, minY, maxX, maxY]` extent coordinates.\n * @param {Extent} [dest] Destination extent.\n * @param {number} [stops] Number of stops per side used for the transform.\n * By default only the corners are used.\n * @return {Extent} Extent.\n * @api\n */\nexport function applyTransform(extent, transformFn, dest, stops) {\n  let coordinates = [];\n  if (stops > 1) {\n    const width = extent[2] - extent[0];\n    const height = extent[3] - extent[1];\n    for (let i = 0; i < stops; ++i) {\n      coordinates.push(\n        extent[0] + (width * i) / stops,\n        extent[1],\n        extent[2],\n        extent[1] + (height * i) / stops,\n        extent[2] - (width * i) / stops,\n        extent[3],\n        extent[0],\n        extent[3] - (height * i) / stops\n      );\n    }\n  } else {\n    coordinates = [\n      extent[0],\n      extent[1],\n      extent[2],\n      extent[1],\n      extent[2],\n      extent[3],\n      extent[0],\n      extent[3],\n    ];\n  }\n  transformFn(coordinates, coordinates, 2);\n  const xs = [];\n  const ys = [];\n  for (let i = 0, l = coordinates.length; i < l; i += 2) {\n    xs.push(coordinates[i]);\n    ys.push(coordinates[i + 1]);\n  }\n  return _boundingExtentXYs(xs, ys, dest);\n}\n\n/**\n * Modifies the provided extent in-place to be within the real world\n * extent.\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./proj/Projection.js\").default} projection Projection\n * @return {Extent} The extent within the real world extent.\n */\nexport function wrapX(extent, projection) {\n  const projectionExtent = projection.getExtent();\n  const center = getCenter(extent);\n  if (\n    projection.canWrapX() &&\n    (center[0] < projectionExtent[0] || center[0] >= projectionExtent[2])\n  ) {\n    const worldWidth = getWidth(projectionExtent);\n    const worldsAway = Math.floor(\n      (center[0] - projectionExtent[0]) / worldWidth\n    );\n    const offset = worldsAway * worldWidth;\n    extent[0] -= offset;\n    extent[2] -= offset;\n  }\n  return extent;\n}\n\n/**\n * Fits the extent to the real world\n *\n * If the extent does not cross the anti meridian, this will return the extent in an array\n * If the extent crosses the anti meridian, the extent will be sliced, so each part fits within the\n * real world\n *\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./proj/Projection.js\").default} projection Projection\n * @return {Array<Extent>} The extent within the real world extent.\n */\nexport function wrapAndSliceX(extent, projection) {\n  if (projection.canWrapX()) {\n    const projectionExtent = projection.getExtent();\n\n    if (!isFinite(extent[0]) || !isFinite(extent[2])) {\n      return [[projectionExtent[0], extent[1], projectionExtent[2], extent[3]]];\n    }\n\n    wrapX(extent, projection);\n    const worldWidth = getWidth(projectionExtent);\n\n    if (getWidth(extent) > worldWidth) {\n      // the extent wraps around on itself\n      return [[projectionExtent[0], extent[1], projectionExtent[2], extent[3]]];\n    } else if (extent[0] < projectionExtent[0]) {\n      // the extent crosses the anti meridian, so it needs to be sliced\n      return [\n        [extent[0] + worldWidth, extent[1], projectionExtent[2], extent[3]],\n        [projectionExtent[0], extent[1], extent[2], extent[3]],\n      ];\n    } else if (extent[2] > projectionExtent[2]) {\n      // the extent crosses the anti meridian, so it needs to be sliced\n      return [\n        [extent[0], extent[1], projectionExtent[2], extent[3]],\n        [projectionExtent[0], extent[1], extent[2] - worldWidth, extent[3]],\n      ];\n    }\n  }\n\n  return [extent];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}