{"ast":null,"code":"import _classCallCheck from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * @module ol/geom/LinearRing\n */\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { assignClosestPoint, maxSquaredDelta } from './flat/closest.js';\nimport { closestSquaredDistanceXY } from '../extent.js';\nimport { deflateCoordinates } from './flat/deflate.js';\nimport { douglasPeucker } from './flat/simplify.js';\nimport { inflateCoordinates } from './flat/inflate.js';\nimport { linearRing as linearRingArea } from './flat/area.js';\n\n/**\n * @classdesc\n * Linear ring geometry. Only used as part of polygon; cannot be rendered\n * on its own.\n *\n * @api\n */\nvar LinearRing = /*#__PURE__*/function (_SimpleGeometry) {\n  _inherits(LinearRing, _SimpleGeometry);\n  var _super = _createSuper(LinearRing);\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  function LinearRing(coordinates, layout) {\n    var _this;\n    _classCallCheck(this, LinearRing);\n    _this = _super.call(this);\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.maxDeltaRevision_ = -1;\n    if (layout !== undefined && !Array.isArray(coordinates[0])) {\n      _this.setFlatCoordinates(layout, /** @type {Array<number>} */coordinates);\n    } else {\n      _this.setCoordinates( /** @type {Array<import(\"../coordinate.js\").Coordinate>} */\n      coordinates, layout);\n    }\n    return _this;\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!LinearRing} Clone.\n   * @api\n   */\n  _createClass(LinearRing, [{\n    key: \"clone\",\n    value: function clone() {\n      return new LinearRing(this.flatCoordinates.slice(), this.layout);\n    }\n\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n     * @param {number} minSquaredDistance Minimum squared distance.\n     * @return {number} Minimum squared distance.\n     */\n  }, {\n    key: \"closestPointXY\",\n    value: function closestPointXY(x, y, closestPoint, minSquaredDistance) {\n      if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n        return minSquaredDistance;\n      }\n      if (this.maxDeltaRevision_ != this.getRevision()) {\n        this.maxDelta_ = Math.sqrt(maxSquaredDelta(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));\n        this.maxDeltaRevision_ = this.getRevision();\n      }\n      return assignClosestPoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n    }\n\n    /**\n     * Return the area of the linear ring on projected plane.\n     * @return {number} Area (on projected plane).\n     * @api\n     */\n  }, {\n    key: \"getArea\",\n    value: function getArea() {\n      return linearRingArea(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n    }\n\n    /**\n     * Return the coordinates of the linear ring.\n     * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n     * @api\n     */\n  }, {\n    key: \"getCoordinates\",\n    value: function getCoordinates() {\n      return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n    }\n\n    /**\n     * @param {number} squaredTolerance Squared tolerance.\n     * @return {LinearRing} Simplified LinearRing.\n     * @protected\n     */\n  }, {\n    key: \"getSimplifiedGeometryInternal\",\n    value: function getSimplifiedGeometryInternal(squaredTolerance) {\n      var simplifiedFlatCoordinates = [];\n      simplifiedFlatCoordinates.length = douglasPeucker(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);\n      return new LinearRing(simplifiedFlatCoordinates, 'XY');\n    }\n\n    /**\n     * Get the type of this geometry.\n     * @return {import(\"./Geometry.js\").Type} Geometry type.\n     * @api\n     */\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return 'LinearRing';\n    }\n\n    /**\n     * Test if the geometry and the passed extent intersect.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @return {boolean} `true` if the geometry and the extent intersect.\n     * @api\n     */\n  }, {\n    key: \"intersectsExtent\",\n    value: function intersectsExtent(extent) {\n      return false;\n    }\n\n    /**\n     * Set the coordinates of the linear ring.\n     * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n     * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n     * @api\n     */\n  }, {\n    key: \"setCoordinates\",\n    value: function setCoordinates(coordinates, layout) {\n      this.setLayout(layout, coordinates, 1);\n      if (!this.flatCoordinates) {\n        this.flatCoordinates = [];\n      }\n      this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);\n      this.changed();\n    }\n  }]);\n  return LinearRing;\n}(SimpleGeometry);\nexport default LinearRing;","map":{"version":3,"names":["SimpleGeometry","assignClosestPoint","maxSquaredDelta","closestSquaredDistanceXY","deflateCoordinates","douglasPeucker","inflateCoordinates","linearRing","linearRingArea","LinearRing","_SimpleGeometry","_inherits","_super","_createSuper","coordinates","layout","_this","_classCallCheck","call","maxDelta_","maxDeltaRevision_","undefined","Array","isArray","setFlatCoordinates","setCoordinates","_createClass","key","value","clone","flatCoordinates","slice","closestPointXY","x","y","closestPoint","minSquaredDistance","getExtent","getRevision","Math","sqrt","length","stride","getArea","getCoordinates","getSimplifiedGeometryInternal","squaredTolerance","simplifiedFlatCoordinates","getType","intersectsExtent","extent","setLayout","changed"],"sources":["/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/ol/geom/LinearRing.js"],"sourcesContent":["/**\n * @module ol/geom/LinearRing\n */\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {assignClosestPoint, maxSquaredDelta} from './flat/closest.js';\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport {deflateCoordinates} from './flat/deflate.js';\nimport {douglasPeucker} from './flat/simplify.js';\nimport {inflateCoordinates} from './flat/inflate.js';\nimport {linearRing as linearRingArea} from './flat/area.js';\n\n/**\n * @classdesc\n * Linear ring geometry. Only used as part of polygon; cannot be rendered\n * on its own.\n *\n * @api\n */\nclass LinearRing extends SimpleGeometry {\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(coordinates, layout) {\n    super();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    if (layout !== undefined && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(\n        layout,\n        /** @type {Array<number>} */ (coordinates)\n      );\n    } else {\n      this.setCoordinates(\n        /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (\n          coordinates\n        ),\n        layout\n      );\n    }\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!LinearRing} Clone.\n   * @api\n   */\n  clone() {\n    return new LinearRing(this.flatCoordinates.slice(), this.layout);\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(\n        maxSquaredDelta(\n          this.flatCoordinates,\n          0,\n          this.flatCoordinates.length,\n          this.stride,\n          0\n        )\n      );\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestPoint(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      this.maxDelta_,\n      true,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance\n    );\n  }\n\n  /**\n   * Return the area of the linear ring on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n  getArea() {\n    return linearRingArea(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride\n    );\n  }\n\n  /**\n   * Return the coordinates of the linear ring.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return inflateCoordinates(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride\n    );\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {LinearRing} Simplified LinearRing.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    simplifiedFlatCoordinates.length = douglasPeucker(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      0\n    );\n    return new LinearRing(simplifiedFlatCoordinates, 'XY');\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'LinearRing';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return false;\n  }\n\n  /**\n   * Set the coordinates of the linear ring.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride\n    );\n    this.changed();\n  }\n}\n\nexport default LinearRing;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}