{"ast":null,"code":"/**\n * @module ol/style/Icon\n */\nimport EventType from '../events/EventType.js';\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport { asArray } from '../color.js';\nimport { assert } from '../asserts.js';\nimport { get as getIconImage } from './IconImage.js';\nimport { getUid } from '../util.js';\n\n/**\n * @typedef {'fraction' | 'pixels'} IconAnchorUnits\n * Anchor unit can be either a fraction of the icon size or in pixels.\n */\n\n/**\n * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} IconOrigin\n * Icon origin. One of 'bottom-left', 'bottom-right', 'top-left', 'top-right'.\n */\n\n/**\n * @typedef {Object} Options\n * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.\n * @property {IconOrigin} [anchorOrigin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {IconAnchorUnits} [anchorXUnits='fraction'] Units in which the anchor x value is\n * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates\n * the x value in pixels.\n * @property {IconAnchorUnits} [anchorYUnits='fraction'] Units in which the anchor y value is\n * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates\n * the y value in pixels.\n * @property {import(\"../color.js\").Color|string} [color] Color to tint the icon. If not specified,\n * the icon will be left as is.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a\n * `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {HTMLImageElement|HTMLCanvasElement} [img] Image object for the icon. If the `src` option is not provided then the\n * provided image must already be loaded. And in that case, it is required\n * to provide the size of the image, with the `imgSize` option.\n * @property {import(\"../size.js\").Size} [imgSize] Image size in pixels. Only required if `img` is set and `src` is not.\n * The provided `imgSize` needs to match the actual size of the image.\n * @property {Array<number>} [displacement=[0, 0]] Displacement of the icon in pixels.\n * Positive values will shift the icon right and up.\n * @property {number} [opacity=1] Opacity of the icon.\n * @property {number} [width] The width of the icon in pixels. This can't be used together with `scale`.\n * @property {number} [height] The height of the icon in pixels. This can't be used together with `scale`.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {Array<number>} [offset=[0, 0]] Offset which, together with `size` and `offsetOrigin`, defines the\n * sub-rectangle to use from the original (sprite) image.\n * @property {IconOrigin} [offsetOrigin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {import(\"../size.js\").Size} [size] Icon size in pixels. Used together with `offset` to define the\n * sub-rectangle to use from the original (sprite) image.\n * @property {string} [src] Image source URI.\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [declutterMode] Declutter mode.\n */\n\n/**\n * @classdesc\n * Set icon style for vector features.\n * @api\n */\nclass Icon extends ImageStyle {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    /**\n     * @type {number}\n     */\n    const opacity = options.opacity !== undefined ? options.opacity : 1;\n\n    /**\n     * @type {number}\n     */\n    const rotation = options.rotation !== undefined ? options.rotation : 0;\n\n    /**\n     * @type {number|import(\"../size.js\").Size}\n     */\n    const scale = options.scale !== undefined ? options.scale : 1;\n\n    /**\n     * @type {boolean}\n     */\n    const rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;\n    super({\n      opacity: opacity,\n      rotation: rotation,\n      scale: scale,\n      displacement: options.displacement !== undefined ? options.displacement : [0, 0],\n      rotateWithView: rotateWithView,\n      declutterMode: options.declutterMode\n    });\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.anchor_ = options.anchor !== undefined ? options.anchor : [0.5, 0.5];\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.normalizedAnchor_ = null;\n\n    /**\n     * @private\n     * @type {IconOrigin}\n     */\n    this.anchorOrigin_ = options.anchorOrigin !== undefined ? options.anchorOrigin : 'top-left';\n\n    /**\n     * @private\n     * @type {IconAnchorUnits}\n     */\n    this.anchorXUnits_ = options.anchorXUnits !== undefined ? options.anchorXUnits : 'fraction';\n\n    /**\n     * @private\n     * @type {IconAnchorUnits}\n     */\n    this.anchorYUnits_ = options.anchorYUnits !== undefined ? options.anchorYUnits : 'fraction';\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n    const image = options.img !== undefined ? options.img : null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size|undefined}\n     */\n    this.imgSize_ = options.imgSize;\n\n    /**\n     * @type {string|undefined}\n     */\n    let src = options.src;\n    assert(!(src !== undefined && image), 4); // `image` and `src` cannot be provided at the same time\n    assert(!image || image && this.imgSize_, 5); // `imgSize` must be set when `image` is provided\n\n    if ((src === undefined || src.length === 0) && image) {\n      src = /** @type {HTMLImageElement} */image.src || getUid(image);\n    }\n    assert(src !== undefined && src.length > 0, 6); // A defined and non-empty `src` or `image` must be provided\n\n    // `width` or `height` cannot be provided together with `scale`\n    assert(!((options.width !== undefined || options.height !== undefined) && options.scale !== undefined), 69);\n\n    /**\n     * @type {import(\"../ImageState.js\").default}\n     */\n    const imageState = options.src !== undefined ? ImageState.IDLE : ImageState.LOADED;\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color}\n     */\n    this.color_ = options.color !== undefined ? asArray(options.color) : null;\n\n    /**\n     * @private\n     * @type {import(\"./IconImage.js\").default}\n     */\n    this.iconImage_ = getIconImage(image, /** @type {string} */src, this.imgSize_ !== undefined ? this.imgSize_ : null, this.crossOrigin_, imageState, this.color_);\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.offset_ = options.offset !== undefined ? options.offset : [0, 0];\n    /**\n     * @private\n     * @type {IconOrigin}\n     */\n    this.offsetOrigin_ = options.offsetOrigin !== undefined ? options.offsetOrigin : 'top-left';\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.origin_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.size_ = options.size !== undefined ? options.size : null;\n\n    /**\n     * @type {number|undefined}\n     */\n    this.width_ = options.width;\n\n    /**\n     * @type {number|undefined}\n     */\n    this.height_ = options.height;\n\n    /**\n     * Recalculate the scale if width or height were given.\n     */\n    if (this.width_ !== undefined || this.height_ !== undefined) {\n      const image = this.getImage(1);\n      const setScale = () => {\n        this.updateScaleFromWidthAndHeight(this.width_, this.height_);\n      };\n      if (image.width > 0) {\n        this.updateScaleFromWidthAndHeight(this.width_, this.height_);\n      } else {\n        image.addEventListener('load', setScale);\n      }\n    }\n  }\n\n  /**\n   * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.\n   * @return {Icon} The cloned style.\n   * @api\n   */\n  clone() {\n    let scale = this.getScale();\n    scale = Array.isArray(scale) ? scale.slice() : scale;\n    // if either width or height are defined, do not pass scale.\n    if (this.width_ !== undefined || this.height_ !== undefined) {\n      scale = undefined;\n    }\n    return new Icon({\n      anchor: this.anchor_.slice(),\n      anchorOrigin: this.anchorOrigin_,\n      anchorXUnits: this.anchorXUnits_,\n      anchorYUnits: this.anchorYUnits_,\n      color: this.color_ && this.color_.slice ? this.color_.slice() : this.color_ || undefined,\n      crossOrigin: this.crossOrigin_,\n      imgSize: this.imgSize_,\n      offset: this.offset_.slice(),\n      offsetOrigin: this.offsetOrigin_,\n      opacity: this.getOpacity(),\n      rotateWithView: this.getRotateWithView(),\n      rotation: this.getRotation(),\n      scale: scale,\n      size: this.size_ !== null ? this.size_.slice() : undefined,\n      src: this.getSrc(),\n      displacement: this.getDisplacement().slice(),\n      declutterMode: this.getDeclutterMode(),\n      width: this.width_,\n      height: this.height_\n    });\n  }\n\n  /**\n   * Set the scale of the Icon by calculating it from given width and height and the\n   * width and height of the image.\n   *\n   * @private\n   * @param {number} width The width.\n   * @param {number} height The height.\n   */\n  updateScaleFromWidthAndHeight(width, height) {\n    const image = this.getImage(1);\n    if (width !== undefined && height !== undefined) {\n      super.setScale([width / image.width, height / image.height]);\n    } else if (width !== undefined) {\n      super.setScale([width / image.width, width / image.width]);\n    } else if (height !== undefined) {\n      super.setScale([height / image.height, height / image.height]);\n    } else {\n      super.setScale([1, 1]);\n    }\n  }\n\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @return {Array<number>} Anchor.\n   * @api\n   */\n  getAnchor() {\n    let anchor = this.normalizedAnchor_;\n    if (!anchor) {\n      anchor = this.anchor_;\n      const size = this.getSize();\n      if (this.anchorXUnits_ == 'fraction' || this.anchorYUnits_ == 'fraction') {\n        if (!size) {\n          return null;\n        }\n        anchor = this.anchor_.slice();\n        if (this.anchorXUnits_ == 'fraction') {\n          anchor[0] *= size[0];\n        }\n        if (this.anchorYUnits_ == 'fraction') {\n          anchor[1] *= size[1];\n        }\n      }\n      if (this.anchorOrigin_ != 'top-left') {\n        if (!size) {\n          return null;\n        }\n        if (anchor === this.anchor_) {\n          anchor = this.anchor_.slice();\n        }\n        if (this.anchorOrigin_ == 'top-right' || this.anchorOrigin_ == 'bottom-right') {\n          anchor[0] = -anchor[0] + size[0];\n        }\n        if (this.anchorOrigin_ == 'bottom-left' || this.anchorOrigin_ == 'bottom-right') {\n          anchor[1] = -anchor[1] + size[1];\n        }\n      }\n      this.normalizedAnchor_ = anchor;\n    }\n    const displacement = this.getDisplacement();\n    const scale = this.getScaleArray();\n    // anchor is scaled by renderer but displacement should not be scaled\n    // so divide by scale here\n    return [anchor[0] - displacement[0] / scale[0], anchor[1] + displacement[1] / scale[1]];\n  }\n\n  /**\n   * Set the anchor point. The anchor determines the center point for the\n   * symbolizer.\n   *\n   * @param {Array<number>} anchor Anchor.\n   * @api\n   */\n  setAnchor(anchor) {\n    this.anchor_ = anchor;\n    this.normalizedAnchor_ = null;\n  }\n\n  /**\n   * Get the icon color.\n   * @return {import(\"../color.js\").Color} Color.\n   * @api\n   */\n  getColor() {\n    return this.color_;\n  }\n\n  /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.\n   * @api\n   */\n  getImage(pixelRatio) {\n    return this.iconImage_.getImage(pixelRatio);\n  }\n\n  /**\n   * Get the pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} The pixel ratio of the image.\n   * @api\n   */\n  getPixelRatio(pixelRatio) {\n    return this.iconImage_.getPixelRatio(pixelRatio);\n  }\n\n  /**\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  getImageSize() {\n    return this.iconImage_.getSize();\n  }\n\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  getImageState() {\n    return this.iconImage_.getImageState();\n  }\n\n  /**\n   * @return {HTMLImageElement|HTMLCanvasElement} Image element.\n   */\n  getHitDetectionImage() {\n    return this.iconImage_.getHitDetectionImage();\n  }\n\n  /**\n   * Get the origin of the symbolizer.\n   * @return {Array<number>} Origin.\n   * @api\n   */\n  getOrigin() {\n    if (this.origin_) {\n      return this.origin_;\n    }\n    let offset = this.offset_;\n    if (this.offsetOrigin_ != 'top-left') {\n      const size = this.getSize();\n      const iconImageSize = this.iconImage_.getSize();\n      if (!size || !iconImageSize) {\n        return null;\n      }\n      offset = offset.slice();\n      if (this.offsetOrigin_ == 'top-right' || this.offsetOrigin_ == 'bottom-right') {\n        offset[0] = iconImageSize[0] - size[0] - offset[0];\n      }\n      if (this.offsetOrigin_ == 'bottom-left' || this.offsetOrigin_ == 'bottom-right') {\n        offset[1] = iconImageSize[1] - size[1] - offset[1];\n      }\n    }\n    this.origin_ = offset;\n    return this.origin_;\n  }\n\n  /**\n   * Get the image URL.\n   * @return {string|undefined} Image src.\n   * @api\n   */\n  getSrc() {\n    return this.iconImage_.getSrc();\n  }\n\n  /**\n   * Get the size of the icon (in pixels).\n   * @return {import(\"../size.js\").Size} Image size.\n   * @api\n   */\n  getSize() {\n    return !this.size_ ? this.iconImage_.getSize() : this.size_;\n  }\n\n  /**\n   * Get the width of the icon (in pixels).\n   * @return {number} Icon width (in pixels).\n   * @api\n   */\n  getWidth() {\n    return this.width_;\n  }\n\n  /**\n   * Get the height of the icon (in pixels).\n   * @return {number} Icon height (in pixels).\n   * @api\n   */\n  getHeight() {\n    return this.height_;\n  }\n\n  /**\n   * Set the width of the icon in pixels.\n   *\n   * @param {number} width The width to set.\n   */\n  setWidth(width) {\n    this.width_ = width;\n    this.updateScaleFromWidthAndHeight(width, this.height_);\n  }\n\n  /**\n   * Set the height of the icon in pixels.\n   *\n   * @param {number} height The height to set.\n   */\n  setHeight(height) {\n    this.height_ = height;\n    this.updateScaleFromWidthAndHeight(this.width_, height);\n  }\n\n  /**\n   * Set the scale and updates the width and height correspondingly.\n   *\n   * @param {number|import(\"../size.js\").Size} scale Scale.\n   * @override\n   * @api\n   */\n  setScale(scale) {\n    super.setScale(scale);\n    const image = this.getImage(1);\n    if (image) {\n      const widthScale = Array.isArray(scale) ? scale[0] : scale;\n      if (widthScale !== undefined) {\n        this.width_ = widthScale * image.width;\n      }\n      const heightScale = Array.isArray(scale) ? scale[1] : scale;\n      if (heightScale !== undefined) {\n        this.height_ = heightScale * image.height;\n      }\n    }\n  }\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  listenImageChange(listener) {\n    this.iconImage_.addEventListener(EventType.CHANGE, listener);\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * When rendering a feature with an icon style, the vector renderer will\n   * automatically call this method. However, you might want to call this\n   * method yourself for preloading or other purposes.\n   * @api\n   */\n  load() {\n    this.iconImage_.load();\n  }\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  unlistenImageChange(listener) {\n    this.iconImage_.removeEventListener(EventType.CHANGE, listener);\n  }\n}\nexport default Icon;","map":{"version":3,"names":["EventType","ImageState","ImageStyle","asArray","assert","get","getIconImage","getUid","Icon","constructor","options","opacity","undefined","rotation","scale","rotateWithView","displacement","declutterMode","anchor_","anchor","normalizedAnchor_","anchorOrigin_","anchorOrigin","anchorXUnits_","anchorXUnits","anchorYUnits_","anchorYUnits","crossOrigin_","crossOrigin","image","img","imgSize_","imgSize","src","length","width","height","imageState","IDLE","LOADED","color_","color","iconImage_","offset_","offset","offsetOrigin_","offsetOrigin","origin_","size_","size","width_","height_","getImage","setScale","updateScaleFromWidthAndHeight","addEventListener","clone","getScale","Array","isArray","slice","getOpacity","getRotateWithView","getRotation","getSrc","getDisplacement","getDeclutterMode","getAnchor","getSize","getScaleArray","setAnchor","getColor","pixelRatio","getPixelRatio","getImageSize","getImageState","getHitDetectionImage","getOrigin","iconImageSize","getWidth","getHeight","setWidth","setHeight","widthScale","heightScale","listenImageChange","listener","CHANGE","load","unlistenImageChange","removeEventListener"],"sources":["/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/ol/style/Icon.js"],"sourcesContent":["/**\n * @module ol/style/Icon\n */\nimport EventType from '../events/EventType.js';\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport {asArray} from '../color.js';\nimport {assert} from '../asserts.js';\nimport {get as getIconImage} from './IconImage.js';\nimport {getUid} from '../util.js';\n\n/**\n * @typedef {'fraction' | 'pixels'} IconAnchorUnits\n * Anchor unit can be either a fraction of the icon size or in pixels.\n */\n\n/**\n * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} IconOrigin\n * Icon origin. One of 'bottom-left', 'bottom-right', 'top-left', 'top-right'.\n */\n\n/**\n * @typedef {Object} Options\n * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.\n * @property {IconOrigin} [anchorOrigin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {IconAnchorUnits} [anchorXUnits='fraction'] Units in which the anchor x value is\n * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates\n * the x value in pixels.\n * @property {IconAnchorUnits} [anchorYUnits='fraction'] Units in which the anchor y value is\n * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates\n * the y value in pixels.\n * @property {import(\"../color.js\").Color|string} [color] Color to tint the icon. If not specified,\n * the icon will be left as is.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a\n * `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {HTMLImageElement|HTMLCanvasElement} [img] Image object for the icon. If the `src` option is not provided then the\n * provided image must already be loaded. And in that case, it is required\n * to provide the size of the image, with the `imgSize` option.\n * @property {import(\"../size.js\").Size} [imgSize] Image size in pixels. Only required if `img` is set and `src` is not.\n * The provided `imgSize` needs to match the actual size of the image.\n * @property {Array<number>} [displacement=[0, 0]] Displacement of the icon in pixels.\n * Positive values will shift the icon right and up.\n * @property {number} [opacity=1] Opacity of the icon.\n * @property {number} [width] The width of the icon in pixels. This can't be used together with `scale`.\n * @property {number} [height] The height of the icon in pixels. This can't be used together with `scale`.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {Array<number>} [offset=[0, 0]] Offset which, together with `size` and `offsetOrigin`, defines the\n * sub-rectangle to use from the original (sprite) image.\n * @property {IconOrigin} [offsetOrigin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {import(\"../size.js\").Size} [size] Icon size in pixels. Used together with `offset` to define the\n * sub-rectangle to use from the original (sprite) image.\n * @property {string} [src] Image source URI.\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [declutterMode] Declutter mode.\n */\n\n/**\n * @classdesc\n * Set icon style for vector features.\n * @api\n */\nclass Icon extends ImageStyle {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    /**\n     * @type {number}\n     */\n    const opacity = options.opacity !== undefined ? options.opacity : 1;\n\n    /**\n     * @type {number}\n     */\n    const rotation = options.rotation !== undefined ? options.rotation : 0;\n\n    /**\n     * @type {number|import(\"../size.js\").Size}\n     */\n    const scale = options.scale !== undefined ? options.scale : 1;\n\n    /**\n     * @type {boolean}\n     */\n    const rotateWithView =\n      options.rotateWithView !== undefined ? options.rotateWithView : false;\n\n    super({\n      opacity: opacity,\n      rotation: rotation,\n      scale: scale,\n      displacement:\n        options.displacement !== undefined ? options.displacement : [0, 0],\n      rotateWithView: rotateWithView,\n      declutterMode: options.declutterMode,\n    });\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.anchor_ = options.anchor !== undefined ? options.anchor : [0.5, 0.5];\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.normalizedAnchor_ = null;\n\n    /**\n     * @private\n     * @type {IconOrigin}\n     */\n    this.anchorOrigin_ =\n      options.anchorOrigin !== undefined ? options.anchorOrigin : 'top-left';\n\n    /**\n     * @private\n     * @type {IconAnchorUnits}\n     */\n    this.anchorXUnits_ =\n      options.anchorXUnits !== undefined ? options.anchorXUnits : 'fraction';\n\n    /**\n     * @private\n     * @type {IconAnchorUnits}\n     */\n    this.anchorYUnits_ =\n      options.anchorYUnits !== undefined ? options.anchorYUnits : 'fraction';\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n    const image = options.img !== undefined ? options.img : null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size|undefined}\n     */\n    this.imgSize_ = options.imgSize;\n\n    /**\n     * @type {string|undefined}\n     */\n    let src = options.src;\n\n    assert(!(src !== undefined && image), 4); // `image` and `src` cannot be provided at the same time\n    assert(!image || (image && this.imgSize_), 5); // `imgSize` must be set when `image` is provided\n\n    if ((src === undefined || src.length === 0) && image) {\n      src = /** @type {HTMLImageElement} */ (image).src || getUid(image);\n    }\n    assert(src !== undefined && src.length > 0, 6); // A defined and non-empty `src` or `image` must be provided\n\n    // `width` or `height` cannot be provided together with `scale`\n    assert(\n      !(\n        (options.width !== undefined || options.height !== undefined) &&\n        options.scale !== undefined\n      ),\n      69\n    );\n\n    /**\n     * @type {import(\"../ImageState.js\").default}\n     */\n    const imageState =\n      options.src !== undefined ? ImageState.IDLE : ImageState.LOADED;\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color}\n     */\n    this.color_ = options.color !== undefined ? asArray(options.color) : null;\n\n    /**\n     * @private\n     * @type {import(\"./IconImage.js\").default}\n     */\n    this.iconImage_ = getIconImage(\n      image,\n      /** @type {string} */ (src),\n      this.imgSize_ !== undefined ? this.imgSize_ : null,\n      this.crossOrigin_,\n      imageState,\n      this.color_\n    );\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.offset_ = options.offset !== undefined ? options.offset : [0, 0];\n    /**\n     * @private\n     * @type {IconOrigin}\n     */\n    this.offsetOrigin_ =\n      options.offsetOrigin !== undefined ? options.offsetOrigin : 'top-left';\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.origin_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.size_ = options.size !== undefined ? options.size : null;\n\n    /**\n     * @type {number|undefined}\n     */\n    this.width_ = options.width;\n\n    /**\n     * @type {number|undefined}\n     */\n    this.height_ = options.height;\n\n    /**\n     * Recalculate the scale if width or height were given.\n     */\n    if (this.width_ !== undefined || this.height_ !== undefined) {\n      const image = this.getImage(1);\n      const setScale = () => {\n        this.updateScaleFromWidthAndHeight(this.width_, this.height_);\n      };\n      if (image.width > 0) {\n        this.updateScaleFromWidthAndHeight(this.width_, this.height_);\n      } else {\n        image.addEventListener('load', setScale);\n      }\n    }\n  }\n\n  /**\n   * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.\n   * @return {Icon} The cloned style.\n   * @api\n   */\n  clone() {\n    let scale = this.getScale();\n    scale = Array.isArray(scale) ? scale.slice() : scale;\n    // if either width or height are defined, do not pass scale.\n    if (this.width_ !== undefined || this.height_ !== undefined) {\n      scale = undefined;\n    }\n    return new Icon({\n      anchor: this.anchor_.slice(),\n      anchorOrigin: this.anchorOrigin_,\n      anchorXUnits: this.anchorXUnits_,\n      anchorYUnits: this.anchorYUnits_,\n      color:\n        this.color_ && this.color_.slice\n          ? this.color_.slice()\n          : this.color_ || undefined,\n      crossOrigin: this.crossOrigin_,\n      imgSize: this.imgSize_,\n      offset: this.offset_.slice(),\n      offsetOrigin: this.offsetOrigin_,\n      opacity: this.getOpacity(),\n      rotateWithView: this.getRotateWithView(),\n      rotation: this.getRotation(),\n      scale: scale,\n      size: this.size_ !== null ? this.size_.slice() : undefined,\n      src: this.getSrc(),\n      displacement: this.getDisplacement().slice(),\n      declutterMode: this.getDeclutterMode(),\n      width: this.width_,\n      height: this.height_,\n    });\n  }\n\n  /**\n   * Set the scale of the Icon by calculating it from given width and height and the\n   * width and height of the image.\n   *\n   * @private\n   * @param {number} width The width.\n   * @param {number} height The height.\n   */\n  updateScaleFromWidthAndHeight(width, height) {\n    const image = this.getImage(1);\n    if (width !== undefined && height !== undefined) {\n      super.setScale([width / image.width, height / image.height]);\n    } else if (width !== undefined) {\n      super.setScale([width / image.width, width / image.width]);\n    } else if (height !== undefined) {\n      super.setScale([height / image.height, height / image.height]);\n    } else {\n      super.setScale([1, 1]);\n    }\n  }\n\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @return {Array<number>} Anchor.\n   * @api\n   */\n  getAnchor() {\n    let anchor = this.normalizedAnchor_;\n    if (!anchor) {\n      anchor = this.anchor_;\n      const size = this.getSize();\n      if (\n        this.anchorXUnits_ == 'fraction' ||\n        this.anchorYUnits_ == 'fraction'\n      ) {\n        if (!size) {\n          return null;\n        }\n        anchor = this.anchor_.slice();\n        if (this.anchorXUnits_ == 'fraction') {\n          anchor[0] *= size[0];\n        }\n        if (this.anchorYUnits_ == 'fraction') {\n          anchor[1] *= size[1];\n        }\n      }\n\n      if (this.anchorOrigin_ != 'top-left') {\n        if (!size) {\n          return null;\n        }\n        if (anchor === this.anchor_) {\n          anchor = this.anchor_.slice();\n        }\n        if (\n          this.anchorOrigin_ == 'top-right' ||\n          this.anchorOrigin_ == 'bottom-right'\n        ) {\n          anchor[0] = -anchor[0] + size[0];\n        }\n        if (\n          this.anchorOrigin_ == 'bottom-left' ||\n          this.anchorOrigin_ == 'bottom-right'\n        ) {\n          anchor[1] = -anchor[1] + size[1];\n        }\n      }\n      this.normalizedAnchor_ = anchor;\n    }\n    const displacement = this.getDisplacement();\n    const scale = this.getScaleArray();\n    // anchor is scaled by renderer but displacement should not be scaled\n    // so divide by scale here\n    return [\n      anchor[0] - displacement[0] / scale[0],\n      anchor[1] + displacement[1] / scale[1],\n    ];\n  }\n\n  /**\n   * Set the anchor point. The anchor determines the center point for the\n   * symbolizer.\n   *\n   * @param {Array<number>} anchor Anchor.\n   * @api\n   */\n  setAnchor(anchor) {\n    this.anchor_ = anchor;\n    this.normalizedAnchor_ = null;\n  }\n\n  /**\n   * Get the icon color.\n   * @return {import(\"../color.js\").Color} Color.\n   * @api\n   */\n  getColor() {\n    return this.color_;\n  }\n\n  /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.\n   * @api\n   */\n  getImage(pixelRatio) {\n    return this.iconImage_.getImage(pixelRatio);\n  }\n\n  /**\n   * Get the pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} The pixel ratio of the image.\n   * @api\n   */\n  getPixelRatio(pixelRatio) {\n    return this.iconImage_.getPixelRatio(pixelRatio);\n  }\n\n  /**\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  getImageSize() {\n    return this.iconImage_.getSize();\n  }\n\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  getImageState() {\n    return this.iconImage_.getImageState();\n  }\n\n  /**\n   * @return {HTMLImageElement|HTMLCanvasElement} Image element.\n   */\n  getHitDetectionImage() {\n    return this.iconImage_.getHitDetectionImage();\n  }\n\n  /**\n   * Get the origin of the symbolizer.\n   * @return {Array<number>} Origin.\n   * @api\n   */\n  getOrigin() {\n    if (this.origin_) {\n      return this.origin_;\n    }\n    let offset = this.offset_;\n\n    if (this.offsetOrigin_ != 'top-left') {\n      const size = this.getSize();\n      const iconImageSize = this.iconImage_.getSize();\n      if (!size || !iconImageSize) {\n        return null;\n      }\n      offset = offset.slice();\n      if (\n        this.offsetOrigin_ == 'top-right' ||\n        this.offsetOrigin_ == 'bottom-right'\n      ) {\n        offset[0] = iconImageSize[0] - size[0] - offset[0];\n      }\n      if (\n        this.offsetOrigin_ == 'bottom-left' ||\n        this.offsetOrigin_ == 'bottom-right'\n      ) {\n        offset[1] = iconImageSize[1] - size[1] - offset[1];\n      }\n    }\n    this.origin_ = offset;\n    return this.origin_;\n  }\n\n  /**\n   * Get the image URL.\n   * @return {string|undefined} Image src.\n   * @api\n   */\n  getSrc() {\n    return this.iconImage_.getSrc();\n  }\n\n  /**\n   * Get the size of the icon (in pixels).\n   * @return {import(\"../size.js\").Size} Image size.\n   * @api\n   */\n  getSize() {\n    return !this.size_ ? this.iconImage_.getSize() : this.size_;\n  }\n\n  /**\n   * Get the width of the icon (in pixels).\n   * @return {number} Icon width (in pixels).\n   * @api\n   */\n  getWidth() {\n    return this.width_;\n  }\n\n  /**\n   * Get the height of the icon (in pixels).\n   * @return {number} Icon height (in pixels).\n   * @api\n   */\n  getHeight() {\n    return this.height_;\n  }\n\n  /**\n   * Set the width of the icon in pixels.\n   *\n   * @param {number} width The width to set.\n   */\n  setWidth(width) {\n    this.width_ = width;\n    this.updateScaleFromWidthAndHeight(width, this.height_);\n  }\n\n  /**\n   * Set the height of the icon in pixels.\n   *\n   * @param {number} height The height to set.\n   */\n  setHeight(height) {\n    this.height_ = height;\n    this.updateScaleFromWidthAndHeight(this.width_, height);\n  }\n\n  /**\n   * Set the scale and updates the width and height correspondingly.\n   *\n   * @param {number|import(\"../size.js\").Size} scale Scale.\n   * @override\n   * @api\n   */\n  setScale(scale) {\n    super.setScale(scale);\n    const image = this.getImage(1);\n    if (image) {\n      const widthScale = Array.isArray(scale) ? scale[0] : scale;\n      if (widthScale !== undefined) {\n        this.width_ = widthScale * image.width;\n      }\n      const heightScale = Array.isArray(scale) ? scale[1] : scale;\n      if (heightScale !== undefined) {\n        this.height_ = heightScale * image.height;\n      }\n    }\n  }\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  listenImageChange(listener) {\n    this.iconImage_.addEventListener(EventType.CHANGE, listener);\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * When rendering a feature with an icon style, the vector renderer will\n   * automatically call this method. However, you might want to call this\n   * method yourself for preloading or other purposes.\n   * @api\n   */\n  load() {\n    this.iconImage_.load();\n  }\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  unlistenImageChange(listener) {\n    this.iconImage_.removeEventListener(EventType.CHANGE, listener);\n  }\n}\n\nexport default Icon;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}