{"ast":null,"code":"import _classCallCheck from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\n * @module ol/style/Stroke\n */\n/**\n * @typedef {Object} Options\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} [color] A color, gradient or pattern.\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\n * Default null; if null, the Canvas/renderer default black will be used.\n * @property {CanvasLineCap} [lineCap='round'] Line cap style: `butt`, `round`, or `square`.\n * @property {CanvasLineJoin} [lineJoin='round'] Line join style: `bevel`, `round`, or `miter`.\n * @property {Array<number>} [lineDash] Line dash pattern. Default is `null` (no dash).\n * @property {number} [lineDashOffset=0] Line dash offset.\n * @property {number} [miterLimit=10] Miter limit.\n * @property {number} [width] Width.\n */\n/**\n * @classdesc\n * Set stroke style for vector features.\n * Note that the defaults given are the Canvas defaults, which will be used if\n * option is not defined. The `get` functions return whatever was entered in\n * the options; they will not return the default.\n * @api\n */\nvar Stroke = /*#__PURE__*/function () {\n  /**\n   * @param {Options} [options] Options.\n   */\n  function Stroke(options) {\n    _classCallCheck(this, Stroke);\n    options = options || {};\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike}\n     */\n    this.color_ = options.color !== undefined ? options.color : null;\n\n    /**\n     * @private\n     * @type {CanvasLineCap|undefined}\n     */\n    this.lineCap_ = options.lineCap;\n\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n    this.lineDash_ = options.lineDash !== undefined ? options.lineDash : null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lineDashOffset_ = options.lineDashOffset;\n\n    /**\n     * @private\n     * @type {CanvasLineJoin|undefined}\n     */\n    this.lineJoin_ = options.lineJoin;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.miterLimit_ = options.miterLimit;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.width_ = options.width;\n  }\n\n  /**\n   * Clones the style.\n   * @return {Stroke} The cloned style.\n   * @api\n   */\n  _createClass(Stroke, [{\n    key: \"clone\",\n    value: function clone() {\n      var color = this.getColor();\n      return new Stroke({\n        color: Array.isArray(color) ? color.slice() : color || undefined,\n        lineCap: this.getLineCap(),\n        lineDash: this.getLineDash() ? this.getLineDash().slice() : undefined,\n        lineDashOffset: this.getLineDashOffset(),\n        lineJoin: this.getLineJoin(),\n        miterLimit: this.getMiterLimit(),\n        width: this.getWidth()\n      });\n    }\n\n    /**\n     * Get the stroke color.\n     * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} Color.\n     * @api\n     */\n  }, {\n    key: \"getColor\",\n    value: function getColor() {\n      return this.color_;\n    }\n\n    /**\n     * Get the line cap type for the stroke.\n     * @return {CanvasLineCap|undefined} Line cap.\n     * @api\n     */\n  }, {\n    key: \"getLineCap\",\n    value: function getLineCap() {\n      return this.lineCap_;\n    }\n\n    /**\n     * Get the line dash style for the stroke.\n     * @return {Array<number>|null} Line dash.\n     * @api\n     */\n  }, {\n    key: \"getLineDash\",\n    value: function getLineDash() {\n      return this.lineDash_;\n    }\n\n    /**\n     * Get the line dash offset for the stroke.\n     * @return {number|undefined} Line dash offset.\n     * @api\n     */\n  }, {\n    key: \"getLineDashOffset\",\n    value: function getLineDashOffset() {\n      return this.lineDashOffset_;\n    }\n\n    /**\n     * Get the line join type for the stroke.\n     * @return {CanvasLineJoin|undefined} Line join.\n     * @api\n     */\n  }, {\n    key: \"getLineJoin\",\n    value: function getLineJoin() {\n      return this.lineJoin_;\n    }\n\n    /**\n     * Get the miter limit for the stroke.\n     * @return {number|undefined} Miter limit.\n     * @api\n     */\n  }, {\n    key: \"getMiterLimit\",\n    value: function getMiterLimit() {\n      return this.miterLimit_;\n    }\n\n    /**\n     * Get the stroke width.\n     * @return {number|undefined} Width.\n     * @api\n     */\n  }, {\n    key: \"getWidth\",\n    value: function getWidth() {\n      return this.width_;\n    }\n\n    /**\n     * Set the color.\n     *\n     * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} color Color.\n     * @api\n     */\n  }, {\n    key: \"setColor\",\n    value: function setColor(color) {\n      this.color_ = color;\n    }\n\n    /**\n     * Set the line cap.\n     *\n     * @param {CanvasLineCap|undefined} lineCap Line cap.\n     * @api\n     */\n  }, {\n    key: \"setLineCap\",\n    value: function setLineCap(lineCap) {\n      this.lineCap_ = lineCap;\n    }\n\n    /**\n     * Set the line dash.\n     *\n     * @param {Array<number>|null} lineDash Line dash.\n     * @api\n     */\n  }, {\n    key: \"setLineDash\",\n    value: function setLineDash(lineDash) {\n      this.lineDash_ = lineDash;\n    }\n\n    /**\n     * Set the line dash offset.\n     *\n     * @param {number|undefined} lineDashOffset Line dash offset.\n     * @api\n     */\n  }, {\n    key: \"setLineDashOffset\",\n    value: function setLineDashOffset(lineDashOffset) {\n      this.lineDashOffset_ = lineDashOffset;\n    }\n\n    /**\n     * Set the line join.\n     *\n     * @param {CanvasLineJoin|undefined} lineJoin Line join.\n     * @api\n     */\n  }, {\n    key: \"setLineJoin\",\n    value: function setLineJoin(lineJoin) {\n      this.lineJoin_ = lineJoin;\n    }\n\n    /**\n     * Set the miter limit.\n     *\n     * @param {number|undefined} miterLimit Miter limit.\n     * @api\n     */\n  }, {\n    key: \"setMiterLimit\",\n    value: function setMiterLimit(miterLimit) {\n      this.miterLimit_ = miterLimit;\n    }\n\n    /**\n     * Set the width.\n     *\n     * @param {number|undefined} width Width.\n     * @api\n     */\n  }, {\n    key: \"setWidth\",\n    value: function setWidth(width) {\n      this.width_ = width;\n    }\n  }]);\n  return Stroke;\n}();\nexport default Stroke;","map":{"version":3,"names":["Stroke","options","_classCallCheck","color_","color","undefined","lineCap_","lineCap","lineDash_","lineDash","lineDashOffset_","lineDashOffset","lineJoin_","lineJoin","miterLimit_","miterLimit","width_","width","_createClass","key","value","clone","getColor","Array","isArray","slice","getLineCap","getLineDash","getLineDashOffset","getLineJoin","getMiterLimit","getWidth","setColor","setLineCap","setLineDash","setLineDashOffset","setLineJoin","setMiterLimit","setWidth"],"sources":["/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/ol/style/Stroke.js"],"sourcesContent":["/**\n * @module ol/style/Stroke\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} [color] A color, gradient or pattern.\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\n * Default null; if null, the Canvas/renderer default black will be used.\n * @property {CanvasLineCap} [lineCap='round'] Line cap style: `butt`, `round`, or `square`.\n * @property {CanvasLineJoin} [lineJoin='round'] Line join style: `bevel`, `round`, or `miter`.\n * @property {Array<number>} [lineDash] Line dash pattern. Default is `null` (no dash).\n * @property {number} [lineDashOffset=0] Line dash offset.\n * @property {number} [miterLimit=10] Miter limit.\n * @property {number} [width] Width.\n */\n\n/**\n * @classdesc\n * Set stroke style for vector features.\n * Note that the defaults given are the Canvas defaults, which will be used if\n * option is not defined. The `get` functions return whatever was entered in\n * the options; they will not return the default.\n * @api\n */\nclass Stroke {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike}\n     */\n    this.color_ = options.color !== undefined ? options.color : null;\n\n    /**\n     * @private\n     * @type {CanvasLineCap|undefined}\n     */\n    this.lineCap_ = options.lineCap;\n\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n    this.lineDash_ = options.lineDash !== undefined ? options.lineDash : null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lineDashOffset_ = options.lineDashOffset;\n\n    /**\n     * @private\n     * @type {CanvasLineJoin|undefined}\n     */\n    this.lineJoin_ = options.lineJoin;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.miterLimit_ = options.miterLimit;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.width_ = options.width;\n  }\n\n  /**\n   * Clones the style.\n   * @return {Stroke} The cloned style.\n   * @api\n   */\n  clone() {\n    const color = this.getColor();\n    return new Stroke({\n      color: Array.isArray(color) ? color.slice() : color || undefined,\n      lineCap: this.getLineCap(),\n      lineDash: this.getLineDash() ? this.getLineDash().slice() : undefined,\n      lineDashOffset: this.getLineDashOffset(),\n      lineJoin: this.getLineJoin(),\n      miterLimit: this.getMiterLimit(),\n      width: this.getWidth(),\n    });\n  }\n\n  /**\n   * Get the stroke color.\n   * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} Color.\n   * @api\n   */\n  getColor() {\n    return this.color_;\n  }\n\n  /**\n   * Get the line cap type for the stroke.\n   * @return {CanvasLineCap|undefined} Line cap.\n   * @api\n   */\n  getLineCap() {\n    return this.lineCap_;\n  }\n\n  /**\n   * Get the line dash style for the stroke.\n   * @return {Array<number>|null} Line dash.\n   * @api\n   */\n  getLineDash() {\n    return this.lineDash_;\n  }\n\n  /**\n   * Get the line dash offset for the stroke.\n   * @return {number|undefined} Line dash offset.\n   * @api\n   */\n  getLineDashOffset() {\n    return this.lineDashOffset_;\n  }\n\n  /**\n   * Get the line join type for the stroke.\n   * @return {CanvasLineJoin|undefined} Line join.\n   * @api\n   */\n  getLineJoin() {\n    return this.lineJoin_;\n  }\n\n  /**\n   * Get the miter limit for the stroke.\n   * @return {number|undefined} Miter limit.\n   * @api\n   */\n  getMiterLimit() {\n    return this.miterLimit_;\n  }\n\n  /**\n   * Get the stroke width.\n   * @return {number|undefined} Width.\n   * @api\n   */\n  getWidth() {\n    return this.width_;\n  }\n\n  /**\n   * Set the color.\n   *\n   * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} color Color.\n   * @api\n   */\n  setColor(color) {\n    this.color_ = color;\n  }\n\n  /**\n   * Set the line cap.\n   *\n   * @param {CanvasLineCap|undefined} lineCap Line cap.\n   * @api\n   */\n  setLineCap(lineCap) {\n    this.lineCap_ = lineCap;\n  }\n\n  /**\n   * Set the line dash.\n   *\n   * @param {Array<number>|null} lineDash Line dash.\n   * @api\n   */\n  setLineDash(lineDash) {\n    this.lineDash_ = lineDash;\n  }\n\n  /**\n   * Set the line dash offset.\n   *\n   * @param {number|undefined} lineDashOffset Line dash offset.\n   * @api\n   */\n  setLineDashOffset(lineDashOffset) {\n    this.lineDashOffset_ = lineDashOffset;\n  }\n\n  /**\n   * Set the line join.\n   *\n   * @param {CanvasLineJoin|undefined} lineJoin Line join.\n   * @api\n   */\n  setLineJoin(lineJoin) {\n    this.lineJoin_ = lineJoin;\n  }\n\n  /**\n   * Set the miter limit.\n   *\n   * @param {number|undefined} miterLimit Miter limit.\n   * @api\n   */\n  setMiterLimit(miterLimit) {\n    this.miterLimit_ = miterLimit;\n  }\n\n  /**\n   * Set the width.\n   *\n   * @param {number|undefined} width Width.\n   * @api\n   */\n  setWidth(width) {\n    this.width_ = width;\n  }\n}\n\nexport default Stroke;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}