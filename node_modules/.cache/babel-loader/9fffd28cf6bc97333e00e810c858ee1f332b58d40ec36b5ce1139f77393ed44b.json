{"ast":null,"code":"import _classCallCheck from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * @module ol/geom/Geometry\n */\nimport BaseObject from '../Object.js';\nimport { abstract } from '../util.js';\nimport { compose as composeTransform, create as createTransform } from '../transform.js';\nimport { createEmpty, createOrUpdateEmpty, getHeight, returnOrUpdate } from '../extent.js';\nimport { get as getProjection, getTransform } from '../proj.js';\nimport { memoizeOne } from '../functions.js';\nimport { transform2D } from './flat/transform.js';\n\n/**\n * @typedef {'XY' | 'XYZ' | 'XYM' | 'XYZM'} GeometryLayout\n * The coordinate layout for geometries, indicating whether a 3rd or 4th z ('Z')\n * or measure ('M') coordinate is available.\n */\n\n/**\n * @typedef {'Point' | 'LineString' | 'LinearRing' | 'Polygon' | 'MultiPoint' | 'MultiLineString' | 'MultiPolygon' | 'GeometryCollection' | 'Circle'} Type\n * The geometry type.  One of `'Point'`, `'LineString'`, `'LinearRing'`,\n * `'Polygon'`, `'MultiPoint'`, `'MultiLineString'`, `'MultiPolygon'`,\n * `'GeometryCollection'`, or `'Circle'`.\n */\n\n/**\n * @type {import(\"../transform.js\").Transform}\n */\nvar tmpTransform = createTransform();\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for vector geometries.\n *\n * To get notified of changes to the geometry, register a listener for the\n * generic `change` event on your geometry instance.\n *\n * @abstract\n * @api\n */\nvar Geometry = /*#__PURE__*/function (_BaseObject) {\n  _inherits(Geometry, _BaseObject);\n  var _super = _createSuper(Geometry);\n  function Geometry() {\n    var _this;\n    _classCallCheck(this, Geometry);\n    _this = _super.call(this);\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    _this.extent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.extentRevision_ = -1;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    _this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    _this.simplifiedGeometryRevision = 0;\n\n    /**\n     * Get a transformed and simplified version of the geometry.\n     * @abstract\n     * @param {number} revision The geometry revision.\n     * @param {number} squaredTolerance Squared tolerance.\n     * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\n     * @return {Geometry} Simplified geometry.\n     */\n    _this.simplifyTransformedInternal = memoizeOne(function (revision, squaredTolerance, transform) {\n      if (!transform) {\n        return this.getSimplifiedGeometry(squaredTolerance);\n      }\n      var clone = this.clone();\n      clone.applyTransform(transform);\n      return clone.getSimplifiedGeometry(squaredTolerance);\n    });\n    return _this;\n  }\n\n  /**\n   * Get a transformed and simplified version of the geometry.\n   * @abstract\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\n   * @return {Geometry} Simplified geometry.\n   */\n  _createClass(Geometry, [{\n    key: \"simplifyTransformed\",\n    value: function simplifyTransformed(squaredTolerance, transform) {\n      return this.simplifyTransformedInternal(this.getRevision(), squaredTolerance, transform);\n    }\n\n    /**\n     * Make a complete copy of the geometry.\n     * @abstract\n     * @return {!Geometry} Clone.\n     */\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return abstract();\n    }\n\n    /**\n     * @abstract\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n     * @param {number} minSquaredDistance Minimum squared distance.\n     * @return {number} Minimum squared distance.\n     */\n  }, {\n    key: \"closestPointXY\",\n    value: function closestPointXY(x, y, closestPoint, minSquaredDistance) {\n      return abstract();\n    }\n\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @return {boolean} Contains (x, y).\n     */\n  }, {\n    key: \"containsXY\",\n    value: function containsXY(x, y) {\n      var coord = this.getClosestPoint([x, y]);\n      return coord[0] === x && coord[1] === y;\n    }\n\n    /**\n     * Return the closest point of the geometry to the passed point as\n     * {@link module:ol/coordinate~Coordinate coordinate}.\n     * @param {import(\"../coordinate.js\").Coordinate} point Point.\n     * @param {import(\"../coordinate.js\").Coordinate} [closestPoint] Closest point.\n     * @return {import(\"../coordinate.js\").Coordinate} Closest point.\n     * @api\n     */\n  }, {\n    key: \"getClosestPoint\",\n    value: function getClosestPoint(point, closestPoint) {\n      closestPoint = closestPoint ? closestPoint : [NaN, NaN];\n      this.closestPointXY(point[0], point[1], closestPoint, Infinity);\n      return closestPoint;\n    }\n\n    /**\n     * Returns true if this geometry includes the specified coordinate. If the\n     * coordinate is on the boundary of the geometry, returns false.\n     * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @return {boolean} Contains coordinate.\n     * @api\n     */\n  }, {\n    key: \"intersectsCoordinate\",\n    value: function intersectsCoordinate(coordinate) {\n      return this.containsXY(coordinate[0], coordinate[1]);\n    }\n\n    /**\n     * @abstract\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @protected\n     * @return {import(\"../extent.js\").Extent} extent Extent.\n     */\n  }, {\n    key: \"computeExtent\",\n    value: function computeExtent(extent) {\n      return abstract();\n    }\n\n    /**\n     * Get the extent of the geometry.\n     * @param {import(\"../extent.js\").Extent} [extent] Extent.\n     * @return {import(\"../extent.js\").Extent} extent Extent.\n     * @api\n     */\n  }, {\n    key: \"getExtent\",\n    value: function getExtent(extent) {\n      if (this.extentRevision_ != this.getRevision()) {\n        var _extent = this.computeExtent(this.extent_);\n        if (isNaN(_extent[0]) || isNaN(_extent[1])) {\n          createOrUpdateEmpty(_extent);\n        }\n        this.extentRevision_ = this.getRevision();\n      }\n      return returnOrUpdate(this.extent_, extent);\n    }\n\n    /**\n     * Rotate the geometry around a given coordinate. This modifies the geometry\n     * coordinates in place.\n     * @abstract\n     * @param {number} angle Rotation angle in radians.\n     * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n     * @api\n     */\n  }, {\n    key: \"rotate\",\n    value: function rotate(angle, anchor) {\n      abstract();\n    }\n\n    /**\n     * Scale the geometry (with an optional origin).  This modifies the geometry\n     * coordinates in place.\n     * @abstract\n     * @param {number} sx The scaling factor in the x-direction.\n     * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\n     * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\n     *     of the geometry extent).\n     * @api\n     */\n  }, {\n    key: \"scale\",\n    value: function scale(sx, sy, anchor) {\n      abstract();\n    }\n\n    /**\n     * Create a simplified version of this geometry.  For linestrings, this uses\n     * the [Douglas Peucker](https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm)\n     * algorithm.  For polygons, a quantization-based\n     * simplification is used to preserve topology.\n     * @param {number} tolerance The tolerance distance for simplification.\n     * @return {Geometry} A new, simplified version of the original geometry.\n     * @api\n     */\n  }, {\n    key: \"simplify\",\n    value: function simplify(tolerance) {\n      return this.getSimplifiedGeometry(tolerance * tolerance);\n    }\n\n    /**\n     * Create a simplified version of this geometry using the Douglas Peucker\n     * algorithm.\n     * See https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm.\n     * @abstract\n     * @param {number} squaredTolerance Squared tolerance.\n     * @return {Geometry} Simplified geometry.\n     */\n  }, {\n    key: \"getSimplifiedGeometry\",\n    value: function getSimplifiedGeometry(squaredTolerance) {\n      return abstract();\n    }\n\n    /**\n     * Get the type of this geometry.\n     * @abstract\n     * @return {Type} Geometry type.\n     */\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return abstract();\n    }\n\n    /**\n     * Apply a transform function to the coordinates of the geometry.\n     * The geometry is modified in place.\n     * If you do not want the geometry modified in place, first `clone()` it and\n     * then use this function on the clone.\n     * @abstract\n     * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n     * Called with a flat array of geometry coordinates.\n     */\n  }, {\n    key: \"applyTransform\",\n    value: function applyTransform(transformFn) {\n      abstract();\n    }\n\n    /**\n     * Test if the geometry and the passed extent intersect.\n     * @abstract\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @return {boolean} `true` if the geometry and the extent intersect.\n     */\n  }, {\n    key: \"intersectsExtent\",\n    value: function intersectsExtent(extent) {\n      return abstract();\n    }\n\n    /**\n     * Translate the geometry.  This modifies the geometry coordinates in place.  If\n     * instead you want a new geometry, first `clone()` this geometry.\n     * @abstract\n     * @param {number} deltaX Delta X.\n     * @param {number} deltaY Delta Y.\n     * @api\n     */\n  }, {\n    key: \"translate\",\n    value: function translate(deltaX, deltaY) {\n      abstract();\n    }\n\n    /**\n     * Transform each coordinate of the geometry from one coordinate reference\n     * system to another. The geometry is modified in place.\n     * For example, a line will be transformed to a line and a circle to a circle.\n     * If you do not want the geometry modified in place, first `clone()` it and\n     * then use this function on the clone.\n     *\n     * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\n     *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n     * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\n     *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n     * @return {Geometry} This geometry.  Note that original geometry is\n     *     modified in place.\n     * @api\n     */\n  }, {\n    key: \"transform\",\n    value: function transform(source, destination) {\n      /** @type {import(\"../proj/Projection.js\").default} */\n      var sourceProj = getProjection(source);\n      var transformFn = sourceProj.getUnits() == 'tile-pixels' ? function (inCoordinates, outCoordinates, stride) {\n        var pixelExtent = sourceProj.getExtent();\n        var projectedExtent = sourceProj.getWorldExtent();\n        var scale = getHeight(projectedExtent) / getHeight(pixelExtent);\n        composeTransform(tmpTransform, projectedExtent[0], projectedExtent[3], scale, -scale, 0, 0, 0);\n        transform2D(inCoordinates, 0, inCoordinates.length, stride, tmpTransform, outCoordinates);\n        return getTransform(sourceProj, destination)(inCoordinates, outCoordinates, stride);\n      } : getTransform(sourceProj, destination);\n      this.applyTransform(transformFn);\n      return this;\n    }\n  }]);\n  return Geometry;\n}(BaseObject);\nexport default Geometry;","map":{"version":3,"names":["BaseObject","abstract","compose","composeTransform","create","createTransform","createEmpty","createOrUpdateEmpty","getHeight","returnOrUpdate","get","getProjection","getTransform","memoizeOne","transform2D","tmpTransform","Geometry","_BaseObject","_inherits","_super","_createSuper","_this","_classCallCheck","call","extent_","extentRevision_","simplifiedGeometryMaxMinSquaredTolerance","simplifiedGeometryRevision","simplifyTransformedInternal","revision","squaredTolerance","transform","getSimplifiedGeometry","clone","applyTransform","_createClass","key","value","simplifyTransformed","getRevision","closestPointXY","x","y","closestPoint","minSquaredDistance","containsXY","coord","getClosestPoint","point","NaN","Infinity","intersectsCoordinate","coordinate","computeExtent","extent","getExtent","isNaN","rotate","angle","anchor","scale","sx","sy","simplify","tolerance","getType","transformFn","intersectsExtent","translate","deltaX","deltaY","source","destination","sourceProj","getUnits","inCoordinates","outCoordinates","stride","pixelExtent","projectedExtent","getWorldExtent","length"],"sources":["/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/ol/geom/Geometry.js"],"sourcesContent":["/**\n * @module ol/geom/Geometry\n */\nimport BaseObject from '../Object.js';\nimport {abstract} from '../util.js';\nimport {\n  compose as composeTransform,\n  create as createTransform,\n} from '../transform.js';\nimport {\n  createEmpty,\n  createOrUpdateEmpty,\n  getHeight,\n  returnOrUpdate,\n} from '../extent.js';\nimport {get as getProjection, getTransform} from '../proj.js';\nimport {memoizeOne} from '../functions.js';\nimport {transform2D} from './flat/transform.js';\n\n/**\n * @typedef {'XY' | 'XYZ' | 'XYM' | 'XYZM'} GeometryLayout\n * The coordinate layout for geometries, indicating whether a 3rd or 4th z ('Z')\n * or measure ('M') coordinate is available.\n */\n\n/**\n * @typedef {'Point' | 'LineString' | 'LinearRing' | 'Polygon' | 'MultiPoint' | 'MultiLineString' | 'MultiPolygon' | 'GeometryCollection' | 'Circle'} Type\n * The geometry type.  One of `'Point'`, `'LineString'`, `'LinearRing'`,\n * `'Polygon'`, `'MultiPoint'`, `'MultiLineString'`, `'MultiPolygon'`,\n * `'GeometryCollection'`, or `'Circle'`.\n */\n\n/**\n * @type {import(\"../transform.js\").Transform}\n */\nconst tmpTransform = createTransform();\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for vector geometries.\n *\n * To get notified of changes to the geometry, register a listener for the\n * generic `change` event on your geometry instance.\n *\n * @abstract\n * @api\n */\nclass Geometry extends BaseObject {\n  constructor() {\n    super();\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.extentRevision_ = -1;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.simplifiedGeometryRevision = 0;\n\n    /**\n     * Get a transformed and simplified version of the geometry.\n     * @abstract\n     * @param {number} revision The geometry revision.\n     * @param {number} squaredTolerance Squared tolerance.\n     * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\n     * @return {Geometry} Simplified geometry.\n     */\n    this.simplifyTransformedInternal = memoizeOne(function (\n      revision,\n      squaredTolerance,\n      transform\n    ) {\n      if (!transform) {\n        return this.getSimplifiedGeometry(squaredTolerance);\n      }\n      const clone = this.clone();\n      clone.applyTransform(transform);\n      return clone.getSimplifiedGeometry(squaredTolerance);\n    });\n  }\n\n  /**\n   * Get a transformed and simplified version of the geometry.\n   * @abstract\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\n   * @return {Geometry} Simplified geometry.\n   */\n  simplifyTransformed(squaredTolerance, transform) {\n    return this.simplifyTransformedInternal(\n      this.getRevision(),\n      squaredTolerance,\n      transform\n    );\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @abstract\n   * @return {!Geometry} Clone.\n   */\n  clone() {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    return abstract();\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    const coord = this.getClosestPoint([x, y]);\n    return coord[0] === x && coord[1] === y;\n  }\n\n  /**\n   * Return the closest point of the geometry to the passed point as\n   * {@link module:ol/coordinate~Coordinate coordinate}.\n   * @param {import(\"../coordinate.js\").Coordinate} point Point.\n   * @param {import(\"../coordinate.js\").Coordinate} [closestPoint] Closest point.\n   * @return {import(\"../coordinate.js\").Coordinate} Closest point.\n   * @api\n   */\n  getClosestPoint(point, closestPoint) {\n    closestPoint = closestPoint ? closestPoint : [NaN, NaN];\n    this.closestPointXY(point[0], point[1], closestPoint, Infinity);\n    return closestPoint;\n  }\n\n  /**\n   * Returns true if this geometry includes the specified coordinate. If the\n   * coordinate is on the boundary of the geometry, returns false.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {boolean} Contains coordinate.\n   * @api\n   */\n  intersectsCoordinate(coordinate) {\n    return this.containsXY(coordinate[0], coordinate[1]);\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    return abstract();\n  }\n\n  /**\n   * Get the extent of the geometry.\n   * @param {import(\"../extent.js\").Extent} [extent] Extent.\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n  getExtent(extent) {\n    if (this.extentRevision_ != this.getRevision()) {\n      const extent = this.computeExtent(this.extent_);\n      if (isNaN(extent[0]) || isNaN(extent[1])) {\n        createOrUpdateEmpty(extent);\n      }\n      this.extentRevision_ = this.getRevision();\n    }\n    return returnOrUpdate(this.extent_, extent);\n  }\n\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} angle Rotation angle in radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n  rotate(angle, anchor) {\n    abstract();\n  }\n\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n  scale(sx, sy, anchor) {\n    abstract();\n  }\n\n  /**\n   * Create a simplified version of this geometry.  For linestrings, this uses\n   * the [Douglas Peucker](https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm)\n   * algorithm.  For polygons, a quantization-based\n   * simplification is used to preserve topology.\n   * @param {number} tolerance The tolerance distance for simplification.\n   * @return {Geometry} A new, simplified version of the original geometry.\n   * @api\n   */\n  simplify(tolerance) {\n    return this.getSimplifiedGeometry(tolerance * tolerance);\n  }\n\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker\n   * algorithm.\n   * See https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm.\n   * @abstract\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {Geometry} Simplified geometry.\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    return abstract();\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @abstract\n   * @return {Type} Geometry type.\n   */\n  getType() {\n    return abstract();\n  }\n\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @abstract\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   */\n  applyTransform(transformFn) {\n    abstract();\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   */\n  intersectsExtent(extent) {\n    return abstract();\n  }\n\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @abstract\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n  translate(deltaX, deltaY) {\n    abstract();\n  }\n\n  /**\n   * Transform each coordinate of the geometry from one coordinate reference\n   * system to another. The geometry is modified in place.\n   * For example, a line will be transformed to a line and a circle to a circle.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n   * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n   * @return {Geometry} This geometry.  Note that original geometry is\n   *     modified in place.\n   * @api\n   */\n  transform(source, destination) {\n    /** @type {import(\"../proj/Projection.js\").default} */\n    const sourceProj = getProjection(source);\n    const transformFn =\n      sourceProj.getUnits() == 'tile-pixels'\n        ? function (inCoordinates, outCoordinates, stride) {\n            const pixelExtent = sourceProj.getExtent();\n            const projectedExtent = sourceProj.getWorldExtent();\n            const scale = getHeight(projectedExtent) / getHeight(pixelExtent);\n            composeTransform(\n              tmpTransform,\n              projectedExtent[0],\n              projectedExtent[3],\n              scale,\n              -scale,\n              0,\n              0,\n              0\n            );\n            transform2D(\n              inCoordinates,\n              0,\n              inCoordinates.length,\n              stride,\n              tmpTransform,\n              outCoordinates\n            );\n            return getTransform(sourceProj, destination)(\n              inCoordinates,\n              outCoordinates,\n              stride\n            );\n          }\n        : getTransform(sourceProj, destination);\n    this.applyTransform(transformFn);\n    return this;\n  }\n}\n\nexport default Geometry;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}