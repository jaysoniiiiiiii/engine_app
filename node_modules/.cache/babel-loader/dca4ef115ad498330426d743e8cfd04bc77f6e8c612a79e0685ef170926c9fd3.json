{"ast":null,"code":"import _classCallCheck from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * @module ol/style/Icon\n */\nimport EventType from '../events/EventType.js';\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport { asArray } from '../color.js';\nimport { assert } from '../asserts.js';\nimport { get as getIconImage } from './IconImage.js';\nimport { getUid } from '../util.js';\n\n/**\n * @typedef {'fraction' | 'pixels'} IconAnchorUnits\n * Anchor unit can be either a fraction of the icon size or in pixels.\n */\n\n/**\n * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} IconOrigin\n * Icon origin. One of 'bottom-left', 'bottom-right', 'top-left', 'top-right'.\n */\n\n/**\n * @typedef {Object} Options\n * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.\n * @property {IconOrigin} [anchorOrigin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {IconAnchorUnits} [anchorXUnits='fraction'] Units in which the anchor x value is\n * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates\n * the x value in pixels.\n * @property {IconAnchorUnits} [anchorYUnits='fraction'] Units in which the anchor y value is\n * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates\n * the y value in pixels.\n * @property {import(\"../color.js\").Color|string} [color] Color to tint the icon. If not specified,\n * the icon will be left as is.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a\n * `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {HTMLImageElement|HTMLCanvasElement} [img] Image object for the icon. If the `src` option is not provided then the\n * provided image must already be loaded. And in that case, it is required\n * to provide the size of the image, with the `imgSize` option.\n * @property {import(\"../size.js\").Size} [imgSize] Image size in pixels. Only required if `img` is set and `src` is not.\n * The provided `imgSize` needs to match the actual size of the image.\n * @property {Array<number>} [displacement=[0, 0]] Displacement of the icon in pixels.\n * Positive values will shift the icon right and up.\n * @property {number} [opacity=1] Opacity of the icon.\n * @property {number} [width] The width of the icon in pixels. This can't be used together with `scale`.\n * @property {number} [height] The height of the icon in pixels. This can't be used together with `scale`.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {Array<number>} [offset=[0, 0]] Offset which, together with `size` and `offsetOrigin`, defines the\n * sub-rectangle to use from the original (sprite) image.\n * @property {IconOrigin} [offsetOrigin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {import(\"../size.js\").Size} [size] Icon size in pixels. Used together with `offset` to define the\n * sub-rectangle to use from the original (sprite) image.\n * @property {string} [src] Image source URI.\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [declutterMode] Declutter mode.\n */\n\n/**\n * @classdesc\n * Set icon style for vector features.\n * @api\n */\nvar Icon = /*#__PURE__*/function (_ImageStyle) {\n  _inherits(Icon, _ImageStyle);\n  var _super = _createSuper(Icon);\n  /**\n   * @param {Options} [options] Options.\n   */\n  function Icon(options) {\n    var _this;\n    _classCallCheck(this, Icon);\n    options = options || {};\n\n    /**\n     * @type {number}\n     */\n    var opacity = options.opacity !== undefined ? options.opacity : 1;\n\n    /**\n     * @type {number}\n     */\n    var rotation = options.rotation !== undefined ? options.rotation : 0;\n\n    /**\n     * @type {number|import(\"../size.js\").Size}\n     */\n    var scale = options.scale !== undefined ? options.scale : 1;\n\n    /**\n     * @type {boolean}\n     */\n    var rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;\n    _this = _super.call(this, {\n      opacity: opacity,\n      rotation: rotation,\n      scale: scale,\n      displacement: options.displacement !== undefined ? options.displacement : [0, 0],\n      rotateWithView: rotateWithView,\n      declutterMode: options.declutterMode\n    });\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    _this.anchor_ = options.anchor !== undefined ? options.anchor : [0.5, 0.5];\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    _this.normalizedAnchor_ = null;\n\n    /**\n     * @private\n     * @type {IconOrigin}\n     */\n    _this.anchorOrigin_ = options.anchorOrigin !== undefined ? options.anchorOrigin : 'top-left';\n\n    /**\n     * @private\n     * @type {IconAnchorUnits}\n     */\n    _this.anchorXUnits_ = options.anchorXUnits !== undefined ? options.anchorXUnits : 'fraction';\n\n    /**\n     * @private\n     * @type {IconAnchorUnits}\n     */\n    _this.anchorYUnits_ = options.anchorYUnits !== undefined ? options.anchorYUnits : 'fraction';\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    _this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n    var image = options.img !== undefined ? options.img : null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size|undefined}\n     */\n    _this.imgSize_ = options.imgSize;\n\n    /**\n     * @type {string|undefined}\n     */\n    var src = options.src;\n    assert(!(src !== undefined && image), 4); // `image` and `src` cannot be provided at the same time\n    assert(!image || image && _this.imgSize_, 5); // `imgSize` must be set when `image` is provided\n\n    if ((src === undefined || src.length === 0) && image) {\n      src = /** @type {HTMLImageElement} */image.src || getUid(image);\n    }\n    assert(src !== undefined && src.length > 0, 6); // A defined and non-empty `src` or `image` must be provided\n\n    // `width` or `height` cannot be provided together with `scale`\n    assert(!((options.width !== undefined || options.height !== undefined) && options.scale !== undefined), 69);\n\n    /**\n     * @type {import(\"../ImageState.js\").default}\n     */\n    var imageState = options.src !== undefined ? ImageState.IDLE : ImageState.LOADED;\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color}\n     */\n    _this.color_ = options.color !== undefined ? asArray(options.color) : null;\n\n    /**\n     * @private\n     * @type {import(\"./IconImage.js\").default}\n     */\n    _this.iconImage_ = getIconImage(image, /** @type {string} */src, _this.imgSize_ !== undefined ? _this.imgSize_ : null, _this.crossOrigin_, imageState, _this.color_);\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    _this.offset_ = options.offset !== undefined ? options.offset : [0, 0];\n    /**\n     * @private\n     * @type {IconOrigin}\n     */\n    _this.offsetOrigin_ = options.offsetOrigin !== undefined ? options.offsetOrigin : 'top-left';\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    _this.origin_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    _this.size_ = options.size !== undefined ? options.size : null;\n\n    /**\n     * @type {number|undefined}\n     */\n    _this.width_ = options.width;\n\n    /**\n     * @type {number|undefined}\n     */\n    _this.height_ = options.height;\n\n    /**\n     * Recalculate the scale if width or height were given.\n     */\n    if (_this.width_ !== undefined || _this.height_ !== undefined) {\n      var _image = _this.getImage(1);\n      var setScale = function setScale() {\n        _this.updateScaleFromWidthAndHeight(_this.width_, _this.height_);\n      };\n      if (_image.width > 0) {\n        _this.updateScaleFromWidthAndHeight(_this.width_, _this.height_);\n      } else {\n        _image.addEventListener('load', setScale);\n      }\n    }\n    return _this;\n  }\n\n  /**\n   * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.\n   * @return {Icon} The cloned style.\n   * @api\n   */\n  _createClass(Icon, [{\n    key: \"clone\",\n    value: function clone() {\n      var scale = this.getScale();\n      scale = Array.isArray(scale) ? scale.slice() : scale;\n      // if either width or height are defined, do not pass scale.\n      if (this.width_ !== undefined || this.height_ !== undefined) {\n        scale = undefined;\n      }\n      return new Icon({\n        anchor: this.anchor_.slice(),\n        anchorOrigin: this.anchorOrigin_,\n        anchorXUnits: this.anchorXUnits_,\n        anchorYUnits: this.anchorYUnits_,\n        color: this.color_ && this.color_.slice ? this.color_.slice() : this.color_ || undefined,\n        crossOrigin: this.crossOrigin_,\n        imgSize: this.imgSize_,\n        offset: this.offset_.slice(),\n        offsetOrigin: this.offsetOrigin_,\n        opacity: this.getOpacity(),\n        rotateWithView: this.getRotateWithView(),\n        rotation: this.getRotation(),\n        scale: scale,\n        size: this.size_ !== null ? this.size_.slice() : undefined,\n        src: this.getSrc(),\n        displacement: this.getDisplacement().slice(),\n        declutterMode: this.getDeclutterMode(),\n        width: this.width_,\n        height: this.height_\n      });\n    }\n\n    /**\n     * Set the scale of the Icon by calculating it from given width and height and the\n     * width and height of the image.\n     *\n     * @private\n     * @param {number} width The width.\n     * @param {number} height The height.\n     */\n  }, {\n    key: \"updateScaleFromWidthAndHeight\",\n    value: function updateScaleFromWidthAndHeight(width, height) {\n      var image = this.getImage(1);\n      if (width !== undefined && height !== undefined) {\n        _get(_getPrototypeOf(Icon.prototype), \"setScale\", this).call(this, [width / image.width, height / image.height]);\n      } else if (width !== undefined) {\n        _get(_getPrototypeOf(Icon.prototype), \"setScale\", this).call(this, [width / image.width, width / image.width]);\n      } else if (height !== undefined) {\n        _get(_getPrototypeOf(Icon.prototype), \"setScale\", this).call(this, [height / image.height, height / image.height]);\n      } else {\n        _get(_getPrototypeOf(Icon.prototype), \"setScale\", this).call(this, [1, 1]);\n      }\n    }\n\n    /**\n     * Get the anchor point in pixels. The anchor determines the center point for the\n     * symbolizer.\n     * @return {Array<number>} Anchor.\n     * @api\n     */\n  }, {\n    key: \"getAnchor\",\n    value: function getAnchor() {\n      var anchor = this.normalizedAnchor_;\n      if (!anchor) {\n        anchor = this.anchor_;\n        var size = this.getSize();\n        if (this.anchorXUnits_ == 'fraction' || this.anchorYUnits_ == 'fraction') {\n          if (!size) {\n            return null;\n          }\n          anchor = this.anchor_.slice();\n          if (this.anchorXUnits_ == 'fraction') {\n            anchor[0] *= size[0];\n          }\n          if (this.anchorYUnits_ == 'fraction') {\n            anchor[1] *= size[1];\n          }\n        }\n        if (this.anchorOrigin_ != 'top-left') {\n          if (!size) {\n            return null;\n          }\n          if (anchor === this.anchor_) {\n            anchor = this.anchor_.slice();\n          }\n          if (this.anchorOrigin_ == 'top-right' || this.anchorOrigin_ == 'bottom-right') {\n            anchor[0] = -anchor[0] + size[0];\n          }\n          if (this.anchorOrigin_ == 'bottom-left' || this.anchorOrigin_ == 'bottom-right') {\n            anchor[1] = -anchor[1] + size[1];\n          }\n        }\n        this.normalizedAnchor_ = anchor;\n      }\n      var displacement = this.getDisplacement();\n      var scale = this.getScaleArray();\n      // anchor is scaled by renderer but displacement should not be scaled\n      // so divide by scale here\n      return [anchor[0] - displacement[0] / scale[0], anchor[1] + displacement[1] / scale[1]];\n    }\n\n    /**\n     * Set the anchor point. The anchor determines the center point for the\n     * symbolizer.\n     *\n     * @param {Array<number>} anchor Anchor.\n     * @api\n     */\n  }, {\n    key: \"setAnchor\",\n    value: function setAnchor(anchor) {\n      this.anchor_ = anchor;\n      this.normalizedAnchor_ = null;\n    }\n\n    /**\n     * Get the icon color.\n     * @return {import(\"../color.js\").Color} Color.\n     * @api\n     */\n  }, {\n    key: \"getColor\",\n    value: function getColor() {\n      return this.color_;\n    }\n\n    /**\n     * Get the image icon.\n     * @param {number} pixelRatio Pixel ratio.\n     * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.\n     * @api\n     */\n  }, {\n    key: \"getImage\",\n    value: function getImage(pixelRatio) {\n      return this.iconImage_.getImage(pixelRatio);\n    }\n\n    /**\n     * Get the pixel ratio.\n     * @param {number} pixelRatio Pixel ratio.\n     * @return {number} The pixel ratio of the image.\n     * @api\n     */\n  }, {\n    key: \"getPixelRatio\",\n    value: function getPixelRatio(pixelRatio) {\n      return this.iconImage_.getPixelRatio(pixelRatio);\n    }\n\n    /**\n     * @return {import(\"../size.js\").Size} Image size.\n     */\n  }, {\n    key: \"getImageSize\",\n    value: function getImageSize() {\n      return this.iconImage_.getSize();\n    }\n\n    /**\n     * @return {import(\"../ImageState.js\").default} Image state.\n     */\n  }, {\n    key: \"getImageState\",\n    value: function getImageState() {\n      return this.iconImage_.getImageState();\n    }\n\n    /**\n     * @return {HTMLImageElement|HTMLCanvasElement} Image element.\n     */\n  }, {\n    key: \"getHitDetectionImage\",\n    value: function getHitDetectionImage() {\n      return this.iconImage_.getHitDetectionImage();\n    }\n\n    /**\n     * Get the origin of the symbolizer.\n     * @return {Array<number>} Origin.\n     * @api\n     */\n  }, {\n    key: \"getOrigin\",\n    value: function getOrigin() {\n      if (this.origin_) {\n        return this.origin_;\n      }\n      var offset = this.offset_;\n      if (this.offsetOrigin_ != 'top-left') {\n        var size = this.getSize();\n        var iconImageSize = this.iconImage_.getSize();\n        if (!size || !iconImageSize) {\n          return null;\n        }\n        offset = offset.slice();\n        if (this.offsetOrigin_ == 'top-right' || this.offsetOrigin_ == 'bottom-right') {\n          offset[0] = iconImageSize[0] - size[0] - offset[0];\n        }\n        if (this.offsetOrigin_ == 'bottom-left' || this.offsetOrigin_ == 'bottom-right') {\n          offset[1] = iconImageSize[1] - size[1] - offset[1];\n        }\n      }\n      this.origin_ = offset;\n      return this.origin_;\n    }\n\n    /**\n     * Get the image URL.\n     * @return {string|undefined} Image src.\n     * @api\n     */\n  }, {\n    key: \"getSrc\",\n    value: function getSrc() {\n      return this.iconImage_.getSrc();\n    }\n\n    /**\n     * Get the size of the icon (in pixels).\n     * @return {import(\"../size.js\").Size} Image size.\n     * @api\n     */\n  }, {\n    key: \"getSize\",\n    value: function getSize() {\n      return !this.size_ ? this.iconImage_.getSize() : this.size_;\n    }\n\n    /**\n     * Get the width of the icon (in pixels).\n     * @return {number} Icon width (in pixels).\n     * @api\n     */\n  }, {\n    key: \"getWidth\",\n    value: function getWidth() {\n      return this.width_;\n    }\n\n    /**\n     * Get the height of the icon (in pixels).\n     * @return {number} Icon height (in pixels).\n     * @api\n     */\n  }, {\n    key: \"getHeight\",\n    value: function getHeight() {\n      return this.height_;\n    }\n\n    /**\n     * Set the width of the icon in pixels.\n     *\n     * @param {number} width The width to set.\n     */\n  }, {\n    key: \"setWidth\",\n    value: function setWidth(width) {\n      this.width_ = width;\n      this.updateScaleFromWidthAndHeight(width, this.height_);\n    }\n\n    /**\n     * Set the height of the icon in pixels.\n     *\n     * @param {number} height The height to set.\n     */\n  }, {\n    key: \"setHeight\",\n    value: function setHeight(height) {\n      this.height_ = height;\n      this.updateScaleFromWidthAndHeight(this.width_, height);\n    }\n\n    /**\n     * Set the scale and updates the width and height correspondingly.\n     *\n     * @param {number|import(\"../size.js\").Size} scale Scale.\n     * @override\n     * @api\n     */\n  }, {\n    key: \"setScale\",\n    value: function setScale(scale) {\n      _get(_getPrototypeOf(Icon.prototype), \"setScale\", this).call(this, scale);\n      var image = this.getImage(1);\n      if (image) {\n        var widthScale = Array.isArray(scale) ? scale[0] : scale;\n        if (widthScale !== undefined) {\n          this.width_ = widthScale * image.width;\n        }\n        var heightScale = Array.isArray(scale) ? scale[1] : scale;\n        if (heightScale !== undefined) {\n          this.height_ = heightScale * image.height;\n        }\n      }\n    }\n\n    /**\n     * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n     */\n  }, {\n    key: \"listenImageChange\",\n    value: function listenImageChange(listener) {\n      this.iconImage_.addEventListener(EventType.CHANGE, listener);\n    }\n\n    /**\n     * Load not yet loaded URI.\n     * When rendering a feature with an icon style, the vector renderer will\n     * automatically call this method. However, you might want to call this\n     * method yourself for preloading or other purposes.\n     * @api\n     */\n  }, {\n    key: \"load\",\n    value: function load() {\n      this.iconImage_.load();\n    }\n\n    /**\n     * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n     */\n  }, {\n    key: \"unlistenImageChange\",\n    value: function unlistenImageChange(listener) {\n      this.iconImage_.removeEventListener(EventType.CHANGE, listener);\n    }\n  }]);\n  return Icon;\n}(ImageStyle);\nexport default Icon;","map":{"version":3,"names":["EventType","ImageState","ImageStyle","asArray","assert","get","getIconImage","getUid","Icon","_ImageStyle","_inherits","_super","_createSuper","options","_this","_classCallCheck","opacity","undefined","rotation","scale","rotateWithView","call","displacement","declutterMode","anchor_","anchor","normalizedAnchor_","anchorOrigin_","anchorOrigin","anchorXUnits_","anchorXUnits","anchorYUnits_","anchorYUnits","crossOrigin_","crossOrigin","image","img","imgSize_","imgSize","src","length","width","height","imageState","IDLE","LOADED","color_","color","iconImage_","offset_","offset","offsetOrigin_","offsetOrigin","origin_","size_","size","width_","height_","getImage","setScale","updateScaleFromWidthAndHeight","addEventListener","_createClass","key","value","clone","getScale","Array","isArray","slice","getOpacity","getRotateWithView","getRotation","getSrc","getDisplacement","getDeclutterMode","_get","_getPrototypeOf","prototype","getAnchor","getSize","getScaleArray","setAnchor","getColor","pixelRatio","getPixelRatio","getImageSize","getImageState","getHitDetectionImage","getOrigin","iconImageSize","getWidth","getHeight","setWidth","setHeight","widthScale","heightScale","listenImageChange","listener","CHANGE","load","unlistenImageChange","removeEventListener"],"sources":["/home/jay/Downloads/major/my-app/gis/web-gis/node_modules/ol/style/Icon.js"],"sourcesContent":["/**\n * @module ol/style/Icon\n */\nimport EventType from '../events/EventType.js';\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport {asArray} from '../color.js';\nimport {assert} from '../asserts.js';\nimport {get as getIconImage} from './IconImage.js';\nimport {getUid} from '../util.js';\n\n/**\n * @typedef {'fraction' | 'pixels'} IconAnchorUnits\n * Anchor unit can be either a fraction of the icon size or in pixels.\n */\n\n/**\n * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} IconOrigin\n * Icon origin. One of 'bottom-left', 'bottom-right', 'top-left', 'top-right'.\n */\n\n/**\n * @typedef {Object} Options\n * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.\n * @property {IconOrigin} [anchorOrigin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {IconAnchorUnits} [anchorXUnits='fraction'] Units in which the anchor x value is\n * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates\n * the x value in pixels.\n * @property {IconAnchorUnits} [anchorYUnits='fraction'] Units in which the anchor y value is\n * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates\n * the y value in pixels.\n * @property {import(\"../color.js\").Color|string} [color] Color to tint the icon. If not specified,\n * the icon will be left as is.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a\n * `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {HTMLImageElement|HTMLCanvasElement} [img] Image object for the icon. If the `src` option is not provided then the\n * provided image must already be loaded. And in that case, it is required\n * to provide the size of the image, with the `imgSize` option.\n * @property {import(\"../size.js\").Size} [imgSize] Image size in pixels. Only required if `img` is set and `src` is not.\n * The provided `imgSize` needs to match the actual size of the image.\n * @property {Array<number>} [displacement=[0, 0]] Displacement of the icon in pixels.\n * Positive values will shift the icon right and up.\n * @property {number} [opacity=1] Opacity of the icon.\n * @property {number} [width] The width of the icon in pixels. This can't be used together with `scale`.\n * @property {number} [height] The height of the icon in pixels. This can't be used together with `scale`.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {Array<number>} [offset=[0, 0]] Offset which, together with `size` and `offsetOrigin`, defines the\n * sub-rectangle to use from the original (sprite) image.\n * @property {IconOrigin} [offsetOrigin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {import(\"../size.js\").Size} [size] Icon size in pixels. Used together with `offset` to define the\n * sub-rectangle to use from the original (sprite) image.\n * @property {string} [src] Image source URI.\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [declutterMode] Declutter mode.\n */\n\n/**\n * @classdesc\n * Set icon style for vector features.\n * @api\n */\nclass Icon extends ImageStyle {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    /**\n     * @type {number}\n     */\n    const opacity = options.opacity !== undefined ? options.opacity : 1;\n\n    /**\n     * @type {number}\n     */\n    const rotation = options.rotation !== undefined ? options.rotation : 0;\n\n    /**\n     * @type {number|import(\"../size.js\").Size}\n     */\n    const scale = options.scale !== undefined ? options.scale : 1;\n\n    /**\n     * @type {boolean}\n     */\n    const rotateWithView =\n      options.rotateWithView !== undefined ? options.rotateWithView : false;\n\n    super({\n      opacity: opacity,\n      rotation: rotation,\n      scale: scale,\n      displacement:\n        options.displacement !== undefined ? options.displacement : [0, 0],\n      rotateWithView: rotateWithView,\n      declutterMode: options.declutterMode,\n    });\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.anchor_ = options.anchor !== undefined ? options.anchor : [0.5, 0.5];\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.normalizedAnchor_ = null;\n\n    /**\n     * @private\n     * @type {IconOrigin}\n     */\n    this.anchorOrigin_ =\n      options.anchorOrigin !== undefined ? options.anchorOrigin : 'top-left';\n\n    /**\n     * @private\n     * @type {IconAnchorUnits}\n     */\n    this.anchorXUnits_ =\n      options.anchorXUnits !== undefined ? options.anchorXUnits : 'fraction';\n\n    /**\n     * @private\n     * @type {IconAnchorUnits}\n     */\n    this.anchorYUnits_ =\n      options.anchorYUnits !== undefined ? options.anchorYUnits : 'fraction';\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n    const image = options.img !== undefined ? options.img : null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size|undefined}\n     */\n    this.imgSize_ = options.imgSize;\n\n    /**\n     * @type {string|undefined}\n     */\n    let src = options.src;\n\n    assert(!(src !== undefined && image), 4); // `image` and `src` cannot be provided at the same time\n    assert(!image || (image && this.imgSize_), 5); // `imgSize` must be set when `image` is provided\n\n    if ((src === undefined || src.length === 0) && image) {\n      src = /** @type {HTMLImageElement} */ (image).src || getUid(image);\n    }\n    assert(src !== undefined && src.length > 0, 6); // A defined and non-empty `src` or `image` must be provided\n\n    // `width` or `height` cannot be provided together with `scale`\n    assert(\n      !(\n        (options.width !== undefined || options.height !== undefined) &&\n        options.scale !== undefined\n      ),\n      69\n    );\n\n    /**\n     * @type {import(\"../ImageState.js\").default}\n     */\n    const imageState =\n      options.src !== undefined ? ImageState.IDLE : ImageState.LOADED;\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color}\n     */\n    this.color_ = options.color !== undefined ? asArray(options.color) : null;\n\n    /**\n     * @private\n     * @type {import(\"./IconImage.js\").default}\n     */\n    this.iconImage_ = getIconImage(\n      image,\n      /** @type {string} */ (src),\n      this.imgSize_ !== undefined ? this.imgSize_ : null,\n      this.crossOrigin_,\n      imageState,\n      this.color_\n    );\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.offset_ = options.offset !== undefined ? options.offset : [0, 0];\n    /**\n     * @private\n     * @type {IconOrigin}\n     */\n    this.offsetOrigin_ =\n      options.offsetOrigin !== undefined ? options.offsetOrigin : 'top-left';\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.origin_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.size_ = options.size !== undefined ? options.size : null;\n\n    /**\n     * @type {number|undefined}\n     */\n    this.width_ = options.width;\n\n    /**\n     * @type {number|undefined}\n     */\n    this.height_ = options.height;\n\n    /**\n     * Recalculate the scale if width or height were given.\n     */\n    if (this.width_ !== undefined || this.height_ !== undefined) {\n      const image = this.getImage(1);\n      const setScale = () => {\n        this.updateScaleFromWidthAndHeight(this.width_, this.height_);\n      };\n      if (image.width > 0) {\n        this.updateScaleFromWidthAndHeight(this.width_, this.height_);\n      } else {\n        image.addEventListener('load', setScale);\n      }\n    }\n  }\n\n  /**\n   * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.\n   * @return {Icon} The cloned style.\n   * @api\n   */\n  clone() {\n    let scale = this.getScale();\n    scale = Array.isArray(scale) ? scale.slice() : scale;\n    // if either width or height are defined, do not pass scale.\n    if (this.width_ !== undefined || this.height_ !== undefined) {\n      scale = undefined;\n    }\n    return new Icon({\n      anchor: this.anchor_.slice(),\n      anchorOrigin: this.anchorOrigin_,\n      anchorXUnits: this.anchorXUnits_,\n      anchorYUnits: this.anchorYUnits_,\n      color:\n        this.color_ && this.color_.slice\n          ? this.color_.slice()\n          : this.color_ || undefined,\n      crossOrigin: this.crossOrigin_,\n      imgSize: this.imgSize_,\n      offset: this.offset_.slice(),\n      offsetOrigin: this.offsetOrigin_,\n      opacity: this.getOpacity(),\n      rotateWithView: this.getRotateWithView(),\n      rotation: this.getRotation(),\n      scale: scale,\n      size: this.size_ !== null ? this.size_.slice() : undefined,\n      src: this.getSrc(),\n      displacement: this.getDisplacement().slice(),\n      declutterMode: this.getDeclutterMode(),\n      width: this.width_,\n      height: this.height_,\n    });\n  }\n\n  /**\n   * Set the scale of the Icon by calculating it from given width and height and the\n   * width and height of the image.\n   *\n   * @private\n   * @param {number} width The width.\n   * @param {number} height The height.\n   */\n  updateScaleFromWidthAndHeight(width, height) {\n    const image = this.getImage(1);\n    if (width !== undefined && height !== undefined) {\n      super.setScale([width / image.width, height / image.height]);\n    } else if (width !== undefined) {\n      super.setScale([width / image.width, width / image.width]);\n    } else if (height !== undefined) {\n      super.setScale([height / image.height, height / image.height]);\n    } else {\n      super.setScale([1, 1]);\n    }\n  }\n\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @return {Array<number>} Anchor.\n   * @api\n   */\n  getAnchor() {\n    let anchor = this.normalizedAnchor_;\n    if (!anchor) {\n      anchor = this.anchor_;\n      const size = this.getSize();\n      if (\n        this.anchorXUnits_ == 'fraction' ||\n        this.anchorYUnits_ == 'fraction'\n      ) {\n        if (!size) {\n          return null;\n        }\n        anchor = this.anchor_.slice();\n        if (this.anchorXUnits_ == 'fraction') {\n          anchor[0] *= size[0];\n        }\n        if (this.anchorYUnits_ == 'fraction') {\n          anchor[1] *= size[1];\n        }\n      }\n\n      if (this.anchorOrigin_ != 'top-left') {\n        if (!size) {\n          return null;\n        }\n        if (anchor === this.anchor_) {\n          anchor = this.anchor_.slice();\n        }\n        if (\n          this.anchorOrigin_ == 'top-right' ||\n          this.anchorOrigin_ == 'bottom-right'\n        ) {\n          anchor[0] = -anchor[0] + size[0];\n        }\n        if (\n          this.anchorOrigin_ == 'bottom-left' ||\n          this.anchorOrigin_ == 'bottom-right'\n        ) {\n          anchor[1] = -anchor[1] + size[1];\n        }\n      }\n      this.normalizedAnchor_ = anchor;\n    }\n    const displacement = this.getDisplacement();\n    const scale = this.getScaleArray();\n    // anchor is scaled by renderer but displacement should not be scaled\n    // so divide by scale here\n    return [\n      anchor[0] - displacement[0] / scale[0],\n      anchor[1] + displacement[1] / scale[1],\n    ];\n  }\n\n  /**\n   * Set the anchor point. The anchor determines the center point for the\n   * symbolizer.\n   *\n   * @param {Array<number>} anchor Anchor.\n   * @api\n   */\n  setAnchor(anchor) {\n    this.anchor_ = anchor;\n    this.normalizedAnchor_ = null;\n  }\n\n  /**\n   * Get the icon color.\n   * @return {import(\"../color.js\").Color} Color.\n   * @api\n   */\n  getColor() {\n    return this.color_;\n  }\n\n  /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.\n   * @api\n   */\n  getImage(pixelRatio) {\n    return this.iconImage_.getImage(pixelRatio);\n  }\n\n  /**\n   * Get the pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} The pixel ratio of the image.\n   * @api\n   */\n  getPixelRatio(pixelRatio) {\n    return this.iconImage_.getPixelRatio(pixelRatio);\n  }\n\n  /**\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  getImageSize() {\n    return this.iconImage_.getSize();\n  }\n\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  getImageState() {\n    return this.iconImage_.getImageState();\n  }\n\n  /**\n   * @return {HTMLImageElement|HTMLCanvasElement} Image element.\n   */\n  getHitDetectionImage() {\n    return this.iconImage_.getHitDetectionImage();\n  }\n\n  /**\n   * Get the origin of the symbolizer.\n   * @return {Array<number>} Origin.\n   * @api\n   */\n  getOrigin() {\n    if (this.origin_) {\n      return this.origin_;\n    }\n    let offset = this.offset_;\n\n    if (this.offsetOrigin_ != 'top-left') {\n      const size = this.getSize();\n      const iconImageSize = this.iconImage_.getSize();\n      if (!size || !iconImageSize) {\n        return null;\n      }\n      offset = offset.slice();\n      if (\n        this.offsetOrigin_ == 'top-right' ||\n        this.offsetOrigin_ == 'bottom-right'\n      ) {\n        offset[0] = iconImageSize[0] - size[0] - offset[0];\n      }\n      if (\n        this.offsetOrigin_ == 'bottom-left' ||\n        this.offsetOrigin_ == 'bottom-right'\n      ) {\n        offset[1] = iconImageSize[1] - size[1] - offset[1];\n      }\n    }\n    this.origin_ = offset;\n    return this.origin_;\n  }\n\n  /**\n   * Get the image URL.\n   * @return {string|undefined} Image src.\n   * @api\n   */\n  getSrc() {\n    return this.iconImage_.getSrc();\n  }\n\n  /**\n   * Get the size of the icon (in pixels).\n   * @return {import(\"../size.js\").Size} Image size.\n   * @api\n   */\n  getSize() {\n    return !this.size_ ? this.iconImage_.getSize() : this.size_;\n  }\n\n  /**\n   * Get the width of the icon (in pixels).\n   * @return {number} Icon width (in pixels).\n   * @api\n   */\n  getWidth() {\n    return this.width_;\n  }\n\n  /**\n   * Get the height of the icon (in pixels).\n   * @return {number} Icon height (in pixels).\n   * @api\n   */\n  getHeight() {\n    return this.height_;\n  }\n\n  /**\n   * Set the width of the icon in pixels.\n   *\n   * @param {number} width The width to set.\n   */\n  setWidth(width) {\n    this.width_ = width;\n    this.updateScaleFromWidthAndHeight(width, this.height_);\n  }\n\n  /**\n   * Set the height of the icon in pixels.\n   *\n   * @param {number} height The height to set.\n   */\n  setHeight(height) {\n    this.height_ = height;\n    this.updateScaleFromWidthAndHeight(this.width_, height);\n  }\n\n  /**\n   * Set the scale and updates the width and height correspondingly.\n   *\n   * @param {number|import(\"../size.js\").Size} scale Scale.\n   * @override\n   * @api\n   */\n  setScale(scale) {\n    super.setScale(scale);\n    const image = this.getImage(1);\n    if (image) {\n      const widthScale = Array.isArray(scale) ? scale[0] : scale;\n      if (widthScale !== undefined) {\n        this.width_ = widthScale * image.width;\n      }\n      const heightScale = Array.isArray(scale) ? scale[1] : scale;\n      if (heightScale !== undefined) {\n        this.height_ = heightScale * image.height;\n      }\n    }\n  }\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  listenImageChange(listener) {\n    this.iconImage_.addEventListener(EventType.CHANGE, listener);\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * When rendering a feature with an icon style, the vector renderer will\n   * automatically call this method. However, you might want to call this\n   * method yourself for preloading or other purposes.\n   * @api\n   */\n  load() {\n    this.iconImage_.load();\n  }\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  unlistenImageChange(listener) {\n    this.iconImage_.removeEventListener(EventType.CHANGE, listener);\n  }\n}\n\nexport default Icon;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}